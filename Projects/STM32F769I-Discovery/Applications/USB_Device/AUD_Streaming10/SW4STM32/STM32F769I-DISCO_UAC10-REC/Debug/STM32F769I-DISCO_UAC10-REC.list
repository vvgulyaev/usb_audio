
STM32F769I-DISCO_UAC10-REC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000736c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007564  08007564  00017564  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080075f8  080075f8  000175f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007600  08007600  00017600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007604  08007604  00017604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001bc  20000000  08007608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001294  200001bc  080077c4  000201bc  2**2
                  ALLOC
  8 ._user_heap_stack 00003800  20001450  080077c4  00021450  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032386  00000000  00000000  000201ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005aa8  00000000  00000000  00052570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00011a75  00000000  00000000  00058018  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000013b0  00000000  00000000  00069a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c58  00000000  00000000  0006ae40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003565e  00000000  00000000  0006ca98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001a9a9  00000000  00000000  000a20f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00129049  00000000  00000000  000bca9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001e5ae8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000039b8  00000000  00000000  001e5b64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001bc 	.word	0x200001bc
 8000214:	00000000 	.word	0x00000000
 8000218:	0800754c 	.word	0x0800754c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001c0 	.word	0x200001c0
 8000234:	0800754c 	.word	0x0800754c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <USBD_AUDIO_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc (uint16_t *length)
{
  *length = USBD_AUDIO_CfgDescSize;
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <USBD_AUDIO_GetCfgDesc+0xc>)
 800053a:	881a      	ldrh	r2, [r3, #0]
 800053c:	8002      	strh	r2, [r0, #0]
  return USBD_AUDIO_CfgDesc;
}
 800053e:	6858      	ldr	r0, [r3, #4]
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	200001d8 	.word	0x200001d8

08000548 <USBD_AUDIO_EP0_TxReady>:
  */
static uint8_t  USBD_AUDIO_EP0_TxReady (USBD_HandleTypeDef *pdev)
{
  /* Only OUT control data are processed */
  return USBD_OK;
}
 8000548:	2000      	movs	r0, #0
 800054a:	4770      	bx	lr

0800054c <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF (USBD_HandleTypeDef *pdev)
{
 800054c:	b570      	push	{r4, r5, r6, lr}
    USBD_AUDIO_HandleTypeDef   *haudio;
  
 
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData; 
 800054e:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  
  for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 8000552:	2500      	movs	r5, #0
 8000554:	4634      	mov	r4, r6
 8000556:	7873      	ldrb	r3, [r6, #1]
 8000558:	42ab      	cmp	r3, r5
 800055a:	dc01      	bgt.n	8000560 <USBD_AUDIO_SOF+0x14>
          haudio->aud_function.as_interfaces[i].SofReceived(haudio->aud_function.as_interfaces[i].private_data);
        }
      }
  }
  return USBD_OK;
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd70      	pop	{r4, r5, r6, pc}
      if(haudio->aud_function.as_interfaces[i].alternate!=0)
 8000560:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8000564:	b11b      	cbz	r3, 800056e <USBD_AUDIO_SOF+0x22>
        if(haudio->aud_function.as_interfaces[i].SofReceived)
 8000566:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000568:	b10b      	cbz	r3, 800056e <USBD_AUDIO_SOF+0x22>
          haudio->aud_function.as_interfaces[i].SofReceived(haudio->aud_function.as_interfaces[i].private_data);
 800056a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800056c:	4798      	blx	r3
  for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800056e:	3501      	adds	r5, #1
 8000570:	3438      	adds	r4, #56	; 0x38
 8000572:	e7f0      	b.n	8000556 <USBD_AUDIO_SOF+0xa>

08000574 <USBD_AUDIO_IsoOutIncomplete>:
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete (USBD_HandleTypeDef *pdev, uint8_t epnum)
{

  return USBD_OK;
}
 8000574:	2000      	movs	r0, #0
 8000576:	4770      	bx	lr

08000578 <USBD_AUDIO_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_AUDIO_DeviceQualifierDesc);
 8000578:	230a      	movs	r3, #10
 800057a:	8003      	strh	r3, [r0, #0]
  return USBD_AUDIO_DeviceQualifierDesc;
}
 800057c:	4800      	ldr	r0, [pc, #0]	; (8000580 <USBD_AUDIO_GetDeviceQualifierDesc+0x8>)
 800057e:	4770      	bx	lr
 8000580:	20000000 	.word	0x20000000

08000584 <USBD_AUDIO_IsoINIncomplete>:
{
 8000584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000588:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
 800058c:	4607      	mov	r7, r0
    current_sof = USB_SOF_NUMBER();
 800058e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8000618 <USBD_AUDIO_IsoINIncomplete+0x94>
  for(int i = 1; i<USBD_AUDIO_MAX_IN_EP; i++)
 8000592:	2501      	movs	r5, #1
 8000594:	34a0      	adds	r4, #160	; 0xa0
 8000596:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800061c <USBD_AUDIO_IsoINIncomplete+0x98>
 800059a:	46c2      	mov	sl, r8
    if((ep->open) && IS_ISO_IN_INCOMPLETE_EP(i,current_sof, ep->tx_rx_soffn))
 800059c:	7963      	ldrb	r3, [r4, #5]
    current_sof = USB_SOF_NUMBER();
 800059e:	f8d8 2008 	ldr.w	r2, [r8, #8]
    if((ep->open) && IS_ISO_IN_INCOMPLETE_EP(i,current_sof, ep->tx_rx_soffn))
 80005a2:	b37b      	cbz	r3, 8000604 <USBD_AUDIO_IsoINIncomplete+0x80>
 80005a4:	eb05 0309 	add.w	r3, r5, r9
 80005a8:	015b      	lsls	r3, r3, #5
 80005aa:	6819      	ldr	r1, [r3, #0]
 80005ac:	2900      	cmp	r1, #0
 80005ae:	da29      	bge.n	8000604 <USBD_AUDIO_IsoINIncomplete+0x80>
    current_sof = USB_SOF_NUMBER();
 80005b0:	f3c2 220d 	ubfx	r2, r2, #8, #14
    if((ep->open) && IS_ISO_IN_INCOMPLETE_EP(i,current_sof, ep->tx_rx_soffn))
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 80005ba:	07db      	lsls	r3, r3, #31
 80005bc:	d505      	bpl.n	80005ca <USBD_AUDIO_IsoINIncomplete+0x46>
 80005be:	8923      	ldrh	r3, [r4, #8]
 80005c0:	3302      	adds	r3, #2
 80005c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d11c      	bne.n	8000604 <USBD_AUDIO_IsoINIncomplete+0x80>
      epnum = i|0x80;
 80005ca:	f065 067f 	orn	r6, r5, #127	; 0x7f
      USBD_LL_FlushEP(pdev, epnum);
 80005ce:	4638      	mov	r0, r7
      epnum = i|0x80;
 80005d0:	b2f6      	uxtb	r6, r6
      USB_CLEAR_INCOMPLETE_IN_EP(epnum);
 80005d2:	f006 037f 	and.w	r3, r6, #127	; 0x7f
      USBD_LL_FlushEP(pdev, epnum);
 80005d6:	4631      	mov	r1, r6
      USB_CLEAR_INCOMPLETE_IN_EP(epnum);
 80005d8:	444b      	add	r3, r9
 80005da:	015b      	lsls	r3, r3, #5
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f042 4290 	orr.w	r2, r2, #1207959552	; 0x48000000
 80005e2:	601a      	str	r2, [r3, #0]
      USBD_LL_FlushEP(pdev, epnum);
 80005e4:	f002 fee6 	bl	80033b4 <USBD_LL_FlushEP>
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 80005e8:	f8da 3008 	ldr.w	r3, [sl, #8]
 80005ec:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80005f0:	8123      	strh	r3, [r4, #8]
     if(ep->ep_type==USBD_AUDIO_DATA_EP)
 80005f2:	7923      	ldrb	r3, [r4, #4]
 80005f4:	b96b      	cbnz	r3, 8000612 <USBD_AUDIO_IsoINIncomplete+0x8e>
                      ep->ep_description.data_ep->buf,
 80005f6:	6822      	ldr	r2, [r4, #0]
        USBD_LL_Transmit(pdev, 
 80005f8:	4631      	mov	r1, r6
 80005fa:	4638      	mov	r0, r7
 80005fc:	8993      	ldrh	r3, [r2, #12]
 80005fe:	6892      	ldr	r2, [r2, #8]
 8000600:	f002 ff07 	bl	8003412 <USBD_LL_Transmit>
  for(int i = 1; i<USBD_AUDIO_MAX_IN_EP; i++)
 8000604:	3501      	adds	r5, #1
 8000606:	340c      	adds	r4, #12
 8000608:	2d05      	cmp	r5, #5
 800060a:	d1c7      	bne.n	800059c <USBD_AUDIO_IsoINIncomplete+0x18>
}
 800060c:	2000      	movs	r0, #0
 800060e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
       USBD_error_handler();
 8000612:	f002 fd12 	bl	800303a <USBD_error_handler>
 8000616:	e7f5      	b.n	8000604 <USBD_AUDIO_IsoINIncomplete+0x80>
 8000618:	40040800 	.word	0x40040800
 800061c:	02002048 	.word	0x02002048

08000620 <USBD_AUDIO_DataIn>:
{
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   if(ep->open)
 8000622:	220c      	movs	r2, #12
   ep = &((USBD_AUDIO_HandleTypeDef*) pdev->pClassData)->ep_in[epnum&0x7F];
 8000624:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8000628:	f001 047f 	and.w	r4, r1, #127	; 0x7f
{
 800062c:	4606      	mov	r6, r0
 800062e:	460f      	mov	r7, r1
   if(ep->open)
 8000630:	fb02 3404 	mla	r4, r2, r4, r3
 8000634:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8000638:	b1bb      	cbz	r3, 800066a <USBD_AUDIO_DataIn+0x4a>
          ep->ep_description.data_ep->buf = ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 800063a:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
 800063e:	18a9      	adds	r1, r5, r2
 8000640:	696b      	ldr	r3, [r5, #20]
 8000642:	6a28      	ldr	r0, [r5, #32]
 8000644:	4798      	blx	r3
          ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000646:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <USBD_AUDIO_DataIn+0x50>)
                      ep->ep_description.data_ep->buf,
 8000648:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
          USBD_LL_Transmit(pdev, 
 800064c:	f047 0180 	orr.w	r1, r7, #128	; 0x80
          ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000650:	689b      	ldr	r3, [r3, #8]
          ep->ep_description.data_ep->buf = ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 8000652:	60a8      	str	r0, [r5, #8]
          USBD_LL_Transmit(pdev, 
 8000654:	4630      	mov	r0, r6
          ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000656:	f3c3 230d 	ubfx	r3, r3, #8, #14
 800065a:	f8a4 309c 	strh.w	r3, [r4, #156]	; 0x9c
          USBD_LL_Transmit(pdev, 
 800065e:	8993      	ldrh	r3, [r2, #12]
 8000660:	6892      	ldr	r2, [r2, #8]
 8000662:	f002 fed6 	bl	8003412 <USBD_LL_Transmit>
}
 8000666:	2000      	movs	r0, #0
 8000668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     USBD_error_handler();
 800066a:	f002 fce6 	bl	800303a <USBD_error_handler>
 800066e:	e7fa      	b.n	8000666 <USBD_AUDIO_DataIn+0x46>
 8000670:	40040800 	.word	0x40040800

08000674 <USBD_AUDIO_EP0_RxReady>:
{
 8000674:	b538      	push	{r3, r4, r5, lr}
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData; 
 8000676:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  if(haudio->last_control.req == 0x00)
 800067a:	f893 415a 	ldrb.w	r4, [r3, #346]	; 0x15a
 800067e:	b1d4      	cbz	r4, 80006b6 <USBD_AUDIO_EP0_RxReady+0x42>
  if(haudio->last_control.request_target == AUDIO_UNIT_CONTROL_REQUEST)
 8000680:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8000684:	2a01      	cmp	r2, #1
 8000686:	d116      	bne.n	80006b6 <USBD_AUDIO_EP0_RxReady+0x42>
    ctl=haudio->last_control.entity.controller;
 8000688:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    switch(ctl->type)
 800068c:	7851      	ldrb	r1, [r2, #1]
 800068e:	2906      	cmp	r1, #6
 8000690:	d107      	bne.n	80006a2 <USBD_AUDIO_EP0_RxReady+0x2e>
            uint16_t selector = HIBYTE(haudio->last_control.wValue);
 8000692:	f8b3 0158 	ldrh.w	r0, [r3, #344]	; 0x158
            USBD_AUDIO_FeatureControlCallbacksTypeDef* feature_control = ctl->Callbacks.feature_control;
 8000696:	6891      	ldr	r1, [r2, #8]
          switch(selector)
 8000698:	0a05      	lsrs	r5, r0, #8
 800069a:	2d01      	cmp	r5, #1
 800069c:	d004      	beq.n	80006a8 <USBD_AUDIO_EP0_RxReady+0x34>
 800069e:	2d02      	cmp	r5, #2
 80006a0:	d00b      	beq.n	80006ba <USBD_AUDIO_EP0_RxReady+0x46>
                                USBD_error_handler();
 80006a2:	f002 fcca 	bl	800303a <USBD_error_handler>
 80006a6:	e006      	b.n	80006b6 <USBD_AUDIO_EP0_RxReady+0x42>
                      if(feature_control->SetMute)
 80006a8:	684c      	ldr	r4, [r1, #4]
 80006aa:	b124      	cbz	r4, 80006b6 <USBD_AUDIO_EP0_RxReady+0x42>
                        feature_control->SetMute(LOBYTE(haudio->last_control.wValue),
 80006ac:	68d2      	ldr	r2, [r2, #12]
 80006ae:	b2c0      	uxtb	r0, r0
 80006b0:	f893 1111 	ldrb.w	r1, [r3, #273]	; 0x111
 80006b4:	47a0      	blx	r4
}
 80006b6:	2000      	movs	r0, #0
 80006b8:	bd38      	pop	{r3, r4, r5, pc}
                       switch(haudio->last_control.req)
 80006ba:	2c01      	cmp	r4, #1
 80006bc:	d1f1      	bne.n	80006a2 <USBD_AUDIO_EP0_RxReady+0x2e>
                              if(feature_control->SetCurVolume)
 80006be:	688c      	ldr	r4, [r1, #8]
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	d0f8      	beq.n	80006b6 <USBD_AUDIO_EP0_RxReady+0x42>
                                  feature_control->SetCurVolume(LOBYTE(haudio->last_control.wValue),
 80006c4:	68d2      	ldr	r2, [r2, #12]
 80006c6:	b2c0      	uxtb	r0, r0
 80006c8:	f8b3 1111 	ldrh.w	r1, [r3, #273]	; 0x111
 80006cc:	47a0      	blx	r4
 80006ce:	e7f2      	b.n	80006b6 <USBD_AUDIO_EP0_RxReady+0x42>

080006d0 <USBD_AUDIO_DataOut>:
{
 80006d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  ep=&((USBD_AUDIO_HandleTypeDef*) pdev->pClassData)->ep_out[epnum];
 80006d2:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
  if(ep->open)
 80006d6:	240c      	movs	r4, #12
{
 80006d8:	4606      	mov	r6, r0
 80006da:	460f      	mov	r7, r1
  if(ep->open)
 80006dc:	fb04 3401 	mla	r4, r4, r1, r3
 80006e0:	f894 30d5 	ldrb.w	r3, [r4, #213]	; 0xd5
 80006e4:	b1d3      	cbz	r3, 800071c <USBD_AUDIO_DataOut+0x4c>
    packet_length = USBD_LL_GetRxDataSize(pdev, epnum);
 80006e6:	f002 fea2 	bl	800342e <USBD_LL_GetRxDataSize>
 80006ea:	ad02      	add	r5, sp, #8
    ep->ep_description.data_ep->DataReceived(packet_length,ep->ep_description.data_ep->private_data);
 80006ec:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    packet_length = USBD_LL_GetRxDataSize(pdev, epnum);
 80006f0:	b280      	uxth	r0, r0
    ep->ep_description.data_ep->DataReceived(packet_length,ep->ep_description.data_ep->private_data);
 80006f2:	691a      	ldr	r2, [r3, #16]
 80006f4:	6a19      	ldr	r1, [r3, #32]
    packet_length = USBD_LL_GetRxDataSize(pdev, epnum);
 80006f6:	f825 0d02 	strh.w	r0, [r5, #-2]!
    ep->ep_description.data_ep->DataReceived(packet_length,ep->ep_description.data_ep->private_data);
 80006fa:	4790      	blx	r2
    pbuf=  ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,&packet_length);                               
 80006fc:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8000700:	4629      	mov	r1, r5
 8000702:	695a      	ldr	r2, [r3, #20]
 8000704:	6a18      	ldr	r0, [r3, #32]
 8000706:	4790      	blx	r2
     USBD_LL_PrepareReceive(pdev,
 8000708:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800070c:	4602      	mov	r2, r0
 800070e:	4639      	mov	r1, r7
 8000710:	4630      	mov	r0, r6
 8000712:	f002 fe85 	bl	8003420 <USBD_LL_PrepareReceive>
}
 8000716:	2000      	movs	r0, #0
 8000718:	b003      	add	sp, #12
 800071a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBD_error_handler();
 800071c:	f002 fc8d 	bl	800303a <USBD_error_handler>
 8000720:	e7f9      	b.n	8000716 <USBD_AUDIO_DataOut+0x46>
	...

08000724 <USBD_AUDIO_Setup>:
{
 8000724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8000728:	780b      	ldrb	r3, [r1, #0]
{
 800072a:	4607      	mov	r7, r0
  haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800072c:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8000730:	f013 0460 	ands.w	r4, r3, #96	; 0x60
 8000734:	f000 8083 	beq.w	800083e <USBD_AUDIO_Setup+0x11a>
 8000738:	2c20      	cmp	r4, #32
 800073a:	d127      	bne.n	800078c <USBD_AUDIO_Setup+0x68>
    if((req->bmRequest & USB_REQ_RECIPIENT_MASK) == USB_REQ_RECIPIENT_INTERFACE)
 800073c:	f003 0303 	and.w	r3, r3, #3
 8000740:	2b01      	cmp	r3, #1
 8000742:	f040 80a0 	bne.w	8000886 <USBD_AUDIO_Setup+0x162>
      switch (req->bRequest)
 8000746:	784b      	ldrb	r3, [r1, #1]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d006      	beq.n	800075a <USBD_AUDIO_Setup+0x36>
 800074c:	f0c0 809b 	bcc.w	8000886 <USBD_AUDIO_Setup+0x162>
 8000750:	f1a3 0281 	sub.w	r2, r3, #129	; 0x81
 8000754:	2a03      	cmp	r2, #3
 8000756:	f200 8096 	bhi.w	8000886 <USBD_AUDIO_Setup+0x162>
  haudio->last_control.req = 0x00;
 800075a:	2200      	movs	r2, #0
  for (int i = 0;i < haudio->aud_function.control_count; i++)
 800075c:	f896 c000 	ldrb.w	ip, [r6]
  haudio->last_control.req = 0x00;
 8000760:	f886 215a 	strb.w	r2, [r6, #346]	; 0x15a
  unit_id = HIBYTE(req->wIndex);
 8000764:	8888      	ldrh	r0, [r1, #4]
 8000766:	0a00      	lsrs	r0, r0, #8
  for (int i = 0;i < haudio->aud_function.control_count; i++)
 8000768:	4562      	cmp	r2, ip
 800076a:	da0c      	bge.n	8000786 <USBD_AUDIO_Setup+0x62>
 800076c:	0114      	lsls	r4, r2, #4
 800076e:	1935      	adds	r5, r6, r4
    if(unit_id == haudio->aud_function.controls[i].id)
 8000770:	f895 e004 	ldrb.w	lr, [r5, #4]
 8000774:	4586      	cmp	lr, r0
 8000776:	d10b      	bne.n	8000790 <USBD_AUDIO_Setup+0x6c>
  control_selector = HIBYTE(req->wValue);
 8000778:	8848      	ldrh	r0, [r1, #2]
  if((ctl->control_selector_map & control_selector) == 0)
 800077a:	892a      	ldrh	r2, [r5, #8]
  control_selector = HIBYTE(req->wValue);
 800077c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
  if((ctl->control_selector_map & control_selector) == 0)
 8000780:	ea1c 0f02 	tst.w	ip, r2
 8000784:	d106      	bne.n	8000794 <USBD_AUDIO_Setup+0x70>
    USBD_CtlError (pdev, req);
 8000786:	4638      	mov	r0, r7
 8000788:	f006 fd66 	bl	8007258 <USBD_CtlError>
  uint8_t ret = USBD_OK;
 800078c:	2400      	movs	r4, #0
 800078e:	e07e      	b.n	800088e <USBD_AUDIO_Setup+0x16a>
  for (int i = 0;i < haudio->aud_function.control_count; i++)
 8000790:	3201      	adds	r2, #1
 8000792:	e7e9      	b.n	8000768 <USBD_AUDIO_Setup+0x44>
  if(!(req->bRequest&0x80))
 8000794:	061a      	lsls	r2, r3, #24
 8000796:	d413      	bmi.n	80007c0 <USBD_AUDIO_Setup+0x9c>
     haudio->last_control.request_target = AUDIO_UNIT_CONTROL_REQUEST;
 8000798:	2201      	movs	r2, #1
      ctl = &haudio->aud_function.controls[i];
 800079a:	3404      	adds	r4, #4
     haudio->last_control.wValue  = req->wValue;
 800079c:	f8a6 0158 	strh.w	r0, [r6, #344]	; 0x158
     USBD_CtlPrepareRx (pdev,
 80007a0:	4638      	mov	r0, r7
      ctl = &haudio->aud_function.controls[i];
 80007a2:	4434      	add	r4, r6
     haudio->last_control.request_target = AUDIO_UNIT_CONTROL_REQUEST;
 80007a4:	f886 2110 	strb.w	r2, [r6, #272]	; 0x110
     haudio->last_control.len = req->wLength;
 80007a8:	88ca      	ldrh	r2, [r1, #6]
     USBD_CtlPrepareRx (pdev,
 80007aa:	f206 1111 	addw	r1, r6, #273	; 0x111
     haudio->last_control.entity.controller= ctl;
 80007ae:	f8c6 410c 	str.w	r4, [r6, #268]	; 0x10c
     haudio->last_control.len = req->wLength;
 80007b2:	f8c6 2154 	str.w	r2, [r6, #340]	; 0x154
     haudio->last_control.req = req->bRequest;
 80007b6:	f886 315a 	strb.w	r3, [r6, #346]	; 0x15a
     USBD_CtlPrepareRx (pdev,
 80007ba:	f006 fd89 	bl	80072d0 <USBD_CtlPrepareRx>
 80007be:	e7e5      	b.n	800078c <USBD_AUDIO_Setup+0x68>
  switch(ctl->type)
 80007c0:	796a      	ldrb	r2, [r5, #5]
 80007c2:	2a06      	cmp	r2, #6
 80007c4:	d106      	bne.n	80007d4 <USBD_AUDIO_Setup+0xb0>
          switch(control_selector)
 80007c6:	fa5f f18c 	uxtb.w	r1, ip
           USBD_AUDIO_FeatureControlCallbacksTypeDef* feature_control = ctl->Callbacks.feature_control;
 80007ca:	68ea      	ldr	r2, [r5, #12]
          switch(control_selector)
 80007cc:	2901      	cmp	r1, #1
 80007ce:	d004      	beq.n	80007da <USBD_AUDIO_Setup+0xb6>
 80007d0:	2902      	cmp	r1, #2
 80007d2:	d012      	beq.n	80007fa <USBD_AUDIO_Setup+0xd6>
                          USBD_error_handler();
 80007d4:	f002 fc31 	bl	800303a <USBD_error_handler>
 80007d8:	e7d8      	b.n	800078c <USBD_AUDIO_Setup+0x68>
                      haudio->last_control.data[0] = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	f206 1611 	addw	r6, r6, #273	; 0x111
 80007e0:	7033      	strb	r3, [r6, #0]
                      if(feature_control->GetMute)
 80007e2:	6813      	ldr	r3, [r2, #0]
 80007e4:	b11b      	cbz	r3, 80007ee <USBD_AUDIO_Setup+0xca>
                        feature_control->GetMute(LOBYTE(req->wValue),
 80007e6:	692a      	ldr	r2, [r5, #16]
 80007e8:	4631      	mov	r1, r6
 80007ea:	b2c0      	uxtb	r0, r0
 80007ec:	4798      	blx	r3
                      USBD_CtlSendData (pdev, haudio->last_control.data,1);
 80007ee:	2201      	movs	r2, #1
 80007f0:	4631      	mov	r1, r6
              USBD_CtlSendData (pdev,
 80007f2:	4638      	mov	r0, r7
 80007f4:	f006 fd57 	bl	80072a6 <USBD_CtlSendData>
 80007f8:	e7c8      	b.n	800078c <USBD_AUDIO_Setup+0x68>
                        switch(req->bRequest)
 80007fa:	3b81      	subs	r3, #129	; 0x81
                       tmpdata =  (uint16_t*) &(haudio->last_control.data);
 80007fc:	f206 1511 	addw	r5, r6, #273	; 0x111
                        switch(req->bRequest)
 8000800:	2b03      	cmp	r3, #3
 8000802:	d817      	bhi.n	8000834 <USBD_AUDIO_Setup+0x110>
 8000804:	e8df f003 	tbb	[pc, r3]
 8000808:	13100d02 	.word	0x13100d02
                              if(feature_control->GetCurVolume)
 800080c:	68d3      	ldr	r3, [r2, #12]
 800080e:	b1a3      	cbz	r3, 800083a <USBD_AUDIO_Setup+0x116>
                                  feature_control->GetCurVolume(LOBYTE(req->wValue),
 8000810:	4426      	add	r6, r4
 8000812:	4629      	mov	r1, r5
                              tmpdata = 0;
 8000814:	2500      	movs	r5, #0
                                  feature_control->GetCurVolume(LOBYTE(req->wValue),
 8000816:	b2c0      	uxtb	r0, r0
 8000818:	6932      	ldr	r2, [r6, #16]
 800081a:	4798      	blx	r3
                                USBD_CtlSendData (pdev, (uint8_t*) tmpdata,2);
 800081c:	2202      	movs	r2, #2
 800081e:	4629      	mov	r1, r5
 8000820:	e7e7      	b.n	80007f2 <USBD_AUDIO_Setup+0xce>
                              tmpdata = (uint16_t*) &(feature_control->MinVolume);
 8000822:	f102 0512 	add.w	r5, r2, #18
 8000826:	e7f9      	b.n	800081c <USBD_AUDIO_Setup+0xf8>
                             tmpdata = (uint16_t*) &(feature_control->MaxVolume);
 8000828:	f102 0510 	add.w	r5, r2, #16
 800082c:	e7f6      	b.n	800081c <USBD_AUDIO_Setup+0xf8>
                              tmpdata = (uint16_t*) &(feature_control->ResVolume);
 800082e:	f102 0514 	add.w	r5, r2, #20
 8000832:	e7f3      	b.n	800081c <USBD_AUDIO_Setup+0xf8>
                                USBD_error_handler();
 8000834:	f002 fc01 	bl	800303a <USBD_error_handler>
 8000838:	e7f0      	b.n	800081c <USBD_AUDIO_Setup+0xf8>
                              tmpdata = 0;
 800083a:	461d      	mov	r5, r3
 800083c:	e7ee      	b.n	800081c <USBD_AUDIO_Setup+0xf8>
    switch (req->bRequest)
 800083e:	784b      	ldrb	r3, [r1, #1]
 8000840:	2b0a      	cmp	r3, #10
 8000842:	d01c      	beq.n	800087e <USBD_AUDIO_Setup+0x15a>
 8000844:	2b0b      	cmp	r3, #11
 8000846:	d00f      	beq.n	8000868 <USBD_AUDIO_Setup+0x144>
 8000848:	2b06      	cmp	r3, #6
 800084a:	d11c      	bne.n	8000886 <USBD_AUDIO_Setup+0x162>
      if( (req->wValue >> 8) == USBD_AUDIO_DESC_TYPE_CS_DEVICE)
 800084c:	884b      	ldrh	r3, [r1, #2]
 800084e:	0a1b      	lsrs	r3, r3, #8
 8000850:	2b21      	cmp	r3, #33	; 0x21
 8000852:	d11c      	bne.n	800088e <USBD_AUDIO_Setup+0x16a>
        len = MIN(USBD_AUDIO_DESC_SIZ , req->wLength);
 8000854:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_AUDIO_CfgDesc + 18;
 8000856:	4b4e      	ldr	r3, [pc, #312]	; (8000990 <USBD_AUDIO_Setup+0x26c>)
        USBD_CtlSendData (pdev, 
 8000858:	2a09      	cmp	r2, #9
        pbuf = USBD_AUDIO_CfgDesc + 18;
 800085a:	6859      	ldr	r1, [r3, #4]
        USBD_CtlSendData (pdev, 
 800085c:	bf28      	it	cs
 800085e:	2209      	movcs	r2, #9
 8000860:	3112      	adds	r1, #18
 8000862:	f006 fd20 	bl	80072a6 <USBD_CtlSendData>
 8000866:	e012      	b.n	800088e <USBD_AUDIO_Setup+0x16a>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 8000868:	46a0      	mov	r8, r4
 800086a:	7875      	ldrb	r5, [r6, #1]
 800086c:	790a      	ldrb	r2, [r1, #4]
 800086e:	2438      	movs	r4, #56	; 0x38
 8000870:	4545      	cmp	r5, r8
 8000872:	dc1e      	bgt.n	80008b2 <USBD_AUDIO_Setup+0x18e>
        if(((uint8_t)(req->wIndex) ==0)&&((uint8_t)(req->wValue))==0)
 8000874:	b93a      	cbnz	r2, 8000886 <USBD_AUDIO_Setup+0x162>
 8000876:	788b      	ldrb	r3, [r1, #2]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d087      	beq.n	800078c <USBD_AUDIO_Setup+0x68>
 800087c:	e003      	b.n	8000886 <USBD_AUDIO_Setup+0x162>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800087e:	7872      	ldrb	r2, [r6, #1]
 8000880:	2038      	movs	r0, #56	; 0x38
 8000882:	42a2      	cmp	r2, r4
 8000884:	dc06      	bgt.n	8000894 <USBD_AUDIO_Setup+0x170>
        ret = USBD_FAIL;
 8000886:	2402      	movs	r4, #2
     USBD_CtlError (pdev, req);
 8000888:	4638      	mov	r0, r7
 800088a:	f006 fce5 	bl	8007258 <USBD_CtlError>
}
 800088e:	4620      	mov	r0, r4
 8000890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000894:	fb00 f304 	mul.w	r3, r0, r4
            if((uint8_t)(req->wIndex)==haudio->aud_function.as_interfaces[i].interface_num)
 8000898:	18f5      	adds	r5, r6, r3
 800089a:	f895 c024 	ldrb.w	ip, [r5, #36]	; 0x24
 800089e:	790d      	ldrb	r5, [r1, #4]
 80008a0:	45ac      	cmp	ip, r5
 80008a2:	d104      	bne.n	80008ae <USBD_AUDIO_Setup+0x18a>
              USBD_CtlSendData (pdev,
 80008a4:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80008a8:	2201      	movs	r2, #1
 80008aa:	4431      	add	r1, r6
 80008ac:	e7a1      	b.n	80007f2 <USBD_AUDIO_Setup+0xce>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 80008ae:	3401      	adds	r4, #1
 80008b0:	e7e7      	b.n	8000882 <USBD_AUDIO_Setup+0x15e>
 80008b2:	fb04 f308 	mul.w	r3, r4, r8
            if((uint8_t)(req->wIndex)==haudio->aud_function.as_interfaces[i].interface_num)
 80008b6:	18f0      	adds	r0, r6, r3
 80008b8:	f890 c024 	ldrb.w	ip, [r0, #36]	; 0x24
 80008bc:	4594      	cmp	ip, r2
 80008be:	d164      	bne.n	800098a <USBD_AUDIO_Setup+0x266>
              if((uint8_t)(req->wValue)==haudio->aud_function.as_interfaces[i].alternate)
 80008c0:	788c      	ldrb	r4, [r1, #2]
 80008c2:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80008c6:	4294      	cmp	r4, r2
 80008c8:	f43f af60 	beq.w	800078c <USBD_AUDIO_Setup+0x68>
  ep = (pas_interface->data_ep.ep_num&0x80)?&haudio->ep_in[pas_interface->data_ep.ep_num&0x0F]:
 80008cc:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
 80008d0:	210c      	movs	r1, #12
 80008d2:	f015 0f80 	tst.w	r5, #128	; 0x80
 80008d6:	bf15      	itete	ne
 80008d8:	f005 050f 	andne.w	r5, r5, #15
 80008dc:	fb01 6505 	mlaeq	r5, r1, r5, r6
 80008e0:	fb01 6505 	mlane	r5, r1, r5, r6
 80008e4:	35d0      	addeq	r5, #208	; 0xd0
 80008e6:	bf18      	it	ne
 80008e8:	3594      	addne	r5, #148	; 0x94
  if(new_alt==0)
 80008ea:	b99c      	cbnz	r4, 8000914 <USBD_AUDIO_Setup+0x1f0>
    if (pas_interface->alternate!=0)
 80008ec:	b13a      	cbz	r2, 80008fe <USBD_AUDIO_Setup+0x1da>
      if(ep->open)
 80008ee:	796b      	ldrb	r3, [r5, #5]
 80008f0:	b12b      	cbz	r3, 80008fe <USBD_AUDIO_Setup+0x1da>
        USBD_LL_CloseEP(pdev, ep->ep_description.data_ep->ep_num);
 80008f2:	682b      	ldr	r3, [r5, #0]
 80008f4:	4638      	mov	r0, r7
 80008f6:	7819      	ldrb	r1, [r3, #0]
 80008f8:	f002 fd44 	bl	8003384 <USBD_LL_CloseEP>
        ep->open=0;
 80008fc:	716c      	strb	r4, [r5, #5]
    pas_interface->SetAS_Alternate(new_alt,pas_interface->private_data);
 80008fe:	2338      	movs	r3, #56	; 0x38
 8000900:	2000      	movs	r0, #0
 8000902:	fb03 6608 	mla	r6, r3, r8, r6
 8000906:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000908:	6db1      	ldr	r1, [r6, #88]	; 0x58
 800090a:	4798      	blx	r3
    pas_interface->alternate=0;
 800090c:	2300      	movs	r3, #0
 800090e:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
 8000912:	e7bc      	b.n	800088e <USBD_AUDIO_Setup+0x16a>
    ep->ep_description.data_ep=&pas_interface->data_ep;
 8000914:	3328      	adds	r3, #40	; 0x28
    pas_interface->SetAS_Alternate(new_alt,pas_interface->private_data);
 8000916:	4620      	mov	r0, r4
    ep->ep_description.data_ep=&pas_interface->data_ep;
 8000918:	4433      	add	r3, r6
 800091a:	602b      	str	r3, [r5, #0]
    pas_interface->SetAS_Alternate(new_alt,pas_interface->private_data);
 800091c:	2338      	movs	r3, #56	; 0x38
 800091e:	fb03 6608 	mla	r6, r3, r8, r6
 8000922:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8000924:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8000926:	4798      	blx	r3
    ep->max_packet_length=ep->ep_description.data_ep->GetMaxPacketLength(ep->ep_description.data_ep->private_data);
 8000928:	682b      	ldr	r3, [r5, #0]
    pas_interface->alternate=new_alt;
 800092a:	f886 4026 	strb.w	r4, [r6, #38]	; 0x26
    ep->max_packet_length=ep->ep_description.data_ep->GetMaxPacketLength(ep->ep_description.data_ep->private_data);
 800092e:	699a      	ldr	r2, [r3, #24]
 8000930:	6a18      	ldr	r0, [r3, #32]
 8000932:	4790      	blx	r2
    USBD_LL_OpenEP(pdev,
 8000934:	6829      	ldr	r1, [r5, #0]
    ep->max_packet_length=ep->ep_description.data_ep->GetMaxPacketLength(ep->ep_description.data_ep->private_data);
 8000936:	4603      	mov	r3, r0
 8000938:	80e8      	strh	r0, [r5, #6]
    USBD_LL_OpenEP(pdev,
 800093a:	2201      	movs	r2, #1
 800093c:	7809      	ldrb	r1, [r1, #0]
 800093e:	4638      	mov	r0, r7
 8000940:	f002 fd15 	bl	800336e <USBD_LL_OpenEP>
    ep->ep_description.data_ep->buf= ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 8000944:	682c      	ldr	r4, [r5, #0]
     ep->open = 1;
 8000946:	2301      	movs	r3, #1
    ep->ep_description.data_ep->buf= ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 8000948:	f104 010c 	add.w	r1, r4, #12
     ep->open = 1;
 800094c:	716b      	strb	r3, [r5, #5]
    ep->ep_description.data_ep->buf= ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 800094e:	6963      	ldr	r3, [r4, #20]
 8000950:	6a20      	ldr	r0, [r4, #32]
 8000952:	4798      	blx	r3
    if(ep->ep_description.data_ep->ep_num&0x80)  /* IN EP */
 8000954:	682a      	ldr	r2, [r5, #0]
    ep->ep_description.data_ep->buf= ep->ep_description.data_ep->GetBuffer(ep->ep_description.data_ep->private_data,
 8000956:	60a0      	str	r0, [r4, #8]
    if(ep->ep_description.data_ep->ep_num&0x80)  /* IN EP */
 8000958:	7811      	ldrb	r1, [r2, #0]
 800095a:	060b      	lsls	r3, r1, #24
 800095c:	d50f      	bpl.n	800097e <USBD_AUDIO_Setup+0x25a>
      USBD_LL_FlushEP(pdev, ep->ep_description.data_ep->ep_num);
 800095e:	4638      	mov	r0, r7
 8000960:	f002 fd28 	bl	80033b4 <USBD_LL_FlushEP>
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <USBD_AUDIO_Setup+0x270>)
                        ep->ep_description.data_ep->ep_num,
 8000966:	6829      	ldr	r1, [r5, #0]
      USBD_LL_Transmit(pdev, 
 8000968:	4638      	mov	r0, r7
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 800096a:	689b      	ldr	r3, [r3, #8]
      USBD_LL_Transmit(pdev, 
 800096c:	688a      	ldr	r2, [r1, #8]
      ep->tx_rx_soffn = USB_SOF_NUMBER();
 800096e:	f3c3 230d 	ubfx	r3, r3, #8, #14
 8000972:	812b      	strh	r3, [r5, #8]
      USBD_LL_Transmit(pdev, 
 8000974:	898b      	ldrh	r3, [r1, #12]
 8000976:	7809      	ldrb	r1, [r1, #0]
 8000978:	f002 fd4b 	bl	8003412 <USBD_LL_Transmit>
 800097c:	e706      	b.n	800078c <USBD_AUDIO_Setup+0x68>
    USBD_LL_PrepareReceive(pdev,
 800097e:	88eb      	ldrh	r3, [r5, #6]
 8000980:	4638      	mov	r0, r7
 8000982:	6892      	ldr	r2, [r2, #8]
 8000984:	f002 fd4c 	bl	8003420 <USBD_LL_PrepareReceive>
 8000988:	e700      	b.n	800078c <USBD_AUDIO_Setup+0x68>
        for(int i=0;i<haudio->aud_function.as_interfaces_count;i++)
 800098a:	f108 0801 	add.w	r8, r8, #1
 800098e:	e76f      	b.n	8000870 <USBD_AUDIO_Setup+0x14c>
 8000990:	200001d8 	.word	0x200001d8
 8000994:	40040800 	.word	0x40040800

08000998 <USBD_AUDIO_DeInit>:
{
 8000998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800099c:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
{
 80009a0:	4604      	mov	r4, r0
    aud_if_cbks =  (USBD_AUDIO_InterfaceCallbacksfTypeDef *)pdev->pUserData;
 80009a2:	f8d0 9294 	ldr.w	r9, [r0, #660]	; 0x294
    for(int i=1;i < USBD_AUDIO_MAX_IN_EP; i++)
 80009a6:	2601      	movs	r6, #1
 80009a8:	462f      	mov	r7, r5
    aud_if_cbks =  (USBD_AUDIO_InterfaceCallbacksfTypeDef *)pdev->pUserData;
 80009aa:	46a8      	mov	r8, r5
        haudio->ep_in[i].open = 0;
 80009ac:	f04f 0a00 	mov.w	sl, #0
      if(haudio->ep_in[i].open)
 80009b0:	f898 30a5 	ldrb.w	r3, [r8, #165]	; 0xa5
 80009b4:	b13b      	cbz	r3, 80009c6 <USBD_AUDIO_DeInit+0x2e>
        USBD_LL_CloseEP(pdev, i|0x80);
 80009b6:	f066 017f 	orn	r1, r6, #127	; 0x7f
 80009ba:	4620      	mov	r0, r4
 80009bc:	b2c9      	uxtb	r1, r1
 80009be:	f002 fce1 	bl	8003384 <USBD_LL_CloseEP>
        haudio->ep_in[i].open = 0;
 80009c2:	f888 a0a5 	strb.w	sl, [r8, #165]	; 0xa5
    for(int i=1;i < USBD_AUDIO_MAX_IN_EP; i++)
 80009c6:	3601      	adds	r6, #1
 80009c8:	f108 080c 	add.w	r8, r8, #12
 80009cc:	2e05      	cmp	r6, #5
 80009ce:	d1ef      	bne.n	80009b0 <USBD_AUDIO_DeInit+0x18>
    for(int i=1;i < USBD_AUDIO_MAX_OUT_EP; i++)
 80009d0:	2601      	movs	r6, #1
        haudio->ep_out[i].open = 0;
 80009d2:	f04f 0800 	mov.w	r8, #0
      if(haudio->ep_out[i].open)
 80009d6:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80009da:	b12b      	cbz	r3, 80009e8 <USBD_AUDIO_DeInit+0x50>
        USBD_LL_CloseEP(pdev, i);
 80009dc:	b2f1      	uxtb	r1, r6
 80009de:	4620      	mov	r0, r4
 80009e0:	f002 fcd0 	bl	8003384 <USBD_LL_CloseEP>
        haudio->ep_out[i].open = 0;
 80009e4:	f887 80e1 	strb.w	r8, [r7, #225]	; 0xe1
    for(int i=1;i < USBD_AUDIO_MAX_OUT_EP; i++)
 80009e8:	3601      	adds	r6, #1
 80009ea:	370c      	adds	r7, #12
 80009ec:	2e05      	cmp	r6, #5
 80009ee:	d1f2      	bne.n	80009d6 <USBD_AUDIO_DeInit+0x3e>
  if(haudio != NULL)
 80009f0:	b15d      	cbz	r5, 8000a0a <USBD_AUDIO_DeInit+0x72>
   aud_if_cbks->DeInit(&haudio->aud_function,aud_if_cbks->private_data);
 80009f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80009f6:	4628      	mov	r0, r5
 80009f8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80009fc:	4798      	blx	r3
    USBD_free(haudio);
 80009fe:	4628      	mov	r0, r5
 8000a00:	f006 fcc0 	bl	8007384 <free>
    pdev->pClassData = NULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
}
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000a10 <USBD_AUDIO_Init>:
{
 8000a10:	b538      	push	{r3, r4, r5, lr}
 8000a12:	4604      	mov	r4, r0
  haudio = USBD_malloc(sizeof (USBD_AUDIO_HandleTypeDef));
 8000a14:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8000a18:	f006 fcac 	bl	8007374 <malloc>
  if(haudio == NULL)
 8000a1c:	4605      	mov	r5, r0
 8000a1e:	b190      	cbz	r0, 8000a46 <USBD_AUDIO_Init+0x36>
    memset(haudio, 0, sizeof(USBD_AUDIO_HandleTypeDef));
 8000a20:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8000a24:	2100      	movs	r1, #0
 8000a26:	f006 fcc0 	bl	80073aa <memset>
    aud_if_cbks = (USBD_AUDIO_InterfaceCallbacksfTypeDef *)pdev->pUserData;
 8000a2a:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
    if (aud_if_cbks->Init(&haudio->aud_function,aud_if_cbks->private_data)!= USBD_OK)
 8000a2e:	4628      	mov	r0, r5
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	6919      	ldr	r1, [r3, #16]
 8000a34:	4790      	blx	r2
 8000a36:	b140      	cbz	r0, 8000a4a <USBD_AUDIO_Init+0x3a>
      USBD_free(pdev->pClassData);
 8000a38:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8000a3c:	f006 fca2 	bl	8007384 <free>
      pdev->pClassData = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
    return USBD_FAIL; 
 8000a46:	2002      	movs	r0, #2
 8000a48:	e001      	b.n	8000a4e <USBD_AUDIO_Init+0x3e>
  pdev->pClassData = haudio;
 8000a4a:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}

08000a50 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                        USBD_AUDIO_InterfaceCallbacksfTypeDef *aifc)
{
 8000a50:	b508      	push	{r3, lr}
  if(aifc != NULL)
 8000a52:	b131      	cbz	r1, 8000a62 <USBD_AUDIO_RegisterInterface+0x12>
  {
    pdev->pUserData= aifc;
 8000a54:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    aifc->GetConfigDesc(&USBD_AUDIO_CfgDesc, &USBD_AUDIO_CfgDescSize, aifc->private_data);
 8000a58:	688b      	ldr	r3, [r1, #8]
 8000a5a:	690a      	ldr	r2, [r1, #16]
 8000a5c:	4902      	ldr	r1, [pc, #8]	; (8000a68 <USBD_AUDIO_RegisterInterface+0x18>)
 8000a5e:	1d08      	adds	r0, r1, #4
 8000a60:	4798      	blx	r3
    
  }
  return 0;
}
 8000a62:	2000      	movs	r0, #0
 8000a64:	bd08      	pop	{r3, pc}
 8000a66:	bf00      	nop
 8000a68:	200001d8 	.word	0x200001d8

08000a6c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8000a6c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8000a6e:	b180      	cbz	r0, 8000a92 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8000a70:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000a74:	b113      	cbz	r3, 8000a7c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8000a7c:	b109      	cbz	r1, 8000a82 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8000a7e:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8000a82:	2301      	movs	r3, #1
  pdev->id = id;
 8000a84:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8000a86:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8000a8a:	f002 fc27 	bl	80032dc <USBD_LL_Init>
  
  return USBD_OK; 
 8000a8e:	2000      	movs	r0, #0
}
 8000a90:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8000a92:	2002      	movs	r0, #2
 8000a94:	e7fc      	b.n	8000a90 <USBD_Init+0x24>

08000a96 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8000a96:	b119      	cbz	r1, 8000aa0 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8000a98:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8000aa0:	2002      	movs	r0, #2
  }
  
  return status;
}
 8000aa2:	4770      	bx	lr

08000aa4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8000aa4:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8000aa6:	f002 fc5b 	bl	8003360 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8000aaa:	2000      	movs	r0, #0
 8000aac:	bd08      	pop	{r3, pc}

08000aae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000aae:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8000ab0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000ab4:	b90b      	cbnz	r3, 8000aba <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8000ab6:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8000ab8:	bd08      	pop	{r3, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4798      	blx	r3
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	d0fa      	beq.n	8000ab8 <USBD_SetClassConfig+0xa>
 8000ac2:	e7f8      	b.n	8000ab6 <USBD_SetClassConfig+0x8>

08000ac4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000ac4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8000ac6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	4798      	blx	r3
  return USBD_OK;
}
 8000ace:	2000      	movs	r0, #0
 8000ad0:	bd08      	pop	{r3, pc}

08000ad2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8000ad2:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8000ad4:	f500 7520 	add.w	r5, r0, #640	; 0x280
{
 8000ad8:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8000ada:	4628      	mov	r0, r5
 8000adc:	f006 fba8 	bl	8007230 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8000ae0:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8000ae2:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8000ae6:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8000aea:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8000aee:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1F) 
 8000af2:	f001 031f 	and.w	r3, r1, #31
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d00e      	beq.n	8000b18 <USBD_LL_SetupStage+0x46>
 8000afa:	d307      	bcc.n	8000b0c <USBD_LL_SetupStage+0x3a>
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d010      	beq.n	8000b22 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8000b00:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000b04:	4620      	mov	r0, r4
 8000b06:	f002 fc5c 	bl	80033c2 <USBD_LL_StallEP>
    break;
 8000b0a:	e003      	b.n	8000b14 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8000b0c:	4629      	mov	r1, r5
 8000b0e:	4620      	mov	r0, r4
 8000b10:	f006 f9c6 	bl	8006ea0 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8000b14:	2000      	movs	r0, #0
 8000b16:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8000b18:	4629      	mov	r1, r5
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	f006 fada 	bl	80070d4 <USBD_StdItfReq>
    break;
 8000b20:	e7f8      	b.n	8000b14 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8000b22:	4629      	mov	r1, r5
 8000b24:	4620      	mov	r0, r4
 8000b26:	f006 fafa 	bl	800711e <USBD_StdEPReq>
    break;
 8000b2a:	e7f3      	b.n	8000b14 <USBD_LL_SetupStage+0x42>

08000b2c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8000b2c:	b538      	push	{r3, r4, r5, lr}
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8000b32:	bb11      	cbnz	r1, 8000b7a <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8000b34:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d10f      	bne.n	8000b5c <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8000b3c:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8000b40:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d90b      	bls.n	8000b60 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8000b48:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
 8000b4a:	4629      	mov	r1, r5
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8000b4c:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8000b4e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
                            MIN(pep->rem_length ,pep->maxpacket));
 8000b52:	bf28      	it	cs
 8000b54:	461a      	movcs	r2, r3
        USBD_CtlContinueRx (pdev, 
 8000b56:	b292      	uxth	r2, r2
 8000b58:	f006 fbc9 	bl	80072ee <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8000b60:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000b64:	691b      	ldr	r3, [r3, #16]
 8000b66:	b123      	cbz	r3, 8000b72 <USBD_LL_DataOutStage+0x46>
 8000b68:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000b6c:	2a03      	cmp	r2, #3
 8000b6e:	d100      	bne.n	8000b72 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8000b70:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8000b72:	4620      	mov	r0, r4
 8000b74:	f006 fbc3 	bl	80072fe <USBD_CtlSendStatus>
 8000b78:	e7f0      	b.n	8000b5c <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8000b7a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0eb      	beq.n	8000b5c <USBD_LL_DataOutStage+0x30>
 8000b84:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000b88:	2a03      	cmp	r2, #3
 8000b8a:	d1e7      	bne.n	8000b5c <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8000b8c:	4798      	blx	r3
 8000b8e:	e7e5      	b.n	8000b5c <USBD_LL_DataOutStage+0x30>

08000b90 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	4613      	mov	r3, r2
 8000b94:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8000b96:	460e      	mov	r6, r1
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	d13d      	bne.n	8000c18 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8000b9c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8000ba0:	2a02      	cmp	r2, #2
 8000ba2:	d10f      	bne.n	8000bc4 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8000ba4:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8000ba8:	4295      	cmp	r5, r2
 8000baa:	d914      	bls.n	8000bd6 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8000bac:	1aaa      	subs	r2, r5, r2
        
        USBD_CtlContinueSendData (pdev, 
 8000bae:	4619      	mov	r1, r3
        pep->rem_length -=  pep->maxpacket;
 8000bb0:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData (pdev, 
 8000bb2:	b292      	uxth	r2, r2
 8000bb4:	f006 fb84 	bl	80072c0 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000bb8:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f002 fc2e 	bl	8003420 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8000bc4:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d102      	bne.n	8000bd2 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f884 3278 	strb.w	r3, [r4, #632]	; 0x278
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8000bd6:	69c3      	ldr	r3, [r0, #28]
 8000bd8:	fbb3 f5f2 	udiv	r5, r3, r2
 8000bdc:	fb02 3515 	mls	r5, r2, r5, r3
 8000be0:	b965      	cbnz	r5, 8000bfc <USBD_LL_DataInStage+0x6c>
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d80a      	bhi.n	8000bfc <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8000be6:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d206      	bcs.n	8000bfc <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8000bee:	462a      	mov	r2, r5
 8000bf0:	f006 fb66 	bl	80072c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8000bf4:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
        USBD_LL_PrepareReceive (pdev,
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e7de      	b.n	8000bba <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8000bfc:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8000c00:	68db      	ldr	r3, [r3, #12]
 8000c02:	b12b      	cbz	r3, 8000c10 <USBD_LL_DataInStage+0x80>
 8000c04:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8000c08:	2a03      	cmp	r2, #3
 8000c0a:	d101      	bne.n	8000c10 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8000c10:	4620      	mov	r0, r4
 8000c12:	f006 fb7f 	bl	8007314 <USBD_CtlReceiveStatus>
 8000c16:	e7d5      	b.n	8000bc4 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8000c18:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0d7      	beq.n	8000bd2 <USBD_LL_DataInStage+0x42>
 8000c22:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000c26:	2a03      	cmp	r2, #3
 8000c28:	d1d3      	bne.n	8000bd2 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8000c2a:	4798      	blx	r3
 8000c2c:	e7d1      	b.n	8000bd2 <USBD_LL_DataInStage+0x42>

08000c2e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8000c2e:	2200      	movs	r2, #0
{
 8000c30:	b538      	push	{r3, r4, r5, lr}
 8000c32:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8000c34:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8000c36:	4611      	mov	r1, r2
 8000c38:	2340      	movs	r3, #64	; 0x40
 8000c3a:	f002 fb98 	bl	800336e <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8000c3e:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8000c40:	f8c4 5150 	str.w	r5, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev,
 8000c44:	2200      	movs	r2, #0
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f002 fb90 	bl	800336e <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000c4e:	2301      	movs	r3, #1
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8000c50:	6265      	str	r5, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000c52:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
  
  if (pdev->pClassData) 
 8000c56:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
 8000c5a:	b12b      	cbz	r3, 8000c68 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8000c5c:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8000c60:	4620      	mov	r0, r4
 8000c62:	7921      	ldrb	r1, [r4, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8000c68:	2000      	movs	r0, #0
 8000c6a:	bd38      	pop	{r3, r4, r5, pc}

08000c6c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8000c6c:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8000c6e:	2000      	movs	r0, #0
 8000c70:	4770      	bx	lr

08000c72 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8000c72:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8000c76:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8000c80:	2000      	movs	r0, #0
 8000c82:	4770      	bx	lr

08000c84 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8000c84:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8000c88:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	4770      	bx	lr

08000c90 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8000c90:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8000c92:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000c96:	2a03      	cmp	r2, #3
 8000c98:	d104      	bne.n	8000ca4 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8000c9a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	b103      	cbz	r3, 8000ca4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8000ca2:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	bd08      	pop	{r3, pc}

08000ca8 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8000ca8:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8000caa:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000cae:	2a03      	cmp	r2, #3
 8000cb0:	d104      	bne.n	8000cbc <USBD_LL_IsoINIncomplete+0x14>
  {
    if(pdev->pClass->IsoINIncomplete != NULL)
 8000cb2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000cb6:	6a1b      	ldr	r3, [r3, #32]
 8000cb8:	b103      	cbz	r3, 8000cbc <USBD_LL_IsoINIncomplete+0x14>
    {
      pdev->pClass->IsoINIncomplete(pdev,epnum);
 8000cba:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	bd08      	pop	{r3, pc}

08000cc0 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8000cc0:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8000cc2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8000cc6:	2a03      	cmp	r2, #3
 8000cc8:	d104      	bne.n	8000cd4 <USBD_LL_IsoOUTIncomplete+0x14>
  {
    if(pdev->pClass->IsoOUTIncomplete != NULL)
 8000cca:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8000cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd0:	b103      	cbz	r3, 8000cd4 <USBD_LL_IsoOUTIncomplete+0x14>
    {
      pdev->pClass->IsoOUTIncomplete(pdev,epnum);
 8000cd2:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	bd08      	pop	{r3, pc}

08000cd8 <USBD_LL_DevConnected>:
 8000cd8:	2000      	movs	r0, #0
 8000cda:	4770      	bx	lr

08000cdc <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000cdc:	2201      	movs	r2, #1
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8000cde:	7901      	ldrb	r1, [r0, #4]
{
 8000ce0:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8000ce2:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8000ce6:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8000cea:	6852      	ldr	r2, [r2, #4]
 8000cec:	4790      	blx	r2
   
  return USBD_OK;
}
 8000cee:	2000      	movs	r0, #0
 8000cf0:	bd08      	pop	{r3, pc}

08000cf2 <USB_AudioStreamingInputOutputDeInit>:
  * @param  node_handle(IN): the node handle, node must be allocated
  * @retval  0 for no error
  */
 static int8_t  USB_AudioStreamingInputOutputDeInit(uint32_t node_handle)
{
  ((AUDIO_USBInputOutputNode_t *)node_handle)->node.state = AUDIO_NODE_OFF;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	7003      	strb	r3, [r0, #0]
  return 0;
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	4770      	bx	lr

08000cfa <USB_AudioStreamingInputOutputStart>:
static int8_t  USB_AudioStreamingInputOutputStart( AUDIO_CircularBuffer_t* buffer, uint16_t threshold ,uint32_t node_handle)
{
  AUDIO_USBInputOutputNode_t * io_node;

  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
  if((io_node->node.state == AUDIO_NODE_INITIALIZED ) ||(io_node->node.state == AUDIO_NODE_STOPPED))
 8000cfa:	7813      	ldrb	r3, [r2, #0]
 8000cfc:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d108      	bne.n	8000d16 <USB_AudioStreamingInputOutputStart+0x1c>
  {
     io_node->node.state = AUDIO_NODE_STARTED;
 8000d04:	2302      	movs	r3, #2
     io_node->buf = buffer;
 8000d06:	6190      	str	r0, [r2, #24]
     io_node->node.state = AUDIO_NODE_STARTED;
 8000d08:	7013      	strb	r3, [r2, #0]
     io_node->buf->rd_ptr = io_node->buf->wr_ptr=0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	6043      	str	r3, [r0, #4]
     io_node->flags = 0;
 8000d0e:	7513      	strb	r3, [r2, #20]
     if(io_node->node.type == AUDIO_INPUT)
 8000d10:	7a13      	ldrb	r3, [r2, #8]
 8000d12:	b903      	cbnz	r3, 8000d16 <USB_AudioStreamingInputOutputStart+0x1c>
     {
       io_node->specific.input.threshold = threshold;
 8000d14:	8611      	strh	r1, [r2, #48]	; 0x30
       }
#endif /* USB_AUDIO_CONFIG_RECORD_USE_FREQ_44_1_K */
     }
  }
  return 0;
}
 8000d16:	2000      	movs	r0, #0
 8000d18:	4770      	bx	lr

08000d1a <USB_AudioStreamingInputOutputStop>:
  */
static int8_t  USB_AudioStreamingInputOutputStop( uint32_t node_handle)
{
  AUDIO_USBInputOutputNode_t * io_node;
  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
  io_node->node.state = AUDIO_NODE_STOPPED;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	7003      	strb	r3, [r0, #0]
  return 0;
}
 8000d1e:	2000      	movs	r0, #0
 8000d20:	4770      	bx	lr

08000d22 <USB_AudioStreamingInputOutputRestart>:
  */
static int8_t  USB_AudioStreamingInputOutputRestart( uint32_t node_handle)
{
  AUDIO_USBInputOutputNode_t * io_node;
  io_node = (AUDIO_USBInputOutputNode_t *)node_handle;
  if(io_node->node.state == AUDIO_NODE_STARTED)
 8000d22:	7803      	ldrb	r3, [r0, #0]
 8000d24:	2b02      	cmp	r3, #2
  {
    io_node->flags = AUDIO_IO_RESTART_REQUIRED;   /* this flag to stop node when next time USB Audio class calls the node via callback*/
 8000d26:	bf04      	itt	eq
 8000d28:	2340      	moveq	r3, #64	; 0x40
 8000d2a:	7503      	strbeq	r3, [r0, #20]
    return 0;
  }
  return 0;
}
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	4770      	bx	lr

08000d30 <USB_AudioStreamingInputOutputGetMaxPacketLength>:
*/
static uint16_t  USB_AudioStreamingInputOutputGetMaxPacketLength(uint32_t node_handle)
{
  
  return ((AUDIO_USBInputOutputNode_t *)node_handle)->max_packet_length;
}
 8000d30:	8b80      	ldrh	r0, [r0, #28]
 8000d32:	4770      	bx	lr

08000d34 <USB_AudioStreamingInputOutputGetState>:
  * @retval  0
*/
static int8_t  USB_AudioStreamingInputOutputGetState(uint32_t node_handle)
{
  return 0;
}
 8000d34:	2000      	movs	r0, #0
 8000d36:	4770      	bx	lr

08000d38 <USB_AudioStreamingFeatureUnitDInit>:
  * @param  node_handle: the node handle, node must be Initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitDInit(uint32_t node_handle)
{
  ((AUDIO_USB_CF_NodeTypeDef*)node_handle)->node.state = AUDIO_NODE_OFF;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	7003      	strb	r3, [r0, #0]
  return 0;
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	4770      	bx	lr

08000d40 <USB_AudioStreamingFeatureUnitStart>:
  * @param  commands(IN): list of callback to execute controls like setvolume and mute. this function depends on codec and microphone.
  * @param  node_handle(IN): the node handle, node must be allocated
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitStart(AUDIO_USBFeatureUnitCommands_t* commands, uint32_t node_handle)
{
 8000d40:	460b      	mov	r3, r1
 8000d42:	b510      	push	{r4, lr}
  AUDIO_USB_CF_NodeTypeDef *cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  cf->control_cbks = *commands;
 8000d44:	f101 0434 	add.w	r4, r1, #52	; 0x34
 8000d48:	c807      	ldmia	r0, {r0, r1, r2}
 8000d4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cf->node.state = AUDIO_NODE_STARTED;
 8000d4e:	2202      	movs	r2, #2
  
  if(cf->control_cbks.SetCurrentVolume)
 8000d50:	6b9c      	ldr	r4, [r3, #56]	; 0x38
  cf->node.state = AUDIO_NODE_STARTED;
 8000d52:	701a      	strb	r2, [r3, #0]
  if(cf->control_cbks.SetCurrentVolume)
 8000d54:	b124      	cbz	r4, 8000d60 <USB_AudioStreamingFeatureUnitStart+0x20>
  {
    cf->control_cbks.SetCurrentVolume(0, 
 8000d56:	6859      	ldr	r1, [r3, #4]
 8000d58:	2000      	movs	r0, #0
 8000d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d5c:	68c9      	ldr	r1, [r1, #12]
 8000d5e:	47a0      	blx	r4
                                      cf->node.audio_description->audio_volume_db_256,
                                      cf->control_cbks.private_data);
  }
  return 0;
}
 8000d60:	2000      	movs	r0, #0
 8000d62:	bd10      	pop	{r4, pc}

08000d64 <USB_AudioStreamingFeatureUnitStop>:
{
  /* @TODO develop feature */
  AUDIO_USB_CF_NodeTypeDef * cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  cf->node.state = AUDIO_NODE_STOPPED;
 8000d64:	2303      	movs	r3, #3
 8000d66:	7003      	strb	r3, [r0, #0]
  return 0;
}
 8000d68:	2000      	movs	r0, #0
 8000d6a:	4770      	bx	lr

08000d6c <USB_AudioStreamingFeatureUnitGetMute>:
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitGetMute(uint16_t channel, uint8_t* mute, uint32_t node_handle)
{
  /**@TODO add channel management  */
  *mute = ((AUDIO_USB_CF_NodeTypeDef*)node_handle)->node.audio_description->audio_mute; 
 8000d6c:	6853      	ldr	r3, [r2, #4]
  return 0; 
}
 8000d6e:	2000      	movs	r0, #0
  *mute = ((AUDIO_USB_CF_NodeTypeDef*)node_handle)->node.audio_description->audio_mute; 
 8000d70:	7c1b      	ldrb	r3, [r3, #16]
 8000d72:	700b      	strb	r3, [r1, #0]
}
 8000d74:	4770      	bx	lr

08000d76 <USB_AudioStreamingFeatureUnitSetMute>:
  * @param  mute:  mute value
  * @param  node_handle: the Feature node handle, node must be initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitSetMute(uint16_t channel, uint8_t mute, uint32_t node_handle)
{
 8000d76:	b508      	push	{r3, lr}
  AUDIO_USB_CF_NodeTypeDef * cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  /**@TODO add channel management  */
  
  cf->node.audio_description->audio_mute = mute;
 8000d78:	6853      	ldr	r3, [r2, #4]
 8000d7a:	7419      	strb	r1, [r3, #16]
  if((cf->node.state == AUDIO_NODE_STARTED)&&(cf->control_cbks.SetMute))
 8000d7c:	7813      	ldrb	r3, [r2, #0]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d103      	bne.n	8000d8a <USB_AudioStreamingFeatureUnitSetMute+0x14>
 8000d82:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000d84:	b10b      	cbz	r3, 8000d8a <USB_AudioStreamingFeatureUnitSetMute+0x14>
  {
      cf->control_cbks.SetMute(channel, mute, cf->control_cbks.private_data);
 8000d86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000d88:	4798      	blx	r3
  }
  return 0;
}
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	bd08      	pop	{r3, pc}

08000d8e <USB_AudioStreamingFeatureUnitGetCurVolume>:
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitGetCurVolume(uint16_t channel, uint16_t* volume, uint32_t node_handle)
{
  /**@TODO add channel management  */
  VOLUME_DB_256_TO_USB(*volume, ((AUDIO_Node_t*)node_handle)->audio_description->audio_volume_db_256);
 8000d8e:	6853      	ldr	r3, [r2, #4]
  return 0; 
}
 8000d90:	2000      	movs	r0, #0
  VOLUME_DB_256_TO_USB(*volume, ((AUDIO_Node_t*)node_handle)->audio_description->audio_volume_db_256);
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	800b      	strh	r3, [r1, #0]
}
 8000d96:	4770      	bx	lr

08000d98 <USB_AudioStreamingFeatureUnitSetCurVolume>:
  * @param  volume:             volume value
  * @param  node_handle:        the Feature node handle, node must be initialized
  * @retval  0 for no error
  */
static int8_t USB_AudioStreamingFeatureUnitSetCurVolume(uint16_t channel, uint16_t volume, uint32_t node_handle)
{
 8000d98:	b508      	push	{r3, lr}
  AUDIO_USB_CF_NodeTypeDef* cf;
  
  cf = (AUDIO_USB_CF_NodeTypeDef*)node_handle;
  /**@TODO add channel management  */
  
  VOLUME_USB_TO_DB_256(cf->node.audio_description->audio_volume_db_256, volume);
 8000d9a:	040b      	lsls	r3, r1, #16
 8000d9c:	6853      	ldr	r3, [r2, #4]
 8000d9e:	bf48      	it	mi
 8000da0:	f5a1 3180 	submi.w	r1, r1, #65536	; 0x10000
 8000da4:	60d9      	str	r1, [r3, #12]
  if((cf->node.state == AUDIO_NODE_STARTED)&&(cf->control_cbks.SetCurrentVolume))
 8000da6:	7813      	ldrb	r3, [r2, #0]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d103      	bne.n	8000db4 <USB_AudioStreamingFeatureUnitSetCurVolume+0x1c>
 8000dac:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000dae:	b10b      	cbz	r3, 8000db4 <USB_AudioStreamingFeatureUnitSetCurVolume+0x1c>
  {
    cf->control_cbks.SetCurrentVolume(channel, 
 8000db0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000db2:	4798      	blx	r3
                                      cf->node.audio_description->audio_volume_db_256,
                                      cf->control_cbks.private_data);
  }
  return 0;
}
 8000db4:	2000      	movs	r0, #0
 8000db6:	bd08      	pop	{r3, pc}

08000db8 <USB_AudioStreamingFeatureUnitInit>:
{
 8000db8:	b570      	push	{r4, r5, r6, lr}
 8000dba:	4604      	mov	r4, r0
 8000dbc:	460d      	mov	r5, r1
 8000dbe:	4616      	mov	r6, r2
  memset(cf,0,sizeof(AUDIO_USB_CF_NodeTypeDef));
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2240      	movs	r2, #64	; 0x40
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f006 faf0 	bl	80073aa <memset>
  cf->node.state = AUDIO_NODE_INITIALIZED;
 8000dca:	2201      	movs	r2, #1
  cf->usb_control_callbacks.GetStatus = USB_AudioStreamingFeatureUnitGetStatus;
 8000dcc:	4915      	ldr	r1, [pc, #84]	; (8000e24 <USB_AudioStreamingFeatureUnitInit+0x6c>)
  memset(cf,0,sizeof(AUDIO_USB_CF_NodeTypeDef));
 8000dce:	4603      	mov	r3, r0
  cf->node.state = AUDIO_NODE_INITIALIZED;
 8000dd0:	7002      	strb	r2, [r0, #0]
  cf->node.type = AUDIO_CONTROL;
 8000dd2:	2202      	movs	r2, #2
  cf->usb_control_callbacks.GetStatus = USB_AudioStreamingFeatureUnitGetStatus;
 8000dd4:	6301      	str	r1, [r0, #48]	; 0x30
  cf->node.type = AUDIO_CONTROL;
 8000dd6:	7202      	strb	r2, [r0, #8]
  cf->CFInit = USB_AudioStreamingFeatureUnitInit;
 8000dd8:	4a13      	ldr	r2, [pc, #76]	; (8000e28 <USB_AudioStreamingFeatureUnitInit+0x70>)
  cf->usb_control_callbacks.GetMute = USB_AudioStreamingFeatureUnitGetMute;
 8000dda:	4914      	ldr	r1, [pc, #80]	; (8000e2c <USB_AudioStreamingFeatureUnitInit+0x74>)
  cf->CFInit = USB_AudioStreamingFeatureUnitInit;
 8000ddc:	6402      	str	r2, [r0, #64]	; 0x40
  cf->CFDeInit = USB_AudioStreamingFeatureUnitDInit;
 8000dde:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <USB_AudioStreamingFeatureUnitInit+0x78>)
  cf->unit_id = unit_id;
 8000de0:	7506      	strb	r6, [r0, #20]
  cf->CFDeInit = USB_AudioStreamingFeatureUnitDInit;
 8000de2:	6442      	str	r2, [r0, #68]	; 0x44
  cf->CFStart = USB_AudioStreamingFeatureUnitStart;
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <USB_AudioStreamingFeatureUnitInit+0x7c>)
 8000de6:	6482      	str	r2, [r0, #72]	; 0x48
  cf->CFStop = USB_AudioStreamingFeatureUnitStop;
 8000de8:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <USB_AudioStreamingFeatureUnitInit+0x80>)
 8000dea:	64c2      	str	r2, [r0, #76]	; 0x4c
  cf->CFSetMute = USB_AudioStreamingFeatureUnitSetMute;
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <USB_AudioStreamingFeatureUnitInit+0x84>)
 8000dee:	6502      	str	r2, [r0, #80]	; 0x50
  cf->usb_control_callbacks.SetMute = USB_AudioStreamingFeatureUnitSetMute;
 8000df0:	e9c0 1206 	strd	r1, r2, [r0, #24]
  cf->usb_control_callbacks.GetCurVolume = USB_AudioStreamingFeatureUnitGetCurVolume;
 8000df4:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <USB_AudioStreamingFeatureUnitInit+0x88>)
 8000df6:	6242      	str	r2, [r0, #36]	; 0x24
  cf->usb_control_callbacks.SetCurVolume = USB_AudioStreamingFeatureUnitSetCurVolume;
 8000df8:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <USB_AudioStreamingFeatureUnitInit+0x8c>)
 8000dfa:	6202      	str	r2, [r0, #32]
  VOLUME_DB_256_TO_USB(cf->usb_control_callbacks.MaxVolume, audio_defaults->max_volume);
 8000dfc:	682a      	ldr	r2, [r5, #0]
 8000dfe:	8502      	strh	r2, [r0, #40]	; 0x28
  VOLUME_DB_256_TO_USB(cf->usb_control_callbacks.MinVolume, audio_defaults->min_volume);
 8000e00:	686a      	ldr	r2, [r5, #4]
 8000e02:	8542      	strh	r2, [r0, #42]	; 0x2a
  cf->usb_control_callbacks.ResVolume = audio_defaults->res_volume;
 8000e04:	68aa      	ldr	r2, [r5, #8]
 8000e06:	8582      	strh	r2, [r0, #44]	; 0x2c
  cf->node.audio_description=audio_defaults->audio_description;
 8000e08:	68ea      	ldr	r2, [r5, #12]
 8000e0a:	6042      	str	r2, [r0, #4]
  usb_control_feature->control_selector_map = USBD_AUDIO_FU_MUTE_CONTROL|USBD_AUDIO_FU_VOLUME_CONTROL;
 8000e0c:	2203      	movs	r2, #3
  usb_control_feature->control_req_map = 0;  
 8000e0e:	2000      	movs	r0, #0
  usb_control_feature->id = unit_id;
 8000e10:	7026      	strb	r6, [r4, #0]
  usb_control_feature->control_selector_map = USBD_AUDIO_FU_MUTE_CONTROL|USBD_AUDIO_FU_VOLUME_CONTROL;
 8000e12:	80a2      	strh	r2, [r4, #4]
  usb_control_feature->type = USBD_AUDIO_CS_AC_SUBTYPE_FEATURE_UNIT;
 8000e14:	2206      	movs	r2, #6
  usb_control_feature->control_req_map = 0;  
 8000e16:	8060      	strh	r0, [r4, #2]
  usb_control_feature->type = USBD_AUDIO_CS_AC_SUBTYPE_FEATURE_UNIT;
 8000e18:	7062      	strb	r2, [r4, #1]
  usb_control_feature->Callbacks.feature_control = &cf->usb_control_callbacks;
 8000e1a:	f103 0218 	add.w	r2, r3, #24
  usb_control_feature->private_data = node_handle;
 8000e1e:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
 8000e22:	bd70      	pop	{r4, r5, r6, pc}
 8000e24:	08000f21 	.word	0x08000f21
 8000e28:	08000db9 	.word	0x08000db9
 8000e2c:	08000d6d 	.word	0x08000d6d
 8000e30:	08000d39 	.word	0x08000d39
 8000e34:	08000d41 	.word	0x08000d41
 8000e38:	08000d65 	.word	0x08000d65
 8000e3c:	08000d77 	.word	0x08000d77
 8000e40:	08000d8f 	.word	0x08000d8f
 8000e44:	08000d99 	.word	0x08000d99

08000e48 <USB_AudioStreamingOutputGetBuffer>:
   if(output_node->node.state == AUDIO_NODE_STARTED)
 8000e48:	7803      	ldrb	r3, [r0, #0]
 8000e4a:	2b02      	cmp	r3, #2
{
 8000e4c:	b570      	push	{r4, r5, r6, lr}
 8000e4e:	4604      	mov	r4, r0
 8000e50:	460e      	mov	r6, r1
   if(output_node->node.state == AUDIO_NODE_STARTED)
 8000e52:	d161      	bne.n	8000f18 <USB_AudioStreamingOutputGetBuffer+0xd0>
     if(output_node->flags&AUDIO_IO_RESTART_REQUIRED)
 8000e54:	7d03      	ldrb	r3, [r0, #20]
 8000e56:	065a      	lsls	r2, r3, #25
 8000e58:	d506      	bpl.n	8000e68 <USB_AudioStreamingOutputGetBuffer+0x20>
       output_node->flags = 0;
 8000e5a:	2300      	movs	r3, #0
       output_node->buf->rd_ptr = 0;
 8000e5c:	6982      	ldr	r2, [r0, #24]
       output_node->flags = 0;
 8000e5e:	7503      	strb	r3, [r0, #20]
       output_node->buf->rd_ptr = 0;
 8000e60:	8093      	strh	r3, [r2, #4]
        return output_node->specific.output.alt_buff;
 8000e62:	6b24      	ldr	r4, [r4, #48]	; 0x30
}
 8000e64:	4620      	mov	r0, r4
 8000e66:	bd70      	pop	{r4, r5, r6, pc}
      output_node->node.session_handle->SessionCallback(AUDIO_PACKET_PLAYED, (AUDIO_Node_t*)output_node,
 8000e68:	68c2      	ldr	r2, [r0, #12]
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	6893      	ldr	r3, [r2, #8]
 8000e70:	4798      	blx	r3
    *packet_length = output_node->packet_length;
 8000e72:	8be3      	ldrh	r3, [r4, #30]
     buf = output_node->buf;
 8000e74:	69a5      	ldr	r5, [r4, #24]
    *packet_length = output_node->packet_length;
 8000e76:	8033      	strh	r3, [r6, #0]
     if(!(output_node->flags&AUDIO_IO_BEGIN_OF_STREAM))
 8000e78:	7d23      	ldrb	r3, [r4, #20]
 8000e7a:	07db      	lsls	r3, r3, #31
 8000e7c:	d40d      	bmi.n	8000e9a <USB_AudioStreamingOutputGetBuffer+0x52>
     if(buf->wr_ptr < (buf->size>>1)) /* first threshold is a half of buffer */
 8000e7e:	892a      	ldrh	r2, [r5, #8]
 8000e80:	88eb      	ldrh	r3, [r5, #6]
 8000e82:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8000e86:	d3ec      	bcc.n	8000e62 <USB_AudioStreamingOutputGetBuffer+0x1a>
       output_node->node.session_handle->SessionCallback(AUDIO_BEGIN_OF_STREAM, (AUDIO_Node_t*)output_node,
 8000e88:	68e2      	ldr	r2, [r4, #12]
 8000e8a:	4621      	mov	r1, r4
 8000e8c:	2001      	movs	r0, #1
 8000e8e:	6893      	ldr	r3, [r2, #8]
 8000e90:	4798      	blx	r3
       output_node->flags |= AUDIO_IO_BEGIN_OF_STREAM;
 8000e92:	7d23      	ldrb	r3, [r4, #20]
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	7523      	strb	r3, [r4, #20]
      buffer_data_count = AUDIO_BUFFER_FILLED_SIZE(buf);       
 8000e9a:	88eb      	ldrh	r3, [r5, #6]
 8000e9c:	88aa      	ldrh	r2, [r5, #4]
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	bf3c      	itt	cc
 8000ea2:	8929      	ldrhcc	r1, [r5, #8]
 8000ea4:	185b      	addcc	r3, r3, r1
      if(buffer_data_count < *packet_length)
 8000ea6:	8831      	ldrh	r1, [r6, #0]
      buffer_data_count = AUDIO_BUFFER_FILLED_SIZE(buf);       
 8000ea8:	1a9b      	subs	r3, r3, r2
 8000eaa:	68e2      	ldr	r2, [r4, #12]
 8000eac:	b29b      	uxth	r3, r3
      if(buffer_data_count < *packet_length)
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d904      	bls.n	8000ebc <USB_AudioStreamingOutputGetBuffer+0x74>
       output_node->node.session_handle->SessionCallback(AUDIO_UNDERRUN, (AUDIO_Node_t*)output_node,
 8000eb2:	6893      	ldr	r3, [r2, #8]
 8000eb4:	4621      	mov	r1, r4
 8000eb6:	2005      	movs	r0, #5
 8000eb8:	4798      	blx	r3
 8000eba:	e7d2      	b.n	8000e62 <USB_AudioStreamingOutputGetBuffer+0x1a>
      sample_add_remove = USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt(output_node->node.session_handle);
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	f000 fb4b 	bl	8001558 <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt>
      *packet_length += sample_add_remove;
 8000ec2:	8831      	ldrh	r1, [r6, #0]
 8000ec4:	4401      	add	r1, r0
 8000ec6:	b289      	uxth	r1, r1
 8000ec8:	8031      	strh	r1, [r6, #0]
 8000eca:	8ba0      	ldrh	r0, [r4, #28]
 8000ecc:	4281      	cmp	r1, r0
 8000ece:	bf28      	it	cs
 8000ed0:	4601      	movcs	r1, r0
 8000ed2:	8031      	strh	r1, [r6, #0]
      USB_AudioRecordingSynchronizationNotificationSamplesRead(output_node->node.session_handle, *packet_length);
 8000ed4:	68e0      	ldr	r0, [r4, #12]
 8000ed6:	f000 fb4b 	bl	8001570 <USB_AudioRecordingSynchronizationNotificationSamplesRead>
        packet_data = buf->data + buf->rd_ptr;
 8000eda:	88aa      	ldrh	r2, [r5, #4]
        buf->rd_ptr += *packet_length;
 8000edc:	8833      	ldrh	r3, [r6, #0]
        packet_data = buf->data + buf->rd_ptr;
 8000ede:	6829      	ldr	r1, [r5, #0]
        if(buf->rd_ptr > buf->size)
 8000ee0:	8928      	ldrh	r0, [r5, #8]
        packet_data = buf->data + buf->rd_ptr;
 8000ee2:	188c      	adds	r4, r1, r2
        buf->rd_ptr += *packet_length;
 8000ee4:	441a      	add	r2, r3
 8000ee6:	b292      	uxth	r2, r2
        if(buf->rd_ptr > buf->size)
 8000ee8:	4282      	cmp	r2, r0
        buf->rd_ptr += *packet_length;
 8000eea:	80aa      	strh	r2, [r5, #4]
        if(buf->rd_ptr > buf->size)
 8000eec:	d90d      	bls.n	8000f0a <USB_AudioStreamingOutputGetBuffer+0xc2>
          buf->rd_ptr -= buf->size;
 8000eee:	1a12      	subs	r2, r2, r0
          memcpy(buf->data+buf->size, buf->data, buf->rd_ptr);
 8000ef0:	4408      	add	r0, r1
          buf->rd_ptr -= buf->size;
 8000ef2:	b292      	uxth	r2, r2
 8000ef4:	80aa      	strh	r2, [r5, #4]
          memcpy(buf->data+buf->size, buf->data, buf->rd_ptr);
 8000ef6:	f006 fa4d 	bl	8007394 <memcpy>
          if(buf->rd_ptr+buf->size >=USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE)
 8000efa:	88ab      	ldrh	r3, [r5, #4]
 8000efc:	892a      	ldrh	r2, [r5, #8]
 8000efe:	4413      	add	r3, r2
 8000f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f04:	db01      	blt.n	8000f0a <USB_AudioStreamingOutputGetBuffer+0xc2>
            Error_Handler();
 8000f06:	f002 f897 	bl	8003038 <Error_Handler>
        if(buf->rd_ptr == buf->size)
 8000f0a:	88aa      	ldrh	r2, [r5, #4]
 8000f0c:	892b      	ldrh	r3, [r5, #8]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	d1a8      	bne.n	8000e64 <USB_AudioStreamingOutputGetBuffer+0x1c>
          buf->rd_ptr = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	80ab      	strh	r3, [r5, #4]
 8000f16:	e7a5      	b.n	8000e64 <USB_AudioStreamingOutputGetBuffer+0x1c>
     Error_Handler();
 8000f18:	f002 f88e 	bl	8003038 <Error_Handler>
     return 0; /* return statement not reachable */
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	e7a1      	b.n	8000e64 <USB_AudioStreamingOutputGetBuffer+0x1c>

08000f20 <USB_AudioStreamingFeatureUnitGetStatus>:
 8000f20:	2000      	movs	r0, #0
 8000f22:	4770      	bx	lr

08000f24 <USB_AudioStreamingOutputInit>:
{
 8000f24:	b570      	push	{r4, r5, r6, lr}
  output_node->node.audio_description = audio_desc;
 8000f26:	6059      	str	r1, [r3, #4]
{
 8000f28:	461c      	mov	r4, r3
  output_node->node.session_handle = session_handle;
 8000f2a:	60da      	str	r2, [r3, #12]
  output_node->node.state = AUDIO_NODE_INITIALIZED;
 8000f2c:	2301      	movs	r3, #1
{
 8000f2e:	4606      	mov	r6, r0
  output_node->node.state = AUDIO_NODE_INITIALIZED;
 8000f30:	7023      	strb	r3, [r4, #0]
  output_node->node.type = AUDIO_OUTPUT;
 8000f32:	7223      	strb	r3, [r4, #8]
  output_node->max_packet_length = AUDIO_MAX_PACKET_WITH_FEEDBACK_LENGTH(audio_desc);
 8000f34:	680b      	ldr	r3, [r1, #0]
 8000f36:	790a      	ldrb	r2, [r1, #4]
 8000f38:	7c49      	ldrb	r1, [r1, #17]
 8000f3a:	f503 757a 	add.w	r5, r3, #1000	; 0x3e8
 8000f3e:	434a      	muls	r2, r1
 8000f40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f44:	fbb5 f5f1 	udiv	r5, r5, r1
  output_node->packet_length = AUDIO_USB_PACKET_SIZE_FROM_AUD_DESC(audio_desc);
 8000f48:	fbb3 f3f1 	udiv	r3, r3, r1
  output_node->max_packet_length = AUDIO_MAX_PACKET_WITH_FEEDBACK_LENGTH(audio_desc);
 8000f4c:	fb15 f502 	smulbb	r5, r5, r2
  output_node->packet_length = AUDIO_USB_PACKET_SIZE_FROM_AUD_DESC(audio_desc);
 8000f50:	fb13 f302 	smulbb	r3, r3, r2
  output_node->max_packet_length = AUDIO_MAX_PACKET_WITH_FEEDBACK_LENGTH(audio_desc);
 8000f54:	b2ad      	uxth	r5, r5
  output_node->packet_length = AUDIO_USB_PACKET_SIZE_FROM_AUD_DESC(audio_desc);
 8000f56:	83e3      	strh	r3, [r4, #30]
  output_node->max_packet_length = AUDIO_MAX_PACKET_WITH_FEEDBACK_LENGTH(audio_desc);
 8000f58:	83a5      	strh	r5, [r4, #28]
  output_node->specific.output.alt_buff = (uint8_t *) malloc(output_node->max_packet_length);
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	f006 fa0a 	bl	8007374 <malloc>
 8000f60:	6320      	str	r0, [r4, #48]	; 0x30
  if(output_node->specific.output.alt_buff)
 8000f62:	b1c8      	cbz	r0, 8000f98 <USB_AudioStreamingOutputInit+0x74>
    memset(output_node->specific.output.alt_buff, 0, output_node->max_packet_length);
 8000f64:	462a      	mov	r2, r5
 8000f66:	2100      	movs	r1, #0
 8000f68:	f006 fa1f 	bl	80073aa <memset>
  output_node->IODeInit = USB_AudioStreamingInputOutputDeInit;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <USB_AudioStreamingOutputInit+0x7c>)
  data_ep->control_name_map = 0;
 8000f6e:	2000      	movs	r0, #0
  output_node->IODeInit = USB_AudioStreamingInputOutputDeInit;
 8000f70:	6223      	str	r3, [r4, #32]
  output_node->IOStart = USB_AudioStreamingInputOutputStart;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <USB_AudioStreamingOutputInit+0x80>)
 8000f74:	6263      	str	r3, [r4, #36]	; 0x24
  output_node->IOStop = USB_AudioStreamingInputOutputStop;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <USB_AudioStreamingOutputInit+0x84>)
 8000f78:	62e3      	str	r3, [r4, #44]	; 0x2c
  output_node->IORestart = USB_AudioStreamingInputOutputRestart;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <USB_AudioStreamingOutputInit+0x88>)
 8000f7c:	62a3      	str	r3, [r4, #40]	; 0x28
  data_ep->ep_num = USB_AUDIO_CONFIG_RECORD_EP_IN;
 8000f7e:	2381      	movs	r3, #129	; 0x81
  data_ep->control_name_map = 0;
 8000f80:	8070      	strh	r0, [r6, #2]
  data_ep->ep_num = USB_AUDIO_CONFIG_RECORD_EP_IN;
 8000f82:	7033      	strb	r3, [r6, #0]
  data_ep->GetBuffer = USB_AudioStreamingOutputGetBuffer;
 8000f84:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <USB_AudioStreamingOutputInit+0x8c>)
  data_ep->control_selector_map = 0;
 8000f86:	80b0      	strh	r0, [r6, #4]
  data_ep->GetBuffer = USB_AudioStreamingOutputGetBuffer;
 8000f88:	6173      	str	r3, [r6, #20]
  data_ep->GetMaxPacketLength = USB_AudioStreamingInputOutputGetMaxPacketLength;
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <USB_AudioStreamingOutputInit+0x90>)
  data_ep->private_data = node_handle;
 8000f8c:	6234      	str	r4, [r6, #32]
  data_ep->GetMaxPacketLength = USB_AudioStreamingInputOutputGetMaxPacketLength;
 8000f8e:	61b3      	str	r3, [r6, #24]
  data_ep->GetState = USB_AudioStreamingInputOutputGetState;
 8000f90:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <USB_AudioStreamingOutputInit+0x94>)
  data_ep->DataReceived = 0;
 8000f92:	6130      	str	r0, [r6, #16]
  data_ep->GetState = USB_AudioStreamingInputOutputGetState;
 8000f94:	61f3      	str	r3, [r6, #28]
}
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8000f98:	f002 f84e 	bl	8003038 <Error_Handler>
 8000f9c:	e7e6      	b.n	8000f6c <USB_AudioStreamingOutputInit+0x48>
 8000f9e:	bf00      	nop
 8000fa0:	08000cf3 	.word	0x08000cf3
 8000fa4:	08000cfb 	.word	0x08000cfb
 8000fa8:	08000d1b 	.word	0x08000d1b
 8000fac:	08000d23 	.word	0x08000d23
 8000fb0:	08000e49 	.word	0x08000e49
 8000fb4:	08000d31 	.word	0x08000d31
 8000fb8:	08000d35 	.word	0x08000d35

08000fbc <USB_AudioStreamingInitializeDataBuffer>:
  */
  void USB_AudioStreamingInitializeDataBuffer(AUDIO_CircularBuffer_t* buf, 
                                       uint32_t buffer_size, 
                                       uint16_t packet_size, uint16_t margin)
 {
    buf->size = ((int)((buffer_size - margin )
 8000fbc:	1acb      	subs	r3, r1, r3
                       / packet_size)) * packet_size; 
 8000fbe:	fbb3 f3f2 	udiv	r3, r3, r2
    buf->size = ((int)((buffer_size - margin )
 8000fc2:	fb13 f202 	smulbb	r2, r3, r2
    buf->rd_ptr = buf->wr_ptr = 0;
 8000fc6:	2300      	movs	r3, #0
    buf->size = ((int)((buffer_size - margin )
 8000fc8:	8102      	strh	r2, [r0, #8]
    buf->rd_ptr = buf->wr_ptr = 0;
 8000fca:	6043      	str	r3, [r0, #4]
 }
 8000fcc:	4770      	bx	lr

08000fce <USB_AudioRecordingGetState>:
  * @retval 0 if no error
  */
static int8_t  USB_AudioRecordingGetState(uint32_t session_handle)
{
  return 0;
}
 8000fce:	2000      	movs	r0, #0
 8000fd0:	4770      	bx	lr
	...

08000fd4 <USB_AudioRecordingSofReceived>:
 {
    AUDIO_USBSession_t *rec_session;
    uint16_t read_bytes, audio_buffer_filled_size;
    
  rec_session = (AUDIO_USBSession_t*)session_handle;
  if(( rec_session->session.state == AUDIO_SESSION_STARTED)&&(  RecordingSynchronizationParams.status & AUDIO_SYNC_STARTED))
 8000fd4:	7903      	ldrb	r3, [r0, #4]
 8000fd6:	2b02      	cmp	r3, #2
 {
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	4606      	mov	r6, r0
  if(( rec_session->session.state == AUDIO_SESSION_STARTED)&&(  RecordingSynchronizationParams.status & AUDIO_SYNC_STARTED))
 8000fdc:	f040 8094 	bne.w	8001108 <USB_AudioRecordingSofReceived+0x134>
 8000fe0:	4d8b      	ldr	r5, [pc, #556]	; (8001210 <USB_AudioRecordingSofReceived+0x23c>)
 8000fe2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 8000fe6:	462c      	mov	r4, r5
 8000fe8:	f013 0f01 	tst.w	r3, #1
 8000fec:	f000 808c 	beq.w	8001108 <USB_AudioRecordingSofReceived+0x134>
  {
   if(RecordingSynchronizationParams.status&AUDIO_SYNCHRO_MIC_COUNTER_STARTED)
 8000ff0:	071b      	lsls	r3, r3, #28
 8000ff2:	f140 8102 	bpl.w	80011fa <USB_AudioRecordingSofReceived+0x226>
   {

      read_bytes = RecordingMicrophoneNode.MicGetReadCount((uint32_t)&RecordingMicrophoneNode);
 8000ff6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8000ff8:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8000ffc:	4798      	blx	r3
      RecordingSynchronizationParams.written_in_current_second += read_bytes;
       if(++RecordingSynchronizationParams.sof_counter == USB_SOF_COUNT_PER_SECOND)
 8000ffe:	8b2a      	ldrh	r2, [r5, #24]
      RecordingSynchronizationParams.written_in_current_second += read_bytes;
 8001000:	696b      	ldr	r3, [r5, #20]
       if(++RecordingSynchronizationParams.sof_counter == USB_SOF_COUNT_PER_SECOND)
 8001002:	3201      	adds	r2, #1
      RecordingSynchronizationParams.written_in_current_second += read_bytes;
 8001004:	4403      	add	r3, r0
       if(++RecordingSynchronizationParams.sof_counter == USB_SOF_COUNT_PER_SECOND)
 8001006:	b292      	uxth	r2, r2
      RecordingSynchronizationParams.written_in_current_second += read_bytes;
 8001008:	616b      	str	r3, [r5, #20]
       if(++RecordingSynchronizationParams.sof_counter == USB_SOF_COUNT_PER_SECOND)
 800100a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800100e:	832a      	strh	r2, [r5, #24]
 8001010:	d107      	bne.n	8001022 <USB_AudioRecordingSofReceived+0x4e>
      {
        RecordingSynchronizationParams.mic_estimated_freq = RecordingSynchronizationParams.written_in_current_second/RecordingSynchronizationParams.sample_size;/* the new estimated frequency */
 8001012:	f995 202f 	ldrsb.w	r2, [r5, #47]	; 0x2f
 8001016:	fbb3 f3f2 	udiv	r3, r3, r2
 800101a:	612b      	str	r3, [r5, #16]
        RecordingSynchronizationParams.sof_counter = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	832b      	strh	r3, [r5, #24]
        RecordingSynchronizationParams.written_in_current_second = 0;
 8001020:	616b      	str	r3, [r5, #20]
      }
      
      RecordingSynchronizationParams.mic_usb_diff += read_bytes;
 8001022:	69e3      	ldr	r3, [r4, #28]
      if(RecordingSynchronizationParams.mic_estimated_freq)
 8001024:	6922      	ldr	r2, [r4, #16]
      RecordingSynchronizationParams.mic_usb_diff += read_bytes;
 8001026:	4418      	add	r0, r3
 8001028:	61e0      	str	r0, [r4, #28]
      if(RecordingSynchronizationParams.mic_estimated_freq)
 800102a:	2a00      	cmp	r2, #0
 800102c:	f000 80cf 	beq.w	80011ce <USB_AudioRecordingSofReceived+0x1fa>
      {
        audio_buffer_filled_size = AUDIO_BUFFER_FILLED_SIZE(&rec_session->buffer);
 8001030:	8b71      	ldrh	r1, [r6, #26]
 8001032:	8b33      	ldrh	r3, [r6, #24]
 8001034:	4299      	cmp	r1, r3
 8001036:	bf3c      	itt	cc
 8001038:	8bb5      	ldrhcc	r5, [r6, #28]
 800103a:	1949      	addcc	r1, r1, r5
  */
static void  USB_AudioRecordingSynchroUpdate(int audio_buffer_filled_size)
{
    uint8_t update_synchro = 0;
 
   if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON)== 0)
 800103c:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
        audio_buffer_filled_size = AUDIO_BUFFER_FILLED_SIZE(&rec_session->buffer);
 8001040:	1ac9      	subs	r1, r1, r3
   if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON)== 0)
 8001042:	f015 0310 	ands.w	r3, r5, #16
        audio_buffer_filled_size = AUDIO_BUFFER_FILLED_SIZE(&rec_session->buffer);
 8001046:	b289      	uxth	r1, r1
   if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON)== 0)
 8001048:	f040 80af 	bne.w	80011aa <USB_AudioRecordingSofReceived+0x1d6>
   {
     /* NO SOON OVERRUN OR UNDERRUN DETECTED*/
     if((audio_buffer_filled_size<RecordingSynchronizationParams.buffer_fill_max_th) && (audio_buffer_filled_size>RecordingSynchronizationParams.buffer_fill_min_th))
 800104c:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800104e:	42b1      	cmp	r1, r6
 8001050:	f280 80a1 	bge.w	8001196 <USB_AudioRecordingSofReceived+0x1c2>
 8001054:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
 8001056:	42b1      	cmp	r1, r6
 8001058:	f340 80a3 	ble.w	80011a2 <USB_AudioRecordingSofReceived+0x1ce>
     {
       /* In this block no risk of buffer overflow or underflow*/
       if((RecordingSynchronizationParams.mic_usb_diff < RecordingSynchronizationParams.sample_per_s_th)
 800105c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800105e:	4288      	cmp	r0, r1
 8001060:	da5e      	bge.n	8001120 <USB_AudioRecordingSofReceived+0x14c>
          &&(RecordingSynchronizationParams.mic_usb_diff > (-RecordingSynchronizationParams.sample_per_s_th)))
 8001062:	4249      	negs	r1, r1
 8001064:	4288      	cmp	r0, r1
 8001066:	dd5b      	ble.n	8001120 <USB_AudioRecordingSofReceived+0x14c>
       {
         /* the sample rate drift is less than limits */
          if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_DRIFT_DETECTED) == 0)
 8001068:	066d      	lsls	r5, r5, #25
 800106a:	6821      	ldr	r1, [r4, #0]
 800106c:	d44d      	bmi.n	800110a <USB_AudioRecordingSofReceived+0x136>
    uint8_t update_synchro = 0;
 800106e:	1a53      	subs	r3, r2, r1
 8001070:	bf18      	it	ne
 8001072:	2301      	movne	r3, #1
       update_synchro = 1;
       RecordingSynchronizationParams.status &= ~AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON;
     }
   }
   
   if((RecordingSynchronizationParams.status&AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON) == 0)
 8001074:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8001078:	06c9      	lsls	r1, r1, #27
 800107a:	d445      	bmi.n	8001108 <USB_AudioRecordingSofReceived+0x134>
   {
     if(update_synchro)
 800107c:	b303      	cbz	r3, 80010c0 <USB_AudioRecordingSofReceived+0xec>
     {
       RecordingSynchronizationParams.current_frequency = RecordingSynchronizationParams.mic_estimated_freq;
       if(RecordingAudioDescription.frequency > RecordingSynchronizationParams.current_frequency)
 800107e:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8001082:	f994 102f 	ldrsb.w	r1, [r4, #47]	; 0x2f
 8001086:	429a      	cmp	r2, r3
 8001088:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001214 <USB_AudioRecordingSofReceived+0x240>
 800108c:	ee07 1a90 	vmov	s15, r1
       RecordingSynchronizationParams.current_frequency = RecordingSynchronizationParams.mic_estimated_freq;
 8001090:	6022      	str	r2, [r4, #0]
       {
         RecordingSynchronizationParams.sample_step = (float)((RecordingAudioDescription.frequency - RecordingSynchronizationParams.current_frequency))*RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 8001092:	bf34      	ite	cc
 8001094:	1a9b      	subcc	r3, r3, r2
       }
       else
       {
         RecordingSynchronizationParams.sample_step = (float)((RecordingSynchronizationParams.current_frequency- RecordingAudioDescription.frequency))*RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 8001096:	1ad3      	subcs	r3, r2, r3
 8001098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109c:	ee07 3a90 	vmov	s15, r3
       }
       RecordingSynchronizationParams.status = (AUDIO_SYNC_NEEDED|AUDIO_SYNC_STARTED|AUDIO_SYNCHRO_MIC_COUNTER_STARTED);
 80010a0:	230b      	movs	r3, #11
         RecordingSynchronizationParams.sample_step = (float)((RecordingSynchronizationParams.current_frequency- RecordingAudioDescription.frequency))*RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 80010a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
       RecordingSynchronizationParams.status = (AUDIO_SYNC_NEEDED|AUDIO_SYNC_STARTED|AUDIO_SYNCHRO_MIC_COUNTER_STARTED);
 80010a6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
       RecordingSynchronizationParams.sample_frac_sum = 0;
 80010aa:	2300      	movs	r3, #0
         RecordingSynchronizationParams.sample_step = (float)((RecordingSynchronizationParams.current_frequency- RecordingAudioDescription.frequency))*RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 80010ac:	ee67 7a87 	vmul.f32	s15, s15, s14
       RecordingSynchronizationParams.sample_frac_sum = 0;
 80010b0:	60a3      	str	r3, [r4, #8]
       RecordingSynchronizationParams.samples = 0;
 80010b2:	2300      	movs	r3, #0
         RecordingSynchronizationParams.sample_step = (float)((RecordingSynchronizationParams.current_frequency- RecordingAudioDescription.frequency))*RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
       RecordingSynchronizationParams.samples = 0;
 80010b8:	60e3      	str	r3, [r4, #12]
       RecordingSynchronizationParams.mic_usb_diff = 0;
 80010ba:	61e3      	str	r3, [r4, #28]
         RecordingSynchronizationParams.sample_step = (float)((RecordingSynchronizationParams.current_frequency- RecordingAudioDescription.frequency))*RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 80010bc:	ed84 7a01 	vstr	s14, [r4, #4]
    }
    
    if(RecordingSynchronizationParams.sample_step)
 80010c0:	edd4 7a01 	vldr	s15, [r4, #4]
 80010c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d01c      	beq.n	8001108 <USB_AudioRecordingSofReceived+0x134>
    {
       RecordingSynchronizationParams.sample_frac_sum+=RecordingSynchronizationParams.sample_step;
 80010ce:	ed94 7a02 	vldr	s14, [r4, #8]
       if(RecordingSynchronizationParams.sample_frac_sum>RecordingSynchronizationParams.sample_size)
 80010d2:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
       RecordingSynchronizationParams.sample_frac_sum+=RecordingSynchronizationParams.sample_step;
 80010d6:	ee77 7a87 	vadd.f32	s15, s15, s14
       if(RecordingSynchronizationParams.sample_frac_sum>RecordingSynchronizationParams.sample_size)
 80010da:	ee07 3a10 	vmov	s14, r3
 80010de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
       RecordingSynchronizationParams.sample_frac_sum+=RecordingSynchronizationParams.sample_step;
 80010e2:	edc4 7a02 	vstr	s15, [r4, #8]
       if(RecordingSynchronizationParams.sample_frac_sum>RecordingSynchronizationParams.sample_size)
 80010e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	f340 8081 	ble.w	80011f4 <USB_AudioRecordingSofReceived+0x220>
       {
         RecordingSynchronizationParams.samples = (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)?RecordingSynchronizationParams.sample_size:-RecordingSynchronizationParams.sample_size;
 80010f2:	f8d4 137c 	ldr.w	r1, [r4, #892]	; 0x37c
         RecordingSynchronizationParams.sample_frac_sum -= RecordingSynchronizationParams.sample_size;
 80010f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
         RecordingSynchronizationParams.samples = (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)?RecordingSynchronizationParams.sample_size:-RecordingSynchronizationParams.sample_size;
 80010fa:	6822      	ldr	r2, [r4, #0]
 80010fc:	4291      	cmp	r1, r2
         RecordingSynchronizationParams.sample_frac_sum -= RecordingSynchronizationParams.sample_size;
 80010fe:	edc4 7a02 	vstr	s15, [r4, #8]
         RecordingSynchronizationParams.samples = (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)?RecordingSynchronizationParams.sample_size:-RecordingSynchronizationParams.sample_size;
 8001102:	bf28      	it	cs
 8001104:	425b      	negcs	r3, r3
 8001106:	60e3      	str	r3, [r4, #12]
 }
 8001108:	bd70      	pop	{r4, r5, r6, pc}
            if(((RecordingSynchronizationParams.mic_usb_diff<=0 )
 800110a:	2800      	cmp	r0, #0
 800110c:	dc03      	bgt.n	8001116 <USB_AudioRecordingSofReceived+0x142>
                 &&( RecordingSynchronizationParams.mic_estimated_freq < RecordingSynchronizationParams.current_frequency))||
 800110e:	428a      	cmp	r2, r1
 8001110:	d355      	bcc.n	80011be <USB_AudioRecordingSofReceived+0x1ea>
 8001112:	2800      	cmp	r0, #0
 8001114:	d1ae      	bne.n	8001074 <USB_AudioRecordingSofReceived+0xa0>
    uint8_t update_synchro = 0;
 8001116:	428a      	cmp	r2, r1
 8001118:	bf94      	ite	ls
 800111a:	2300      	movls	r3, #0
 800111c:	2301      	movhi	r3, #1
 800111e:	e7a9      	b.n	8001074 <USB_AudioRecordingSofReceived+0xa0>
        if(((RecordingSynchronizationParams.mic_usb_diff>0) && ( RecordingSynchronizationParams.mic_estimated_freq > RecordingSynchronizationParams.current_frequency))||
 8001120:	2800      	cmp	r0, #0
 8001122:	dd26      	ble.n	8001172 <USB_AudioRecordingSofReceived+0x19e>
 8001124:	6821      	ldr	r1, [r4, #0]
 8001126:	428a      	cmp	r2, r1
 8001128:	d849      	bhi.n	80011be <USB_AudioRecordingSofReceived+0x1ea>
            RecordingSynchronizationParams.current_frequency++;
 800112a:	3101      	adds	r1, #1
            RecordingSynchronizationParams.sample_step += (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)? (float)RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND:(float)-RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 800112c:	f8d4 037c 	ldr.w	r0, [r4, #892]	; 0x37c
 8001130:	ed94 7a01 	vldr	s14, [r4, #4]
 8001134:	4281      	cmp	r1, r0
            RecordingSynchronizationParams.current_frequency++;
 8001136:	6021      	str	r1, [r4, #0]
 8001138:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800113c:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8001214 <USB_AudioRecordingSofReceived+0x240>
            RecordingSynchronizationParams.sample_step += (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)? (float)RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND:(float)-RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 8001140:	d927      	bls.n	8001192 <USB_AudioRecordingSofReceived+0x1be>
            RecordingSynchronizationParams.sample_step += (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)? (float)-RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND:(float)RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800114e:	ee77 7a26 	vadd.f32	s15, s14, s13
 8001152:	edc4 7a01 	vstr	s15, [r4, #4]
          RecordingSynchronizationParams.sample_frac_sum = RecordingSynchronizationParams.sample_size;
 8001156:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
          RecordingSynchronizationParams.status|= AUDIO_SYNCHRO_DRIFT_DETECTED;
 800115a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
          RecordingSynchronizationParams.sample_frac_sum = RecordingSynchronizationParams.sample_size;
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001166:	edc4 7a02 	vstr	s15, [r4, #8]
       RecordingSynchronizationParams.status|= AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON;
 800116a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    uint8_t update_synchro = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	e780      	b.n	8001074 <USB_AudioRecordingSofReceived+0xa0>
        if(((RecordingSynchronizationParams.mic_usb_diff>0) && ( RecordingSynchronizationParams.mic_estimated_freq > RecordingSynchronizationParams.current_frequency))||
 8001172:	d0f0      	beq.n	8001156 <USB_AudioRecordingSofReceived+0x182>
           ((RecordingSynchronizationParams.mic_usb_diff<0) && ( RecordingSynchronizationParams.mic_estimated_freq < RecordingSynchronizationParams.current_frequency)))
 8001174:	6821      	ldr	r1, [r4, #0]
 8001176:	428a      	cmp	r2, r1
 8001178:	d321      	bcc.n	80011be <USB_AudioRecordingSofReceived+0x1ea>
            RecordingSynchronizationParams.current_frequency--;
 800117a:	3901      	subs	r1, #1
            RecordingSynchronizationParams.sample_step += (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)? (float)-RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND:(float)RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 800117c:	f8d4 037c 	ldr.w	r0, [r4, #892]	; 0x37c
 8001180:	ed94 7a01 	vldr	s14, [r4, #4]
 8001184:	4281      	cmp	r1, r0
            RecordingSynchronizationParams.current_frequency--;
 8001186:	6021      	str	r1, [r4, #0]
 8001188:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800118c:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8001214 <USB_AudioRecordingSofReceived+0x240>
            RecordingSynchronizationParams.sample_step += (RecordingAudioDescription.frequency < RecordingSynchronizationParams.current_frequency)? (float)-RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND:(float)RecordingSynchronizationParams.sample_size/USB_SOF_COUNT_PER_SECOND;
 8001190:	d9d7      	bls.n	8001142 <USB_AudioRecordingSofReceived+0x16e>
 8001192:	425b      	negs	r3, r3
 8001194:	e7d5      	b.n	8001142 <USB_AudioRecordingSofReceived+0x16e>
       RecordingSynchronizationParams.samples = (audio_buffer_filled_size>=RecordingSynchronizationParams.buffer_fill_max_th)? RecordingSynchronizationParams.sample_size:-RecordingSynchronizationParams.sample_size;
 8001196:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800119a:	60e3      	str	r3, [r4, #12]
       RecordingSynchronizationParams.status|= AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON;
 800119c:	f045 0510 	orr.w	r5, r5, #16
 80011a0:	e7e3      	b.n	800116a <USB_AudioRecordingSofReceived+0x196>
       RecordingSynchronizationParams.samples = (audio_buffer_filled_size>=RecordingSynchronizationParams.buffer_fill_max_th)? RecordingSynchronizationParams.sample_size:-RecordingSynchronizationParams.sample_size;
 80011a2:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 80011a6:	425b      	negs	r3, r3
 80011a8:	e7f7      	b.n	800119a <USB_AudioRecordingSofReceived+0x1c6>
     if(((RecordingSynchronizationParams.samples>0)&&(audio_buffer_filled_size>=RecordingSynchronizationParams.buffer_fill_moy))||
 80011aa:	68e3      	ldr	r3, [r4, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	dd08      	ble.n	80011c2 <USB_AudioRecordingSofReceived+0x1ee>
 80011b0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80011b2:	4299      	cmp	r1, r3
 80011b4:	dbdb      	blt.n	800116e <USB_AudioRecordingSofReceived+0x19a>
       RecordingSynchronizationParams.status &= ~AUDIO_SYNCHRO_OVERRUN_UNDERR_SOON;
 80011b6:	f025 0510 	bic.w	r5, r5, #16
 80011ba:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
               update_synchro = 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	e758      	b.n	8001074 <USB_AudioRecordingSofReceived+0xa0>
     if(((RecordingSynchronizationParams.samples>0)&&(audio_buffer_filled_size>=RecordingSynchronizationParams.buffer_fill_moy))||
 80011c2:	f43f af57 	beq.w	8001074 <USB_AudioRecordingSofReceived+0xa0>
        ((RecordingSynchronizationParams.samples<0)&&(audio_buffer_filled_size<=RecordingSynchronizationParams.buffer_fill_moy)))
 80011c6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80011c8:	4299      	cmp	r1, r3
 80011ca:	dcd0      	bgt.n	800116e <USB_AudioRecordingSofReceived+0x19a>
 80011cc:	e7f3      	b.n	80011b6 <USB_AudioRecordingSofReceived+0x1e2>
        if(RecordingSynchronizationParams.mic_usb_diff >= RecordingSynchronizationParams.packet_size*2)
 80011ce:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 80011d0:	0053      	lsls	r3, r2, #1
 80011d2:	4298      	cmp	r0, r3
 80011d4:	db02      	blt.n	80011dc <USB_AudioRecordingSofReceived+0x208>
          RecordingSynchronizationParams.samples = RecordingSynchronizationParams.sample_size;
 80011d6:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 80011da:	e00c      	b.n	80011f6 <USB_AudioRecordingSofReceived+0x222>
          if(RecordingSynchronizationParams.mic_usb_diff + 2*RecordingSynchronizationParams.packet_size <= 0)
 80011dc:	4403      	add	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dc03      	bgt.n	80011ea <USB_AudioRecordingSofReceived+0x216>
            RecordingSynchronizationParams.samples = -RecordingSynchronizationParams.sample_size;
 80011e2:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 80011e6:	425b      	negs	r3, r3
 80011e8:	e005      	b.n	80011f6 <USB_AudioRecordingSofReceived+0x222>
          if((RecordingSynchronizationParams.mic_usb_diff <= RecordingSynchronizationParams.packet_size)&&
 80011ea:	4290      	cmp	r0, r2
 80011ec:	dc8c      	bgt.n	8001108 <USB_AudioRecordingSofReceived+0x134>
             (RecordingSynchronizationParams.mic_usb_diff + RecordingSynchronizationParams.packet_size >= 0))
 80011ee:	1a9b      	subs	r3, r3, r2
          if((RecordingSynchronizationParams.mic_usb_diff <= RecordingSynchronizationParams.packet_size)&&
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db89      	blt.n	8001108 <USB_AudioRecordingSofReceived+0x134>
       }
       else
       {
         RecordingSynchronizationParams.samples = 0;
 80011f4:	2300      	movs	r3, #0
            RecordingSynchronizationParams.samples = -RecordingSynchronizationParams.sample_size;
 80011f6:	60e3      	str	r3, [r4, #12]
 80011f8:	e786      	b.n	8001108 <USB_AudioRecordingSofReceived+0x134>
      RecordingMicrophoneNode.MicStartReadCount((uint32_t)&RecordingMicrophoneNode);
 80011fa:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80011fc:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001200:	4798      	blx	r3
      RecordingSynchronizationParams.status |= AUDIO_SYNCHRO_MIC_COUNTER_STARTED;
 8001202:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
 }
 800120e:	e77b      	b.n	8001108 <USB_AudioRecordingSofReceived+0x134>
 8001210:	200001e0 	.word	0x200001e0
 8001214:	447a0000 	.word	0x447a0000

08001218 <USB_AudioRecordingSessionStop.isra.0>:
static int8_t  USB_AudioRecordingSessionStop(AUDIO_USBSession_t *rec_session)
 8001218:	b538      	push	{r3, r4, r5, lr}
  if( rec_session->session.state == AUDIO_SESSION_STARTED)
 800121a:	7803      	ldrb	r3, [r0, #0]
static int8_t  USB_AudioRecordingSessionStop(AUDIO_USBSession_t *rec_session)
 800121c:	4605      	mov	r5, r0
  if( rec_session->session.state == AUDIO_SESSION_STARTED)
 800121e:	2b02      	cmp	r3, #2
 8001220:	d110      	bne.n	8001244 <USB_AudioRecordingSessionStop.isra.0+0x2c>
    RecordingUSBOutputNode.IOStop((uint32_t)&RecordingUSBOutputNode);
 8001222:	4c09      	ldr	r4, [pc, #36]	; (8001248 <USB_AudioRecordingSessionStop.isra.0+0x30>)
 8001224:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8001228:	f504 7064 	add.w	r0, r4, #912	; 0x390
 800122c:	4798      	blx	r3
    RecordingFeatureUnitNode.CFStop((uint32_t)&RecordingFeatureUnitNode);
 800122e:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 8001232:	f504 7071 	add.w	r0, r4, #964	; 0x3c4
 8001236:	4798      	blx	r3
    RecordingMicrophoneNode.MicStop((uint32_t)&RecordingMicrophoneNode);
 8001238:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800123a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800123e:	4798      	blx	r3
    rec_session->session.state = AUDIO_SESSION_STOPPED;
 8001240:	2303      	movs	r3, #3
 8001242:	702b      	strb	r3, [r5, #0]
}
 8001244:	2000      	movs	r0, #0
 8001246:	bd38      	pop	{r3, r4, r5, pc}
 8001248:	200001e0 	.word	0x200001e0

0800124c <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting>:
{
 800124c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001250:	460d      	mov	r5, r1
 8001252:	b085      	sub	sp, #20
 8001254:	7c4e      	ldrb	r6, [r1, #17]
  if(alternate  ==  0)
 8001256:	4680      	mov	r8, r0
 8001258:	b948      	cbnz	r0, 800126e <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0x22>
    if(rec_session->alternate != 0)
 800125a:	b126      	cbz	r6, 8001266 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0x1a>
      USB_AudioRecordingSessionStop(rec_session);
 800125c:	1d08      	adds	r0, r1, #4
 800125e:	f7ff ffdb 	bl	8001218 <USB_AudioRecordingSessionStop.isra.0>
      rec_session->alternate = alternate;
 8001262:	f885 8011 	strb.w	r8, [r5, #17]
}
 8001266:	2000      	movs	r0, #0
 8001268:	b005      	add	sp, #20
 800126a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(rec_session->alternate  ==  0)
 800126e:	2e00      	cmp	r6, #0
 8001270:	d1f9      	bne.n	8001266 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0x1a>
  if(( rec_session->session.state == AUDIO_SESSION_INITIALIZED)
 8001272:	790b      	ldrb	r3, [r1, #4]
 8001274:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001278:	2b01      	cmp	r3, #1
 800127a:	d1f2      	bne.n	8001262 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0x16>
    commands.private_data = (uint32_t)&RecordingMicrophoneNode;
 800127c:	4c11      	ldr	r4, [pc, #68]	; (80012c4 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0x78>)
    commands.SetMute = RecordingMicrophoneNode.MicMute;
 800127e:	f10d 0910 	add.w	r9, sp, #16
    RecordingMicrophoneNode.MicStart(&rec_session->buffer, (uint32_t)&RecordingMicrophoneNode);
 8001282:	f105 0714 	add.w	r7, r5, #20
    commands.SetCurrentVolume = RecordingMicrophoneNode.MicSetVolume;
 8001286:	6e23      	ldr	r3, [r4, #96]	; 0x60
    commands.private_data = (uint32_t)&RecordingMicrophoneNode;
 8001288:	f104 0130 	add.w	r1, r4, #48	; 0x30
    RecordingMicrophoneNode.MicStart(&rec_session->buffer, (uint32_t)&RecordingMicrophoneNode);
 800128c:	4638      	mov	r0, r7
    RecordingSynchronizationParams.status = 0;
 800128e:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
    commands.SetCurrentVolume = RecordingMicrophoneNode.MicSetVolume;
 8001292:	9302      	str	r3, [sp, #8]
    commands.SetMute = RecordingMicrophoneNode.MicMute;
 8001294:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    commands.private_data = (uint32_t)&RecordingMicrophoneNode;
 8001296:	9103      	str	r1, [sp, #12]
    commands.SetMute = RecordingMicrophoneNode.MicMute;
 8001298:	f849 3d0c 	str.w	r3, [r9, #-12]!
    rec_session->buffer.rd_ptr = rec_session->buffer.wr_ptr = 0;
 800129c:	61ae      	str	r6, [r5, #24]
    RecordingMicrophoneNode.MicStart(&rec_session->buffer, (uint32_t)&RecordingMicrophoneNode);
 800129e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80012a0:	4798      	blx	r3
    RecordingFeatureUnitNode.CFStart(&commands, (uint32_t)&RecordingFeatureUnitNode);
 80012a2:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
 80012a6:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80012aa:	4648      	mov	r0, r9
 80012ac:	4798      	blx	r3
    RecordingUSBOutputNode.IOStart(&rec_session->buffer, 0, (uint32_t)&RecordingUSBOutputNode);
 80012ae:	f8d4 33b4 	ldr.w	r3, [r4, #948]	; 0x3b4
 80012b2:	f504 7264 	add.w	r2, r4, #912	; 0x390
 80012b6:	4631      	mov	r1, r6
 80012b8:	4638      	mov	r0, r7
 80012ba:	4798      	blx	r3
    rec_session->session.state = AUDIO_SESSION_STARTED; 
 80012bc:	2302      	movs	r3, #2
 80012be:	712b      	strb	r3, [r5, #4]
 80012c0:	e7cf      	b.n	8001262 <USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting+0x16>
 80012c2:	bf00      	nop
 80012c4:	200001e0 	.word	0x200001e0

080012c8 <USB_AudioRecordingSessionDeInit>:
{
 80012c8:	b538      	push	{r3, r4, r5, lr}
  if( rec_session->session.state != AUDIO_SESSION_OFF)
 80012ca:	7903      	ldrb	r3, [r0, #4]
{
 80012cc:	4605      	mov	r5, r0
  if( rec_session->session.state != AUDIO_SESSION_OFF)
 80012ce:	b1cb      	cbz	r3, 8001304 <USB_AudioRecordingSessionDeInit+0x3c>
    if( rec_session->session.state == AUDIO_SESSION_STARTED)
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d102      	bne.n	80012da <USB_AudioRecordingSessionDeInit+0x12>
      USB_AudioRecordingSessionStop( rec_session);
 80012d4:	3004      	adds	r0, #4
 80012d6:	f7ff ff9f 	bl	8001218 <USB_AudioRecordingSessionStop.isra.0>
    RecordingMicrophoneNode.MicDeInit((uint32_t)&RecordingMicrophoneNode);
 80012da:	4c0b      	ldr	r4, [pc, #44]	; (8001308 <USB_AudioRecordingSessionDeInit+0x40>)
 80012dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012de:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80012e2:	4798      	blx	r3
    RecordingUSBOutputNode.IODeInit((uint32_t)&RecordingUSBOutputNode);
 80012e4:	f8d4 33b0 	ldr.w	r3, [r4, #944]	; 0x3b0
 80012e8:	f504 7064 	add.w	r0, r4, #912	; 0x390
 80012ec:	4798      	blx	r3
    RecordingFeatureUnitNode.CFDeInit((uint32_t)&RecordingFeatureUnitNode);
 80012ee:	f8d4 3408 	ldr.w	r3, [r4, #1032]	; 0x408
 80012f2:	f504 7071 	add.w	r0, r4, #964	; 0x3c4
 80012f6:	4798      	blx	r3
    if( rec_session->buffer.data)
 80012f8:	6968      	ldr	r0, [r5, #20]
 80012fa:	b108      	cbz	r0, 8001300 <USB_AudioRecordingSessionDeInit+0x38>
      free( rec_session->buffer.data);
 80012fc:	f006 f842 	bl	8007384 <free>
    rec_session->session.state = AUDIO_SESSION_OFF;
 8001300:	2300      	movs	r3, #0
 8001302:	712b      	strb	r3, [r5, #4]
}
 8001304:	2000      	movs	r0, #0
 8001306:	bd38      	pop	{r3, r4, r5, pc}
 8001308:	200001e0 	.word	0x200001e0

0800130c <USB_AudioRecordingSynchroInit.isra.1>:
  RecordingSynchronizationParams.packet_size = packet_length;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <USB_AudioRecordingSynchroInit.isra.1+0x48>)
static void USB_AudioRecordingSynchroInit(AUDIO_CircularBuffer_t *buf, uint32_t packet_length)
 800130e:	b510      	push	{r4, lr}
  RecordingSynchronizationParams.sample_size = AUDIO_SAMPLE_LENGTH(&RecordingAudioDescription);
 8001310:	f893 2380 	ldrb.w	r2, [r3, #896]	; 0x380
 8001314:	f893 438d 	ldrb.w	r4, [r3, #909]	; 0x38d
  RecordingSynchronizationParams.packet_size = packet_length;
 8001318:	8459      	strh	r1, [r3, #34]	; 0x22
  RecordingSynchronizationParams.sample_per_s_th = packet_length>>1;
 800131a:	0849      	lsrs	r1, r1, #1
  RecordingSynchronizationParams.sample_size = AUDIO_SAMPLE_LENGTH(&RecordingAudioDescription);
 800131c:	fb12 f204 	smulbb	r2, r2, r4
  RecordingSynchronizationParams.sample_per_s_th = packet_length>>1;
 8001320:	6259      	str	r1, [r3, #36]	; 0x24
  RecordingSynchronizationParams.sample_size = AUDIO_SAMPLE_LENGTH(&RecordingAudioDescription);
 8001322:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  RecordingSynchronizationParams.buffer_fill_max_th = buf->size*3/4;
 8001326:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800132a:	1092      	asrs	r2, r2, #2
 800132c:	851a      	strh	r2, [r3, #40]	; 0x28
  RecordingSynchronizationParams.buffer_fill_min_th = buf->size/4;
 800132e:	0882      	lsrs	r2, r0, #2
  RecordingSynchronizationParams.buffer_fill_moy = buf->size>>1;
 8001330:	0840      	lsrs	r0, r0, #1
  RecordingSynchronizationParams.buffer_fill_min_th = buf->size/4;
 8001332:	855a      	strh	r2, [r3, #42]	; 0x2a
  RecordingSynchronizationParams.current_frequency = RecordingAudioDescription.frequency;
 8001334:	f8d3 237c 	ldr.w	r2, [r3, #892]	; 0x37c
  RecordingSynchronizationParams.buffer_fill_moy = buf->size>>1;
 8001338:	8598      	strh	r0, [r3, #44]	; 0x2c
  RecordingSynchronizationParams.current_frequency = RecordingAudioDescription.frequency;
 800133a:	601a      	str	r2, [r3, #0]
  RecordingSynchronizationParams.mic_estimated_freq = 0;
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  RecordingSynchronizationParams.write_count_without_read = 0;
 8001340:	f883 2020 	strb.w	r2, [r3, #32]
  RecordingSynchronizationParams.mic_usb_diff = 0;
 8001344:	61da      	str	r2, [r3, #28]
  RecordingSynchronizationParams.samples = 0;
 8001346:	60da      	str	r2, [r3, #12]
  RecordingSynchronizationParams.sof_counter = 0;
 8001348:	831a      	strh	r2, [r3, #24]
  RecordingSynchronizationParams.written_in_current_second = 0;
 800134a:	615a      	str	r2, [r3, #20]
  RecordingSynchronizationParams.status = AUDIO_SYNC_STARTED;
 800134c:	2201      	movs	r2, #1
 800134e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 8001352:	bd10      	pop	{r4, pc}
 8001354:	200001e0 	.word	0x200001e0

08001358 <USB_AudioRecordingSessionCallback>:
  switch(event)
 8001358:	1e43      	subs	r3, r0, #1
{
 800135a:	b570      	push	{r4, r5, r6, lr}
 800135c:	4614      	mov	r4, r2
  switch(event)
 800135e:	2b07      	cmp	r3, #7
 8001360:	d82a      	bhi.n	80013b8 <USB_AudioRecordingSessionCallback+0x60>
 8001362:	e8df f003 	tbb	[pc, r3]
 8001366:	455f      	.short	0x455f
 8001368:	292b2b5a 	.word	0x292b2b5a
 800136c:	0429      	.short	0x0429
      RecordingMicrophoneNode.MicChangeFrequency((uint32_t)&RecordingMicrophoneNode);
 800136e:	4d31      	ldr	r5, [pc, #196]	; (8001434 <USB_AudioRecordingSessionCallback+0xdc>)
 8001370:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001372:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8001376:	4798      	blx	r3
       USB_AudioRecordingSynchroInit(&rec_session->buffer, RecordingUSBOutputNode.packet_length);
 8001378:	f8b5 13ae 	ldrh.w	r1, [r5, #942]	; 0x3ae
 800137c:	8ba0      	ldrh	r0, [r4, #28]
 800137e:	f7ff ffc5 	bl	800130c <USB_AudioRecordingSynchroInit.isra.1>
                                AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) ,
 8001382:	f8d5 137c 	ldr.w	r1, [r5, #892]	; 0x37c
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 8001386:	f895 338d 	ldrb.w	r3, [r5, #909]	; 0x38d
                                AUDIO_MS_MAX_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800138a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800138e:	f895 2380 	ldrb.w	r2, [r5, #896]	; 0x380
 8001392:	435a      	muls	r2, r3
                                AUDIO_MS_MAX_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 8001394:	f201 33e7 	addw	r3, r1, #999	; 0x3e7
                                AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) ,
 8001398:	fbb1 f1f0 	udiv	r1, r1, r0
                                AUDIO_MS_MAX_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 800139c:	fbb3 f3f0 	udiv	r3, r3, r0
USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 80013a0:	fb13 f302 	smulbb	r3, r3, r2
 80013a4:	f104 0014 	add.w	r0, r4, #20
 80013a8:	fb11 f202 	smulbb	r2, r1, r2
 80013ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	b292      	uxth	r2, r2
 80013b4:	f7ff fe02 	bl	8000fbc <USB_AudioStreamingInitializeDataBuffer>
}
 80013b8:	2000      	movs	r0, #0
 80013ba:	bd70      	pop	{r4, r5, r6, pc}
      if(event == AUDIO_OVERRUN)
 80013bc:	2804      	cmp	r0, #4
 80013be:	4d1d      	ldr	r5, [pc, #116]	; (8001434 <USB_AudioRecordingSessionCallback+0xdc>)
      USB_AudioRecordingSynchroInit(&rec_session->buffer, RecordingUSBOutputNode.packet_length);
 80013c0:	8ba0      	ldrh	r0, [r4, #28]
        overrun_count++;
 80013c2:	bf0b      	itete	eq
 80013c4:	f8d5 3418 	ldreq.w	r3, [r5, #1048]	; 0x418
        underrun_count++;
 80013c8:	f8d5 341c 	ldrne.w	r3, [r5, #1052]	; 0x41c
        overrun_count++;
 80013cc:	3301      	addeq	r3, #1
        underrun_count++;
 80013ce:	3301      	addne	r3, #1
        overrun_count++;
 80013d0:	bf0c      	ite	eq
 80013d2:	f8c5 3418 	streq.w	r3, [r5, #1048]	; 0x418
        underrun_count++;
 80013d6:	f8c5 341c 	strne.w	r3, [r5, #1052]	; 0x41c
          rec_session->buffer.rd_ptr = rec_session->buffer.wr_ptr = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	61a3      	str	r3, [r4, #24]
      USB_AudioRecordingSynchroInit(&rec_session->buffer, RecordingUSBOutputNode.packet_length);
 80013de:	f8b5 13ae 	ldrh.w	r1, [r5, #942]	; 0x3ae
 80013e2:	f7ff ff93 	bl	800130c <USB_AudioRecordingSynchroInit.isra.1>
      RecordingUSBOutputNode.IORestart((uint32_t)&RecordingUSBOutputNode);
 80013e6:	f8d5 33b8 	ldr.w	r3, [r5, #952]	; 0x3b8
 80013ea:	4813      	ldr	r0, [pc, #76]	; (8001438 <USB_AudioRecordingSessionCallback+0xe0>)
 80013ec:	4798      	blx	r3
    break;
 80013ee:	e7e3      	b.n	80013b8 <USB_AudioRecordingSessionCallback+0x60>
    if(++RecordingSynchronizationParams.write_count_without_read == 4)
 80013f0:	4d10      	ldr	r5, [pc, #64]	; (8001434 <USB_AudioRecordingSessionCallback+0xdc>)
 80013f2:	f895 3020 	ldrb.w	r3, [r5, #32]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	f885 3020 	strb.w	r3, [r5, #32]
 8001400:	d1da      	bne.n	80013b8 <USB_AudioRecordingSessionCallback+0x60>
        rec_session->buffer.rd_ptr = rec_session->buffer.wr_ptr = 0;
 8001402:	2600      	movs	r6, #0
        RecordingUSBOutputNode.IORestart((uint32_t)&RecordingUSBOutputNode);
 8001404:	f8d5 33b8 	ldr.w	r3, [r5, #952]	; 0x3b8
 8001408:	f505 7064 	add.w	r0, r5, #912	; 0x390
        rec_session->buffer.rd_ptr = rec_session->buffer.wr_ptr = 0;
 800140c:	61a6      	str	r6, [r4, #24]
        RecordingSynchronizationParams.status = 0;
 800140e:	f885 602e 	strb.w	r6, [r5, #46]	; 0x2e
        RecordingUSBOutputNode.IORestart((uint32_t)&RecordingUSBOutputNode);
 8001412:	4798      	blx	r3
        RecordingSynchronizationParams.write_count_without_read = 0;
 8001414:	f885 6020 	strb.w	r6, [r5, #32]
 8001418:	e7ce      	b.n	80013b8 <USB_AudioRecordingSessionCallback+0x60>
    RecordingSynchronizationParams.write_count_without_read = 0;
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <USB_AudioRecordingSessionCallback+0xdc>)
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2020 	strb.w	r2, [r3, #32]
    break;
 8001422:	e7c9      	b.n	80013b8 <USB_AudioRecordingSessionCallback+0x60>
    USB_AudioRecordingSynchroInit(&rec_session->buffer, RecordingUSBOutputNode.packet_length);
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <USB_AudioRecordingSessionCallback+0xdc>)
 8001426:	8ba0      	ldrh	r0, [r4, #28]
 8001428:	f8b3 13ae 	ldrh.w	r1, [r3, #942]	; 0x3ae
 800142c:	f7ff ff6e 	bl	800130c <USB_AudioRecordingSynchroInit.isra.1>
    break;
 8001430:	e7c2      	b.n	80013b8 <USB_AudioRecordingSessionCallback+0x60>
 8001432:	bf00      	nop
 8001434:	200001e0 	.word	0x200001e0
 8001438:	20000570 	.word	0x20000570

0800143c <AUDIO_RecordingSessionInit>:
{
 800143c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001440:	4690      	mov	r8, r2
 8001442:	b085      	sub	sp, #20
 8001444:	4606      	mov	r6, r0
 8001446:	468a      	mov	sl, r1
  memset(rec_session, 0, sizeof(AUDIO_USBSession_t));
 8001448:	2220      	movs	r2, #32
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
{
 800144e:	461d      	mov	r5, r3
  memset(rec_session, 0, sizeof(AUDIO_USBSession_t));
 8001450:	f005 ffab 	bl	80073aa <memset>
  rec_session->SessionDeInit = USB_AudioRecordingSessionDeInit;
 8001454:	4a3a      	ldr	r2, [pc, #232]	; (8001540 <AUDIO_RecordingSessionInit+0x104>)
  RecordingAudioDescription.audio_type = USBD_AUDIO_FORMAT_TYPE_PCM;
 8001456:	4c3b      	ldr	r4, [pc, #236]	; (8001544 <AUDIO_RecordingSessionInit+0x108>)
  rec_session->interface_num = USBD_AUDIO_CONFIG_RECORD_SA_INTERFACE;
 8001458:	2301      	movs	r3, #1
  rec_session->SessionDeInit = USB_AudioRecordingSessionDeInit;
 800145a:	60ea      	str	r2, [r5, #12]
  AUDIO_MicInit(&RecordingAudioDescription, &rec_session->session, (uint32_t)&RecordingMicrophoneNode);
 800145c:	4629      	mov	r1, r5
  rec_session->session.SessionCallback = USB_AudioRecordingSessionCallback;
 800145e:	4a3a      	ldr	r2, [pc, #232]	; (8001548 <AUDIO_RecordingSessionInit+0x10c>)
  AUDIO_MicInit(&RecordingAudioDescription, &rec_session->session, (uint32_t)&RecordingMicrophoneNode);
 8001460:	f504 775f 	add.w	r7, r4, #892	; 0x37c
  rec_session->interface_num = USBD_AUDIO_CONFIG_RECORD_SA_INTERFACE;
 8001464:	822b      	strh	r3, [r5, #16]
  AUDIO_MicInit(&RecordingAudioDescription, &rec_session->session, (uint32_t)&RecordingMicrophoneNode);
 8001466:	f104 0b30 	add.w	fp, r4, #48	; 0x30
  rec_session->session.SessionCallback = USB_AudioRecordingSessionCallback;
 800146a:	60aa      	str	r2, [r5, #8]
  RecordingAudioDescription.audio_volume_db_256 = DEFAULT_VOLUME_DB_256;
 800146c:	f44f 7200 	mov.w	r2, #512	; 0x200
  RecordingAudioDescription.audio_type = USBD_AUDIO_FORMAT_TYPE_PCM;
 8001470:	f8a4 3384 	strh.w	r3, [r4, #900]	; 0x384
  RecordingAudioDescription.channels_count = USB_AUDIO_CONFIG_RECORD_CHANNEL_COUNT;
 8001474:	2302      	movs	r3, #2
  USB_AudioStreamingOutputInit(&as_desc->data_ep,  
 8001476:	f504 7964 	add.w	r9, r4, #912	; 0x390
  RecordingAudioDescription.audio_volume_db_256 = DEFAULT_VOLUME_DB_256;
 800147a:	f8a4 238c 	strh.w	r2, [r4, #908]	; 0x38c
  RecordingAudioDescription.channels_count = USB_AUDIO_CONFIG_RECORD_CHANNEL_COUNT;
 800147e:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
  RecordingAudioDescription.channels_map = USB_AUDIO_CONFIG_RECORD_CHANNEL_MAP; 
 8001482:	2303      	movs	r3, #3
  AUDIO_MicInit(&RecordingAudioDescription, &rec_session->session, (uint32_t)&RecordingMicrophoneNode);
 8001484:	465a      	mov	r2, fp
 8001486:	4638      	mov	r0, r7
  RecordingAudioDescription.channels_map = USB_AUDIO_CONFIG_RECORD_CHANNEL_MAP; 
 8001488:	f8a4 3382 	strh.w	r3, [r4, #898]	; 0x382
  RecordingAudioDescription.frequency = USB_AUDIO_CONFIG_RECORD_DEF_FREQ;
 800148c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001490:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
  RecordingAudioDescription.audio_volume_db_256 = DEFAULT_VOLUME_DB_256;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c4 3388 	str.w	r3, [r4, #904]	; 0x388
  *control_count = 0;
 800149a:	f888 3000 	strb.w	r3, [r8]
  AUDIO_MicInit(&RecordingAudioDescription, &rec_session->session, (uint32_t)&RecordingMicrophoneNode);
 800149e:	f001 fcfb 	bl	8002e98 <AUDIO_DFSDM_MEMS_MicInit>
  USB_AudioStreamingOutputInit(&as_desc->data_ep,  
 80014a2:	4639      	mov	r1, r7
 80014a4:	464b      	mov	r3, r9
 80014a6:	462a      	mov	r2, r5
  rec_session->session.node_list = (AUDIO_Node_t*)&RecordingMicrophoneNode;
 80014a8:	f8c5 b000 	str.w	fp, [r5]
  USB_AudioStreamingOutputInit(&as_desc->data_ep,  
 80014ac:	1d30      	adds	r0, r6, #4
 80014ae:	f7ff fd39 	bl	8000f24 <USB_AudioStreamingOutputInit>
  controller_defaults.audio_description = &RecordingAudioDescription;
 80014b2:	9703      	str	r7, [sp, #12]
  RecordingMicrophoneNode.MicGetVolumeDefaultsValues(&controller_defaults.max_volume,
 80014b4:	465b      	mov	r3, fp
 80014b6:	6e67      	ldr	r7, [r4, #100]	; 0x64
 80014b8:	aa02      	add	r2, sp, #8
 80014ba:	a901      	add	r1, sp, #4
 80014bc:	4668      	mov	r0, sp
 80014be:	47b8      	blx	r7
  USB_AudioStreamingFeatureUnitInit(controls_desc,  &controller_defaults,
 80014c0:	f504 7771 	add.w	r7, r4, #964	; 0x3c4
 80014c4:	2215      	movs	r2, #21
 80014c6:	4669      	mov	r1, sp
 80014c8:	463b      	mov	r3, r7
 80014ca:	4650      	mov	r0, sl
 80014cc:	f7ff fc74 	bl	8000db8 <USB_AudioStreamingFeatureUnitInit>
 (*control_count)++;
 80014d0:	f898 3000 	ldrb.w	r3, [r8]
  rec_session->buffer.data = malloc(USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE);
 80014d4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 (*control_count)++;
 80014d8:	3301      	adds	r3, #1
 80014da:	f888 3000 	strb.w	r3, [r8]
  RecordingMicrophoneNode.node.next = (AUDIO_Node_t*)&RecordingFeatureUnitNode;
 80014de:	6427      	str	r7, [r4, #64]	; 0x40
  RecordingFeatureUnitNode.node.next = (AUDIO_Node_t*)&RecordingUSBOutputNode;
 80014e0:	f8c4 93d4 	str.w	r9, [r4, #980]	; 0x3d4
  rec_session->buffer.data = malloc(USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE);
 80014e4:	f005 ff46 	bl	8007374 <malloc>
 80014e8:	6168      	str	r0, [r5, #20]
  if(!rec_session->buffer.data)
 80014ea:	b908      	cbnz	r0, 80014f0 <AUDIO_RecordingSessionInit+0xb4>
    Error_Handler();
 80014ec:	f001 fda4 	bl	8003038 <Error_Handler>
  USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 80014f0:	f894 238d 	ldrb.w	r2, [r4, #909]	; 0x38d
                                   AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) , AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 80014f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 80014f8:	f894 3380 	ldrb.w	r3, [r4, #896]	; 0x380
 80014fc:	f105 0014 	add.w	r0, r5, #20
 8001500:	fb13 f302 	smulbb	r3, r3, r2
                                   AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription) , AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(&RecordingAudioDescription));
 8001504:	f8d4 237c 	ldr.w	r2, [r4, #892]	; 0x37c
 8001508:	fbb2 f2f1 	udiv	r2, r2, r1
  USB_AudioStreamingInitializeDataBuffer(&rec_session->buffer, USB_AUDIO_CONFIG_RECORD_BUFFER_SIZE,
 800150c:	fb13 f302 	smulbb	r3, r3, r2
 8001510:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001514:	b29b      	uxth	r3, r3
 8001516:	461a      	mov	r2, r3
 8001518:	f7ff fd50 	bl	8000fbc <USB_AudioStreamingInitializeDataBuffer>
  as_desc->SetAS_Alternate = USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting;
 800151c:	4a0b      	ldr	r2, [pc, #44]	; (800154c <AUDIO_RecordingSessionInit+0x110>)
  as_desc->interface_num = rec_session->interface_num;
 800151e:	7c2b      	ldrb	r3, [r5, #16]
  as_desc->alternate = 0;
 8001520:	2000      	movs	r0, #0
  as_desc->SetAS_Alternate = USB_AudioRecordingSetAudioStreamingInterfaceAlternateSetting;
 8001522:	62f2      	str	r2, [r6, #44]	; 0x2c
  as_desc->GetState = USB_AudioRecordingGetState;
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <AUDIO_RecordingSessionInit+0x114>)
  as_desc->interface_num = rec_session->interface_num;
 8001526:	7033      	strb	r3, [r6, #0]
  as_desc->max_alternate = AUDIO_USB_RECORDING_ALTERNATE;
 8001528:	2301      	movs	r3, #1
  as_desc->GetState = USB_AudioRecordingGetState;
 800152a:	6332      	str	r2, [r6, #48]	; 0x30
  as_desc->SofReceived = USB_AudioRecordingSofReceived;
 800152c:	4a09      	ldr	r2, [pc, #36]	; (8001554 <AUDIO_RecordingSessionInit+0x118>)
  as_desc->alternate = 0;
 800152e:	70b0      	strb	r0, [r6, #2]
  as_desc->max_alternate = AUDIO_USB_RECORDING_ALTERNATE;
 8001530:	7073      	strb	r3, [r6, #1]
  as_desc->private_data = session_handle;
 8001532:	6375      	str	r5, [r6, #52]	; 0x34
  as_desc->SofReceived = USB_AudioRecordingSofReceived;
 8001534:	62b2      	str	r2, [r6, #40]	; 0x28
  rec_session->session.state = AUDIO_SESSION_INITIALIZED;
 8001536:	712b      	strb	r3, [r5, #4]
}
 8001538:	b005      	add	sp, #20
 800153a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800153e:	bf00      	nop
 8001540:	080012c9 	.word	0x080012c9
 8001544:	200001e0 	.word	0x200001e0
 8001548:	08001359 	.word	0x08001359
 800154c:	0800124d 	.word	0x0800124d
 8001550:	08000fcf 	.word	0x08000fcf
 8001554:	08000fd5 	.word	0x08000fd5

08001558 <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt>:
  * @param  session_handle(IN): session handler
  * @retval sample to add(positive value) or remove (negative value)
  */
int8_t  USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt(struct  AUDIO_Session* session_handle)
{
   if(RecordingSynchronizationParams.status&AUDIO_SYNC_STARTED)
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <USB_AudioRecordingSynchronizationGetSamplesCountToAddInNextPckt+0x14>)
 800155a:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
 800155e:	f010 0001 	ands.w	r0, r0, #1
   {
     return RecordingSynchronizationParams.samples;
 8001562:	bf18      	it	ne
 8001564:	f993 000c 	ldrsbne.w	r0, [r3, #12]
   }
   return 0;
}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	200001e0 	.word	0x200001e0

08001570 <USB_AudioRecordingSynchronizationNotificationSamplesRead>:
  * @param  session_handle: session handles
  * @retval bytes : written or read
  */
 int8_t  USB_AudioRecordingSynchronizationNotificationSamplesRead(struct AUDIO_Session* session_handle, uint16_t bytes)
{
   if(RecordingSynchronizationParams.status&AUDIO_SYNC_STARTED)
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <USB_AudioRecordingSynchronizationNotificationSamplesRead+0x14>)
   {
     RecordingSynchronizationParams.mic_usb_diff -= bytes;
   }
   return 0;
}
 8001572:	2000      	movs	r0, #0
   if(RecordingSynchronizationParams.status&AUDIO_SYNC_STARTED)
 8001574:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8001578:	07d2      	lsls	r2, r2, #31
     RecordingSynchronizationParams.mic_usb_diff -= bytes;
 800157a:	bf42      	ittt	mi
 800157c:	69da      	ldrmi	r2, [r3, #28]
 800157e:	1a52      	submi	r2, r2, r1
 8001580:	61da      	strmi	r2, [r3, #28]
}
 8001582:	4770      	bx	lr
 8001584:	200001e0 	.word	0x200001e0

08001588 <USB_AUDIO_GetConfigDescriptor>:
  * @param  desc                             
  * @retval the configuration descriptor size
  */
uint16_t USB_AUDIO_GetConfigDescriptor(uint8_t **desc)
{ 
  if(desc)
 8001588:	b108      	cbz	r0, 800158e <USB_AUDIO_GetConfigDescriptor+0x6>
  {
    *desc = USBD_AUDIO_ConfigDescriptor;
 800158a:	4b02      	ldr	r3, [pc, #8]	; (8001594 <USB_AUDIO_GetConfigDescriptor+0xc>)
 800158c:	6003      	str	r3, [r0, #0]
  }
  return (CONFIG_DESCRIPTOR_SIZE);
}
 800158e:	206e      	movs	r0, #110	; 0x6e
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000044 	.word	0x20000044

08001598 <AUDIO_USB_DeInit>:
  * @param  private_data:  for future usage
  * @retval status 0 if no error
  */

static int8_t  AUDIO_USB_DeInit(USBD_AUDIO_FunctionDescriptionfTypeDef* audio_function, uint32_t private_data)
{
 8001598:	b510      	push	{r4, lr}
 800159a:	4604      	mov	r4, r0
  USB_AudioPlabackSession.SessionDeInit( (uint32_t) &USB_AudioPlabackSession);
  audio_function->as_interfaces[0].alternate = 0;
  i++;
#endif /* USE_USB_AUDIO_PLAYBACK*/
#if  USE_USB_AUDIO_RECORDING
  USB_AudioRecordingSession.SessionDeInit((uint32_t) &USB_AudioRecordingSession);
 800159c:	4803      	ldr	r0, [pc, #12]	; (80015ac <AUDIO_USB_DeInit+0x14>)
 800159e:	68c3      	ldr	r3, [r0, #12]
 80015a0:	4798      	blx	r3
  audio_function->as_interfaces[i].alternate = 0;
 80015a2:	2000      	movs	r0, #0
 80015a4:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
#endif /* USE_USB_AUDIO_RECORDING*/
  
  return 0;
}
 80015a8:	bd10      	pop	{r4, pc}
 80015aa:	bf00      	nop
 80015ac:	200007d0 	.word	0x200007d0

080015b0 <AUDIO_USB_GetState>:
  * @retval status
  */
static int8_t  AUDIO_USB_GetState(uint32_t private_data)
{
  return 0;
}
 80015b0:	2000      	movs	r0, #0
 80015b2:	4770      	bx	lr

080015b4 <AUDIO_USB_GetConfigDesc>:
  * @param  psize:  configuration descriptor length
  * @param  private_data:  for future usage
  * @retval status
  */
static int8_t  AUDIO_USB_GetConfigDesc (uint8_t ** pdata, uint16_t * psize, uint32_t private_data)
{
 80015b4:	b510      	push	{r4, lr}
 80015b6:	460c      	mov	r4, r1
   *psize =  USB_AUDIO_GetConfigDescriptor(pdata);
 80015b8:	f7ff ffe6 	bl	8001588 <USB_AUDIO_GetConfigDescriptor>
 80015bc:	8020      	strh	r0, [r4, #0]
    return 0;
}
 80015be:	2000      	movs	r0, #0
 80015c0:	bd10      	pop	{r4, pc}
	...

080015c4 <AUDIO_USB_Init>:
{
 80015c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t control_count = 0;
 80015c6:	2500      	movs	r5, #0
 80015c8:	aa02      	add	r2, sp, #8
{
 80015ca:	4604      	mov	r4, r0
  AUDIO_RecordingSessionInit(&usb_audio_class_function->as_interfaces[interface_offset], &(usb_audio_class_function->controls[total_control_count]), &control_count, (uint32_t) &USB_AudioRecordingSession);
 80015cc:	1d01      	adds	r1, r0, #4
  uint8_t control_count = 0;
 80015ce:	f802 5d01 	strb.w	r5, [r2, #-1]!
  AUDIO_RecordingSessionInit(&usb_audio_class_function->as_interfaces[interface_offset], &(usb_audio_class_function->controls[total_control_count]), &control_count, (uint32_t) &USB_AudioRecordingSession);
 80015d2:	3024      	adds	r0, #36	; 0x24
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <AUDIO_USB_Init+0x28>)
 80015d6:	f7ff ff31 	bl	800143c <AUDIO_RecordingSessionInit>
  total_control_count += control_count;
 80015da:	f89d 3007 	ldrb.w	r3, [sp, #7]
  usb_audio_class_function->as_interfaces_count = interface_offset;
 80015de:	2201      	movs	r2, #1
}
 80015e0:	4628      	mov	r0, r5
  usb_audio_class_function->control_count = total_control_count;
 80015e2:	7023      	strb	r3, [r4, #0]
  usb_audio_class_function->as_interfaces_count = interface_offset;
 80015e4:	7062      	strb	r2, [r4, #1]
}
 80015e6:	b003      	add	sp, #12
 80015e8:	bd30      	pop	{r4, r5, pc}
 80015ea:	bf00      	nop
 80015ec:	200007d0 	.word	0x200007d0

080015f0 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 80015f0:	2901      	cmp	r1, #1
{
 80015f2:	b510      	push	{r4, lr}
 80015f4:	b2c4      	uxtb	r4, r0
  switch (Output) 
 80015f6:	d00f      	beq.n	8001618 <wm8994_SetOutputMode+0x28>
 80015f8:	2903      	cmp	r1, #3
 80015fa:	d12d      	bne.n	8001658 <wm8994_SetOutputMode+0x68>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80015fc:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001600:	2105      	movs	r1, #5
 8001602:	4620      	mov	r0, r4
 8001604:	f002 f884 	bl	8003710 <AUDIO_IO_Write>
 8001608:	2201      	movs	r2, #1
 800160a:	f240 6101 	movw	r1, #1537	; 0x601
 800160e:	4620      	mov	r0, r4
 8001610:	f002 f87e 	bl	8003710 <AUDIO_IO_Write>
 8001614:	2201      	movs	r2, #1
 8001616:	e00c      	b.n	8001632 <wm8994_SetOutputMode+0x42>
 8001618:	f640 420c 	movw	r2, #3084	; 0xc0c
 800161c:	2105      	movs	r1, #5
 800161e:	4620      	mov	r0, r4
 8001620:	f002 f876 	bl	8003710 <AUDIO_IO_Write>
 8001624:	2200      	movs	r2, #0
 8001626:	f240 6101 	movw	r1, #1537	; 0x601
 800162a:	4620      	mov	r0, r4
 800162c:	f002 f870 	bl	8003710 <AUDIO_IO_Write>
 8001630:	2200      	movs	r2, #0
 8001632:	f240 6102 	movw	r1, #1538	; 0x602
 8001636:	4620      	mov	r0, r4
 8001638:	f002 f86a 	bl	8003710 <AUDIO_IO_Write>
 800163c:	2202      	movs	r2, #2
 800163e:	f240 6104 	movw	r1, #1540	; 0x604
 8001642:	4620      	mov	r0, r4
 8001644:	f002 f864 	bl	8003710 <AUDIO_IO_Write>
 8001648:	2202      	movs	r2, #2
 800164a:	4620      	mov	r0, r4
 800164c:	f240 6105 	movw	r1, #1541	; 0x605
 8001650:	f002 f85e 	bl	8003710 <AUDIO_IO_Write>
}
 8001654:	2000      	movs	r0, #0
 8001656:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8001658:	f240 3203 	movw	r2, #771	; 0x303
 800165c:	2105      	movs	r1, #5
 800165e:	4620      	mov	r0, r4
 8001660:	f002 f856 	bl	8003710 <AUDIO_IO_Write>
 8001664:	2201      	movs	r2, #1
 8001666:	f240 6101 	movw	r1, #1537	; 0x601
 800166a:	4620      	mov	r0, r4
 800166c:	f002 f850 	bl	8003710 <AUDIO_IO_Write>
 8001670:	2201      	movs	r2, #1
 8001672:	f240 6102 	movw	r1, #1538	; 0x602
 8001676:	4620      	mov	r0, r4
 8001678:	f002 f84a 	bl	8003710 <AUDIO_IO_Write>
 800167c:	2200      	movs	r2, #0
 800167e:	f240 6104 	movw	r1, #1540	; 0x604
 8001682:	4620      	mov	r0, r4
 8001684:	f002 f844 	bl	8003710 <AUDIO_IO_Write>
 8001688:	2200      	movs	r2, #0
 800168a:	e7de      	b.n	800164a <wm8994_SetOutputMode+0x5a>

0800168c <wm8994_SetFrequency>:
  switch (AudioFreq)
 800168c:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8001690:	b2c0      	uxtb	r0, r0
{
 8001692:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8001694:	d01d      	beq.n	80016d2 <wm8994_SetFrequency+0x46>
 8001696:	d808      	bhi.n	80016aa <wm8994_SetFrequency+0x1e>
 8001698:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 800169c:	d012      	beq.n	80016c4 <wm8994_SetFrequency+0x38>
 800169e:	f642 3311 	movw	r3, #11025	; 0x2b11
 80016a2:	4299      	cmp	r1, r3
 80016a4:	d019      	beq.n	80016da <wm8994_SetFrequency+0x4e>
 AUDIO_IO_Write(Addr, Reg, Value);
 80016a6:	2283      	movs	r2, #131	; 0x83
 80016a8:	e00d      	b.n	80016c6 <wm8994_SetFrequency+0x3a>
  switch (AudioFreq)
 80016aa:	f64a 4344 	movw	r3, #44100	; 0xac44
 80016ae:	4299      	cmp	r1, r3
 80016b0:	d015      	beq.n	80016de <wm8994_SetFrequency+0x52>
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <wm8994_SetFrequency+0x58>)
 80016b4:	4299      	cmp	r1, r3
 80016b6:	d00e      	beq.n	80016d6 <wm8994_SetFrequency+0x4a>
 80016b8:	f245 6322 	movw	r3, #22050	; 0x5622
 80016bc:	4299      	cmp	r1, r3
 80016be:	d1f2      	bne.n	80016a6 <wm8994_SetFrequency+0x1a>
 AUDIO_IO_Write(Addr, Reg, Value);
 80016c0:	2243      	movs	r2, #67	; 0x43
 80016c2:	e000      	b.n	80016c6 <wm8994_SetFrequency+0x3a>
 80016c4:	2203      	movs	r2, #3
 80016c6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80016ca:	f002 f821 	bl	8003710 <AUDIO_IO_Write>
}
 80016ce:	2000      	movs	r0, #0
 80016d0:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 80016d2:	2233      	movs	r2, #51	; 0x33
 80016d4:	e7f7      	b.n	80016c6 <wm8994_SetFrequency+0x3a>
 80016d6:	22a3      	movs	r2, #163	; 0xa3
 80016d8:	e7f5      	b.n	80016c6 <wm8994_SetFrequency+0x3a>
 80016da:	2213      	movs	r2, #19
 80016dc:	e7f3      	b.n	80016c6 <wm8994_SetFrequency+0x3a>
 80016de:	2273      	movs	r2, #115	; 0x73
 80016e0:	e7f1      	b.n	80016c6 <wm8994_SetFrequency+0x3a>
 80016e2:	bf00      	nop
 80016e4:	00017700 	.word	0x00017700

080016e8 <wm8994_Reset>:
 80016e8:	2200      	movs	r2, #0
 80016ea:	b2c0      	uxtb	r0, r0
{
 80016ec:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 80016ee:	4611      	mov	r1, r2
 80016f0:	f002 f80e 	bl	8003710 <AUDIO_IO_Write>
  outputEnabled = 0;
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <wm8994_Reset+0x18>)
 80016f6:	2000      	movs	r0, #0
  inputEnabled=0;
 80016f8:	e9c3 0000 	strd	r0, r0, [r3]
}
 80016fc:	bd08      	pop	{r3, pc}
 80016fe:	bf00      	nop
 8001700:	20000600 	.word	0x20000600

08001704 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 8001704:	f002 b802 	b.w	800370c <AUDIO_IO_DeInit>

08001708 <wm8994_ReadID>:
{
 8001708:	b510      	push	{r4, lr}
 800170a:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 800170c:	f001 fff8 	bl	8003700 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8001710:	2100      	movs	r1, #0
 8001712:	b2e0      	uxtb	r0, r4
 8001714:	f002 f80e 	bl	8003734 <AUDIO_IO_Read>
}
 8001718:	bd10      	pop	{r4, pc}
	...

0800171c <wm8994_SetMute>:
  if (outputEnabled != 0)
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <wm8994_SetMute+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
{
 8001720:	b510      	push	{r4, lr}
  if (outputEnabled != 0)
 8001722:	b183      	cbz	r3, 8001746 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 8001724:	2901      	cmp	r1, #1
 8001726:	b2c4      	uxtb	r4, r0
 8001728:	d10f      	bne.n	800174a <wm8994_SetMute+0x2e>
 AUDIO_IO_Write(Addr, Reg, Value);
 800172a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800172e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001732:	4620      	mov	r0, r4
 8001734:	f001 ffec 	bl	8003710 <AUDIO_IO_Write>
 8001738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173c:	f240 4122 	movw	r1, #1058	; 0x422
 8001740:	4620      	mov	r0, r4
 8001742:	f001 ffe5 	bl	8003710 <AUDIO_IO_Write>
}
 8001746:	2000      	movs	r0, #0
 8001748:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001750:	4620      	mov	r0, r4
 8001752:	f001 ffdd 	bl	8003710 <AUDIO_IO_Write>
 8001756:	2200      	movs	r2, #0
 8001758:	e7f0      	b.n	800173c <wm8994_SetMute+0x20>
 800175a:	bf00      	nop
 800175c:	20000600 	.word	0x20000600

08001760 <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001760:	2100      	movs	r1, #0
 8001762:	f7ff bfdb 	b.w	800171c <wm8994_SetMute>

08001766 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001766:	2100      	movs	r1, #0
 8001768:	f7ff bfd8 	b.w	800171c <wm8994_SetMute>

0800176c <wm8994_Pause>:
{  
 800176c:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800176e:	2101      	movs	r1, #1
{  
 8001770:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001772:	f7ff ffd3 	bl	800171c <wm8994_SetMute>
 8001776:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8001778:	2201      	movs	r2, #1
 800177a:	b2e8      	uxtb	r0, r5
 800177c:	2102      	movs	r1, #2
 800177e:	f001 ffc7 	bl	8003710 <AUDIO_IO_Write>
}
 8001782:	4620      	mov	r0, r4
 8001784:	bd38      	pop	{r3, r4, r5, pc}
	...

08001788 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001788:	2964      	cmp	r1, #100	; 0x64
{
 800178a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800178e:	f04f 0764 	mov.w	r7, #100	; 0x64
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001792:	bf98      	it	ls
 8001794:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
{
 8001798:	4605      	mov	r5, r0
 800179a:	460c      	mov	r4, r1
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800179c:	bf98      	it	ls
 800179e:	fb93 f7f7 	sdivls	r7, r3, r7
  if (outputEnabled != 0)
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <wm8994_SetVolume+0x100>)
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80017a4:	bf98      	it	ls
 80017a6:	b2ff      	uxtbls	r7, r7
  if (outputEnabled != 0)
 80017a8:	681e      	ldr	r6, [r3, #0]
 80017aa:	4699      	mov	r9, r3
 80017ac:	b326      	cbz	r6, 80017f8 <wm8994_SetVolume+0x70>
    if(convertedvol > 0x3E)
 80017ae:	2f3e      	cmp	r7, #62	; 0x3e
 80017b0:	d91d      	bls.n	80017ee <wm8994_SetVolume+0x66>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80017b2:	b2ef      	uxtb	r7, r5
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80017b4:	2100      	movs	r1, #0
 80017b6:	f7ff ffb1 	bl	800171c <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 80017ba:	f240 127f 	movw	r2, #383	; 0x17f
 80017be:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80017c0:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 80017c2:	4638      	mov	r0, r7
 80017c4:	f001 ffa4 	bl	8003710 <AUDIO_IO_Write>
 80017c8:	f240 127f 	movw	r2, #383	; 0x17f
 80017cc:	211d      	movs	r1, #29
 80017ce:	4638      	mov	r0, r7
 80017d0:	f001 ff9e 	bl	8003710 <AUDIO_IO_Write>
 80017d4:	f240 127f 	movw	r2, #383	; 0x17f
 80017d8:	2126      	movs	r1, #38	; 0x26
 80017da:	4638      	mov	r0, r7
 80017dc:	f001 ff98 	bl	8003710 <AUDIO_IO_Write>
 80017e0:	f240 127f 	movw	r2, #383	; 0x17f
 80017e4:	2127      	movs	r1, #39	; 0x27
 80017e6:	4638      	mov	r0, r7
 80017e8:	f001 ff92 	bl	8003710 <AUDIO_IO_Write>
 80017ec:	e004      	b.n	80017f8 <wm8994_SetVolume+0x70>
    else if (Volume == 0)
 80017ee:	bb79      	cbnz	r1, 8001850 <wm8994_SetVolume+0xc8>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80017f0:	2101      	movs	r1, #1
 80017f2:	f7ff ff93 	bl	800171c <wm8994_SetMute>
 80017f6:	4606      	mov	r6, r0
  if (inputEnabled != 0)
 80017f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017fc:	b32b      	cbz	r3, 800184a <wm8994_SetVolume+0xc2>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80017fe:	2c63      	cmp	r4, #99	; 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8001800:	b2ed      	uxtb	r5, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 8001802:	f44f 6180 	mov.w	r1, #1024	; 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001806:	bf9a      	itte	ls
 8001808:	ebc4 1404 	rsbls	r4, r4, r4, lsl #4
 800180c:	2364      	movls	r3, #100	; 0x64
 800180e:	24ef      	movhi	r4, #239	; 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
 8001810:	4628      	mov	r0, r5
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001812:	bf9e      	ittt	ls
 8001814:	0124      	lslls	r4, r4, #4
 8001816:	fb94 f4f3 	sdivls	r4, r4, r3
 800181a:	b2e4      	uxtbls	r4, r4
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800181c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
 8001820:	4622      	mov	r2, r4
 8001822:	f001 ff75 	bl	8003710 <AUDIO_IO_Write>
 8001826:	4622      	mov	r2, r4
 8001828:	f240 4101 	movw	r1, #1025	; 0x401
 800182c:	4628      	mov	r0, r5
 800182e:	f001 ff6f 	bl	8003710 <AUDIO_IO_Write>
 8001832:	4622      	mov	r2, r4
 8001834:	f240 4104 	movw	r1, #1028	; 0x404
 8001838:	4628      	mov	r0, r5
 800183a:	f001 ff69 	bl	8003710 <AUDIO_IO_Write>
 800183e:	4622      	mov	r2, r4
 8001840:	f240 4105 	movw	r1, #1029	; 0x405
 8001844:	4628      	mov	r0, r5
 8001846:	f001 ff63 	bl	8003710 <AUDIO_IO_Write>
}
 800184a:	4630      	mov	r0, r6
 800184c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001850:	fa5f f885 	uxtb.w	r8, r5
 8001854:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001858:	2100      	movs	r1, #0
 800185a:	f7ff ff5f 	bl	800171c <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 800185e:	463a      	mov	r2, r7
 8001860:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001862:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8001864:	4640      	mov	r0, r8
 8001866:	f001 ff53 	bl	8003710 <AUDIO_IO_Write>
 800186a:	463a      	mov	r2, r7
 800186c:	211d      	movs	r1, #29
 800186e:	4640      	mov	r0, r8
 8001870:	f001 ff4e 	bl	8003710 <AUDIO_IO_Write>
 8001874:	463a      	mov	r2, r7
 8001876:	2126      	movs	r1, #38	; 0x26
 8001878:	4640      	mov	r0, r8
 800187a:	f001 ff49 	bl	8003710 <AUDIO_IO_Write>
 800187e:	463a      	mov	r2, r7
 8001880:	2127      	movs	r1, #39	; 0x27
 8001882:	4640      	mov	r0, r8
 8001884:	e7b0      	b.n	80017e8 <wm8994_SetVolume+0x60>
 8001886:	bf00      	nop
 8001888:	20000600 	.word	0x20000600

0800188c <wm8994_InitExt>:
{
 800188c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001890:	4681      	mov	r9, r0
 8001892:	461f      	mov	r7, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001894:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
{
 8001898:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800189a:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
 800189e:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
 80018a0:	f001 ff2e 	bl	8003700 <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 80018a4:	2203      	movs	r2, #3
 80018a6:	f44f 7181 	mov.w	r1, #258	; 0x102
 80018aa:	4620      	mov	r0, r4
 80018ac:	f001 ff30 	bl	8003710 <AUDIO_IO_Write>
 80018b0:	2200      	movs	r2, #0
 80018b2:	f640 0117 	movw	r1, #2071	; 0x817
 80018b6:	4620      	mov	r0, r4
 80018b8:	f001 ff2a 	bl	8003710 <AUDIO_IO_Write>
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 7181 	mov.w	r1, #258	; 0x102
 80018c2:	4620      	mov	r0, r4
 80018c4:	f001 ff24 	bl	8003710 <AUDIO_IO_Write>
 80018c8:	226c      	movs	r2, #108	; 0x6c
 80018ca:	2139      	movs	r1, #57	; 0x39
 80018cc:	4620      	mov	r0, r4
 80018ce:	f001 ff1f 	bl	8003710 <AUDIO_IO_Write>
  if (input_device > 0)
 80018d2:	b3c5      	cbz	r5, 8001946 <wm8994_InitExt+0xba>
 AUDIO_IO_Write(Addr, Reg, Value);
 80018d4:	2213      	movs	r2, #19
 80018d6:	2101      	movs	r1, #1
 80018d8:	4620      	mov	r0, r4
 80018da:	f001 ff19 	bl	8003710 <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 80018de:	2032      	movs	r0, #50	; 0x32
 80018e0:	f001 ff3e 	bl	8003760 <AUDIO_IO_Delay>
 80018e4:	f8df b490 	ldr.w	fp, [pc, #1168]	; 8001d78 <wm8994_InitExt+0x4ec>
  if (output_device > 0)
 80018e8:	2e00      	cmp	r6, #0
 80018ea:	f000 8082 	beq.w	80019f2 <wm8994_InitExt+0x166>
    outputEnabled = 1;
 80018ee:	f04f 0801 	mov.w	r8, #1
    switch (output_device)
 80018f2:	2e02      	cmp	r6, #2
    outputEnabled = 1;
 80018f4:	f8cb 8000 	str.w	r8, [fp]
    switch (output_device)
 80018f8:	d061      	beq.n	80019be <wm8994_InitExt+0x132>
 80018fa:	2e03      	cmp	r6, #3
 80018fc:	d025      	beq.n	800194a <wm8994_InitExt+0xbe>
 80018fe:	4546      	cmp	r6, r8
 8001900:	d15d      	bne.n	80019be <wm8994_InitExt+0x132>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001902:	f640 420c 	movw	r2, #3084	; 0xc0c
 8001906:	2105      	movs	r1, #5
 8001908:	4620      	mov	r0, r4
 800190a:	f001 ff01 	bl	8003710 <AUDIO_IO_Write>
 800190e:	2200      	movs	r2, #0
 8001910:	f240 6101 	movw	r1, #1537	; 0x601
 8001914:	4620      	mov	r0, r4
 8001916:	f001 fefb 	bl	8003710 <AUDIO_IO_Write>
 800191a:	2200      	movs	r2, #0
 800191c:	f240 6102 	movw	r1, #1538	; 0x602
 8001920:	4620      	mov	r0, r4
 8001922:	f001 fef5 	bl	8003710 <AUDIO_IO_Write>
 8001926:	2202      	movs	r2, #2
 8001928:	f240 6104 	movw	r1, #1540	; 0x604
 800192c:	4620      	mov	r0, r4
 800192e:	f001 feef 	bl	8003710 <AUDIO_IO_Write>
 8001932:	2202      	movs	r2, #2
 8001934:	f240 6105 	movw	r1, #1541	; 0x605
 8001938:	4620      	mov	r0, r4
 800193a:	f001 fee9 	bl	8003710 <AUDIO_IO_Write>
  if (input_device > 0)
 800193e:	bb35      	cbnz	r5, 800198e <wm8994_InitExt+0x102>
    inputEnabled = 0;
 8001940:	f8cb 5004 	str.w	r5, [fp, #4]
 8001944:	e0b1      	b.n	8001aaa <wm8994_InitExt+0x21e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001946:	2203      	movs	r2, #3
 8001948:	e7c5      	b.n	80018d6 <wm8994_InitExt+0x4a>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800194a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 800194e:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001952:	f04f 0105 	mov.w	r1, #5
 8001956:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001958:	d127      	bne.n	80019aa <wm8994_InitExt+0x11e>
 AUDIO_IO_Write(Addr, Reg, Value);
 800195a:	f001 fed9 	bl	8003710 <AUDIO_IO_Write>
 800195e:	4632      	mov	r2, r6
 8001960:	f240 6101 	movw	r1, #1537	; 0x601
 8001964:	4620      	mov	r0, r4
 8001966:	f001 fed3 	bl	8003710 <AUDIO_IO_Write>
 800196a:	4632      	mov	r2, r6
 800196c:	f240 6102 	movw	r1, #1538	; 0x602
 8001970:	4620      	mov	r0, r4
 8001972:	f001 fecd 	bl	8003710 <AUDIO_IO_Write>
 8001976:	4632      	mov	r2, r6
 8001978:	f240 6104 	movw	r1, #1540	; 0x604
 800197c:	4620      	mov	r0, r4
 800197e:	f001 fec7 	bl	8003710 <AUDIO_IO_Write>
 8001982:	4632      	mov	r2, r6
 8001984:	f240 6105 	movw	r1, #1541	; 0x605
 8001988:	4620      	mov	r0, r4
 800198a:	f001 fec1 	bl	8003710 <AUDIO_IO_Write>
    inputEnabled = 1;
 800198e:	2301      	movs	r3, #1
    switch (input_device)
 8001990:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    inputEnabled = 1;
 8001994:	f8cb 3004 	str.w	r3, [fp, #4]
    switch (input_device)
 8001998:	d063      	beq.n	8001a62 <wm8994_InitExt+0x1d6>
 800199a:	d82d      	bhi.n	80019f8 <wm8994_InitExt+0x16c>
 800199c:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80019a0:	f000 8191 	beq.w	8001cc6 <wm8994_InitExt+0x43a>
      counter++;
 80019a4:	f04f 0801 	mov.w	r8, #1
 80019a8:	e081      	b.n	8001aae <wm8994_InitExt+0x222>
 AUDIO_IO_Write(Addr, Reg, Value);
 80019aa:	f001 feb1 	bl	8003710 <AUDIO_IO_Write>
 80019ae:	4642      	mov	r2, r8
 80019b0:	f240 6101 	movw	r1, #1537	; 0x601
 80019b4:	4620      	mov	r0, r4
 80019b6:	f001 feab 	bl	8003710 <AUDIO_IO_Write>
 80019ba:	4642      	mov	r2, r8
 80019bc:	e7ae      	b.n	800191c <wm8994_InitExt+0x90>
 80019be:	f240 3203 	movw	r2, #771	; 0x303
 80019c2:	2105      	movs	r1, #5
 80019c4:	4620      	mov	r0, r4
 80019c6:	f001 fea3 	bl	8003710 <AUDIO_IO_Write>
 80019ca:	4642      	mov	r2, r8
 80019cc:	f240 6101 	movw	r1, #1537	; 0x601
 80019d0:	4620      	mov	r0, r4
 80019d2:	f001 fe9d 	bl	8003710 <AUDIO_IO_Write>
 80019d6:	4642      	mov	r2, r8
 80019d8:	f240 6102 	movw	r1, #1538	; 0x602
 80019dc:	4620      	mov	r0, r4
 80019de:	f001 fe97 	bl	8003710 <AUDIO_IO_Write>
 80019e2:	2200      	movs	r2, #0
 80019e4:	f240 6104 	movw	r1, #1540	; 0x604
 80019e8:	4620      	mov	r0, r4
 80019ea:	f001 fe91 	bl	8003710 <AUDIO_IO_Write>
 80019ee:	2200      	movs	r2, #0
 80019f0:	e7a0      	b.n	8001934 <wm8994_InitExt+0xa8>
    outputEnabled = 0;
 80019f2:	f8cb 6000 	str.w	r6, [fp]
 80019f6:	e7a2      	b.n	800193e <wm8994_InitExt+0xb2>
    switch (input_device)
 80019f8:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 80019fc:	f000 8134 	beq.w	8001c68 <wm8994_InitExt+0x3dc>
 8001a00:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001a04:	d1ce      	bne.n	80019a4 <wm8994_InitExt+0x118>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001a06:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f001 fe7f 	bl	8003710 <AUDIO_IO_Write>
 8001a12:	22db      	movs	r2, #219	; 0xdb
 8001a14:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f001 fe79 	bl	8003710 <AUDIO_IO_Write>
 8001a1e:	22db      	movs	r2, #219	; 0xdb
 8001a20:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001a24:	4620      	mov	r0, r4
 8001a26:	f001 fe73 	bl	8003710 <AUDIO_IO_Write>
 8001a2a:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4620      	mov	r0, r4
 8001a32:	f001 fe6d 	bl	8003710 <AUDIO_IO_Write>
 8001a36:	2202      	movs	r2, #2
 8001a38:	f240 6106 	movw	r1, #1542	; 0x606
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f001 fe67 	bl	8003710 <AUDIO_IO_Write>
 8001a42:	2202      	movs	r2, #2
 8001a44:	f240 6107 	movw	r1, #1543	; 0x607
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f001 fe61 	bl	8003710 <AUDIO_IO_Write>
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001a54:	4620      	mov	r0, r4
 8001a56:	f001 fe5b 	bl	8003710 <AUDIO_IO_Write>
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f240 6109 	movw	r1, #1545	; 0x609
 8001a60:	e12c      	b.n	8001cbc <wm8994_InitExt+0x430>
 8001a62:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8001a66:	2104      	movs	r1, #4
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f001 fe51 	bl	8003710 <AUDIO_IO_Write>
 8001a6e:	22db      	movs	r2, #219	; 0xdb
 8001a70:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001a74:	4620      	mov	r0, r4
 8001a76:	f001 fe4b 	bl	8003710 <AUDIO_IO_Write>
 8001a7a:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001a7e:	2102      	movs	r1, #2
 8001a80:	4620      	mov	r0, r4
 8001a82:	f001 fe45 	bl	8003710 <AUDIO_IO_Write>
 8001a86:	2202      	movs	r2, #2
 8001a88:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f001 fe3f 	bl	8003710 <AUDIO_IO_Write>
 8001a92:	2202      	movs	r2, #2
 8001a94:	f240 6109 	movw	r1, #1545	; 0x609
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f001 fe39 	bl	8003710 <AUDIO_IO_Write>
 8001a9e:	220e      	movs	r2, #14
 8001aa0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f001 fe33 	bl	8003710 <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001aaa:	f04f 0800 	mov.w	r8, #0
  switch (AudioFreq)
 8001aae:	f245 6322 	movw	r3, #22050	; 0x5622
 8001ab2:	429f      	cmp	r7, r3
 8001ab4:	f000 8123 	beq.w	8001cfe <wm8994_InitExt+0x472>
 8001ab8:	f200 8108 	bhi.w	8001ccc <wm8994_InitExt+0x440>
 8001abc:	f642 3311 	movw	r3, #11025	; 0x2b11
 8001ac0:	429f      	cmp	r7, r3
 8001ac2:	f000 811a 	beq.w	8001cfa <wm8994_InitExt+0x46e>
 8001ac6:	f5b7 5f7a 	cmp.w	r7, #16000	; 0x3e80
 8001aca:	f000 8112 	beq.w	8001cf2 <wm8994_InitExt+0x466>
 8001ace:	f5b7 5ffa 	cmp.w	r7, #8000	; 0x1f40
 8001ad2:	f040 8103 	bne.w	8001cdc <wm8994_InitExt+0x450>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001adc:	4620      	mov	r0, r4
 8001ade:	f001 fe17 	bl	8003710 <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001ae2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001ae6:	f040 810e 	bne.w	8001d06 <wm8994_InitExt+0x47a>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001aea:	f244 0218 	movw	r2, #16408	; 0x4018
 8001aee:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001af2:	4620      	mov	r0, r4
 8001af4:	f001 fe0c 	bl	8003710 <AUDIO_IO_Write>
 8001af8:	2200      	movs	r2, #0
 8001afa:	f240 3102 	movw	r1, #770	; 0x302
 8001afe:	4620      	mov	r0, r4
 8001b00:	f001 fe06 	bl	8003710 <AUDIO_IO_Write>
 8001b04:	220a      	movs	r2, #10
 8001b06:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f001 fe00 	bl	8003710 <AUDIO_IO_Write>
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b16:	4620      	mov	r0, r4
 8001b18:	f001 fdfa 	bl	8003710 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 8001b1c:	2e00      	cmp	r6, #0
 8001b1e:	f000 8082 	beq.w	8001c26 <wm8994_InitExt+0x39a>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001b22:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b26:	2103      	movs	r1, #3
 8001b28:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001b2a:	f243 3603 	movw	r6, #13059	; 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 8001b2e:	f001 fdef 	bl	8003710 <AUDIO_IO_Write>
 8001b32:	2200      	movs	r2, #0
 8001b34:	2122      	movs	r1, #34	; 0x22
 8001b36:	4620      	mov	r0, r4
 8001b38:	f001 fdea 	bl	8003710 <AUDIO_IO_Write>
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2123      	movs	r1, #35	; 0x23
 8001b40:	4620      	mov	r0, r4
 8001b42:	f001 fde5 	bl	8003710 <AUDIO_IO_Write>
 8001b46:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b4a:	2136      	movs	r1, #54	; 0x36
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	f001 fddf 	bl	8003710 <AUDIO_IO_Write>
 8001b52:	f243 0203 	movw	r2, #12291	; 0x3003
 8001b56:	2101      	movs	r1, #1
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f001 fdd9 	bl	8003710 <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001b5e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8001b62:	f04f 0151 	mov.w	r1, #81	; 0x51
 8001b66:	4620      	mov	r0, r4
 8001b68:	bf0c      	ite	eq
 8001b6a:	f240 2205 	movweq	r2, #517	; 0x205
 8001b6e:	2205      	movne	r2, #5
 8001b70:	f001 fdce 	bl	8003710 <AUDIO_IO_Write>
 8001b74:	f243 3203 	movw	r2, #13059	; 0x3303
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f001 fdc8 	bl	8003710 <AUDIO_IO_Write>
 8001b80:	2222      	movs	r2, #34	; 0x22
 8001b82:	2160      	movs	r1, #96	; 0x60
 8001b84:	4620      	mov	r0, r4
 8001b86:	f001 fdc3 	bl	8003710 <AUDIO_IO_Write>
 8001b8a:	f649 7225 	movw	r2, #40741	; 0x9f25
 8001b8e:	214c      	movs	r1, #76	; 0x4c
 8001b90:	4620      	mov	r0, r4
 8001b92:	f001 fdbd 	bl	8003710 <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 8001b96:	200f      	movs	r0, #15
 8001b98:	f001 fde2 	bl	8003760 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	212d      	movs	r1, #45	; 0x2d
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f001 fdb5 	bl	8003710 <AUDIO_IO_Write>
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	212e      	movs	r1, #46	; 0x2e
 8001baa:	4620      	mov	r0, r4
 8001bac:	f001 fdb0 	bl	8003710 <AUDIO_IO_Write>
 8001bb0:	f44f 724c 	mov.w	r2, #816	; 0x330
 8001bb4:	2103      	movs	r1, #3
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f001 fdaa 	bl	8003710 <AUDIO_IO_Write>
 8001bbc:	2233      	movs	r2, #51	; 0x33
 8001bbe:	2154      	movs	r1, #84	; 0x54
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	f001 fda5 	bl	8003710 <AUDIO_IO_Write>
    AUDIO_IO_Delay(250);
 8001bc6:	20fa      	movs	r0, #250	; 0xfa
 8001bc8:	f001 fdca 	bl	8003760 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001bcc:	22ee      	movs	r2, #238	; 0xee
 8001bce:	2160      	movs	r1, #96	; 0x60
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f001 fd9d 	bl	8003710 <AUDIO_IO_Write>
 8001bd6:	22c0      	movs	r2, #192	; 0xc0
 8001bd8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f001 fd97 	bl	8003710 <AUDIO_IO_Write>
 8001be2:	22c0      	movs	r2, #192	; 0xc0
 8001be4:	f240 6111 	movw	r1, #1553	; 0x611
 8001be8:	4620      	mov	r0, r4
 8001bea:	f001 fd91 	bl	8003710 <AUDIO_IO_Write>
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f001 fd8b 	bl	8003710 <AUDIO_IO_Write>
 8001bfa:	22c0      	movs	r2, #192	; 0xc0
 8001bfc:	f240 6112 	movw	r1, #1554	; 0x612
 8001c00:	4620      	mov	r0, r4
 8001c02:	f001 fd85 	bl	8003710 <AUDIO_IO_Write>
 8001c06:	22c0      	movs	r2, #192	; 0xc0
 8001c08:	f240 6113 	movw	r1, #1555	; 0x613
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	f001 fd7f 	bl	8003710 <AUDIO_IO_Write>
 8001c12:	2200      	movs	r2, #0
 8001c14:	f240 4122 	movw	r1, #1058	; 0x422
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f001 fd79 	bl	8003710 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8001c1e:	4651      	mov	r1, sl
 8001c20:	4648      	mov	r0, r9
 8001c22:	f7ff fdb1 	bl	8001788 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
 8001c26:	b1e5      	cbz	r5, 8001c62 <wm8994_InitExt+0x3d6>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001c28:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001c2c:	d002      	beq.n	8001c34 <wm8994_InitExt+0x3a8>
 8001c2e:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8001c32:	d171      	bne.n	8001d18 <wm8994_InitExt+0x48c>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001c34:	f046 0213 	orr.w	r2, r6, #19
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f001 fd68 	bl	8003710 <AUDIO_IO_Write>
 8001c40:	2202      	movs	r2, #2
 8001c42:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001c46:	4620      	mov	r0, r4
 8001c48:	f001 fd62 	bl	8003710 <AUDIO_IO_Write>
 8001c4c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001c50:	f240 4111 	movw	r1, #1041	; 0x411
 8001c54:	4620      	mov	r0, r4
 8001c56:	f001 fd5b 	bl	8003710 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8001c5a:	4651      	mov	r1, sl
 8001c5c:	4648      	mov	r0, r9
 8001c5e:	f7ff fd93 	bl	8001788 <wm8994_SetVolume>
}
 8001c62:	4640      	mov	r0, r8
 8001c64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8001c68:	2211      	movs	r2, #17
 8001c6a:	2128      	movs	r1, #40	; 0x28
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f001 fd4f 	bl	8003710 <AUDIO_IO_Write>
 8001c72:	2235      	movs	r2, #53	; 0x35
 8001c74:	2129      	movs	r1, #41	; 0x29
 8001c76:	4620      	mov	r0, r4
 8001c78:	f001 fd4a 	bl	8003710 <AUDIO_IO_Write>
 8001c7c:	2235      	movs	r2, #53	; 0x35
 8001c7e:	212a      	movs	r1, #42	; 0x2a
 8001c80:	4620      	mov	r0, r4
 8001c82:	f001 fd45 	bl	8003710 <AUDIO_IO_Write>
 8001c86:	f240 3203 	movw	r2, #771	; 0x303
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f001 fd3f 	bl	8003710 <AUDIO_IO_Write>
 8001c92:	22db      	movs	r2, #219	; 0xdb
 8001c94:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f001 fd39 	bl	8003710 <AUDIO_IO_Write>
 8001c9e:	f246 3250 	movw	r2, #25424	; 0x6350
 8001ca2:	2102      	movs	r1, #2
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f001 fd33 	bl	8003710 <AUDIO_IO_Write>
 8001caa:	2202      	movs	r2, #2
 8001cac:	f240 6106 	movw	r1, #1542	; 0x606
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f001 fd2d 	bl	8003710 <AUDIO_IO_Write>
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f240 6107 	movw	r1, #1543	; 0x607
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f001 fd27 	bl	8003710 <AUDIO_IO_Write>
 8001cc2:	220d      	movs	r2, #13
 8001cc4:	e6ec      	b.n	8001aa0 <wm8994_InitExt+0x214>
 8001cc6:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8001cca:	e7de      	b.n	8001c8a <wm8994_InitExt+0x3fe>
  switch (AudioFreq)
 8001ccc:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001cd0:	429f      	cmp	r7, r3
 8001cd2:	d016      	beq.n	8001d02 <wm8994_InitExt+0x476>
 8001cd4:	d804      	bhi.n	8001ce0 <wm8994_InitExt+0x454>
 8001cd6:	f5b7 4ffa 	cmp.w	r7, #32000	; 0x7d00
 8001cda:	d00c      	beq.n	8001cf6 <wm8994_InitExt+0x46a>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001cdc:	2283      	movs	r2, #131	; 0x83
 8001cde:	e6fb      	b.n	8001ad8 <wm8994_InitExt+0x24c>
  switch (AudioFreq)
 8001ce0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001ce4:	429f      	cmp	r7, r3
 8001ce6:	d0f9      	beq.n	8001cdc <wm8994_InitExt+0x450>
 8001ce8:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <wm8994_InitExt+0x4e8>)
 8001cea:	429f      	cmp	r7, r3
 8001cec:	d1f6      	bne.n	8001cdc <wm8994_InitExt+0x450>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001cee:	22a3      	movs	r2, #163	; 0xa3
 8001cf0:	e6f2      	b.n	8001ad8 <wm8994_InitExt+0x24c>
 8001cf2:	2233      	movs	r2, #51	; 0x33
 8001cf4:	e6f0      	b.n	8001ad8 <wm8994_InitExt+0x24c>
 8001cf6:	2263      	movs	r2, #99	; 0x63
 8001cf8:	e6ee      	b.n	8001ad8 <wm8994_InitExt+0x24c>
 8001cfa:	2213      	movs	r2, #19
 8001cfc:	e6ec      	b.n	8001ad8 <wm8994_InitExt+0x24c>
 8001cfe:	2243      	movs	r2, #67	; 0x43
 8001d00:	e6ea      	b.n	8001ad8 <wm8994_InitExt+0x24c>
 8001d02:	2273      	movs	r2, #115	; 0x73
 8001d04:	e6e8      	b.n	8001ad8 <wm8994_InitExt+0x24c>
  	if(AudioRes == 16 )
 8001d06:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8001d0a:	2b10      	cmp	r3, #16
 AUDIO_IO_Write(Addr, Reg, Value);
 8001d0c:	bf0c      	ite	eq
 8001d0e:	f244 0210 	movweq	r2, #16400	; 0x4010
 8001d12:	f244 0270 	movwne	r2, #16496	; 0x4070
 8001d16:	e6ea      	b.n	8001aee <wm8994_InitExt+0x262>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001d18:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001d1c:	d115      	bne.n	8001d4a <wm8994_InitExt+0x4be>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001d1e:	f046 0213 	orr.w	r2, r6, #19
 8001d22:	2101      	movs	r1, #1
 8001d24:	4620      	mov	r0, r4
 8001d26:	f001 fcf3 	bl	8003710 <AUDIO_IO_Write>
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001d30:	4620      	mov	r0, r4
 8001d32:	f001 fced 	bl	8003710 <AUDIO_IO_Write>
 8001d36:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001d3a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f001 fce6 	bl	8003710 <AUDIO_IO_Write>
 8001d44:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001d48:	e782      	b.n	8001c50 <wm8994_InitExt+0x3c4>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001d4a:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8001d4e:	d002      	beq.n	8001d56 <wm8994_InitExt+0x4ca>
 8001d50:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001d54:	d181      	bne.n	8001c5a <wm8994_InitExt+0x3ce>
 AUDIO_IO_Write(Addr, Reg, Value);
 8001d56:	220b      	movs	r2, #11
 8001d58:	2118      	movs	r1, #24
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	f001 fcd8 	bl	8003710 <AUDIO_IO_Write>
 8001d60:	220b      	movs	r2, #11
 8001d62:	211a      	movs	r1, #26
 8001d64:	4620      	mov	r0, r4
 8001d66:	f001 fcd3 	bl	8003710 <AUDIO_IO_Write>
 8001d6a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001d6e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001d72:	e76f      	b.n	8001c54 <wm8994_InitExt+0x3c8>
 8001d74:	00017700 	.word	0x00017700
 8001d78:	20000600 	.word	0x20000600

08001d7c <wm8994_Stop>:
{
 8001d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 8001d7e:	4e19      	ldr	r6, [pc, #100]	; (8001de4 <wm8994_Stop+0x68>)
{
 8001d80:	4604      	mov	r4, r0
 8001d82:	460f      	mov	r7, r1
  if (outputEnabled != 0)
 8001d84:	6835      	ldr	r5, [r6, #0]
 8001d86:	b355      	cbz	r5, 8001dde <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001d88:	2101      	movs	r1, #1
 8001d8a:	f7ff fcc7 	bl	800171c <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001d8e:	2f02      	cmp	r7, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001d90:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001d92:	d024      	beq.n	8001dde <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001d94:	b2e4      	uxtb	r4, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 8001d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001d9e:	4620      	mov	r0, r4
 8001da0:	f001 fcb6 	bl	8003710 <AUDIO_IO_Write>
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	f240 4122 	movw	r1, #1058	; 0x422
 8001dac:	4620      	mov	r0, r4
 8001dae:	f001 fcaf 	bl	8003710 <AUDIO_IO_Write>
 8001db2:	2200      	movs	r2, #0
 8001db4:	212d      	movs	r1, #45	; 0x2d
 8001db6:	4620      	mov	r0, r4
 8001db8:	f001 fcaa 	bl	8003710 <AUDIO_IO_Write>
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	212e      	movs	r1, #46	; 0x2e
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f001 fca5 	bl	8003710 <AUDIO_IO_Write>
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2105      	movs	r1, #5
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f001 fca0 	bl	8003710 <AUDIO_IO_Write>
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	f001 fc9b 	bl	8003710 <AUDIO_IO_Write>
      outputEnabled = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	6033      	str	r3, [r6, #0]
}
 8001dde:	4628      	mov	r0, r5
 8001de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000600 	.word	0x20000600

08001de8 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8001de8:	b510      	push	{r4, lr}
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <SAIx_In_DeInit+0x24>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001dec:	4c08      	ldr	r4, [pc, #32]	; (8001e10 <SAIx_In_DeInit+0x28>)
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <SAIx_In_DeInit+0x2c>)
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001df0:	4809      	ldr	r0, [pc, #36]	; (8001e18 <SAIx_In_DeInit+0x30>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001df2:	6022      	str	r2, [r4, #0]
  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001df4:	681a      	ldr	r2, [r3, #0]
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001df6:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001df8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dfc:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8001dfe:	f004 fb24 	bl	800644a <HAL_SAI_DeInit>
  HAL_SAI_DeInit(&haudio_out_sai);
 8001e02:	4620      	mov	r0, r4
}
 8001e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_SAI_DeInit(&haudio_out_sai);
 8001e08:	f004 bb1f 	b.w	800644a <HAL_SAI_DeInit>
 8001e0c:	40015824 	.word	0x40015824
 8001e10:	20000928 	.word	0x20000928
 8001e14:	40015804 	.word	0x40015804
 8001e18:	20000844 	.word	0x20000844

08001e1c <BSP_AUDIO_OUT_Error_CallBack>:
 8001e1c:	4770      	bx	lr
	...

08001e20 <BSP_AUDIO_OUT_MspInit>:
{ 
 8001e20:	b570      	push	{r4, r5, r6, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001e22:	4c3f      	ldr	r4, [pc, #252]	; (8001f20 <BSP_AUDIO_OUT_MspInit+0x100>)
{ 
 8001e24:	b08a      	sub	sp, #40	; 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e26:	f04f 0c70 	mov.w	ip, #112	; 0x70
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001e2a:	f04f 0e00 	mov.w	lr, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001e2e:	6c63      	ldr	r3, [r4, #68]	; 0x44
{ 
 8001e30:	4605      	mov	r5, r0
 8001e32:	460e      	mov	r6, r1
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8001e34:	483b      	ldr	r0, [pc, #236]	; (8001f24 <BSP_AUDIO_OUT_MspInit+0x104>)
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001e36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8001e3a:	a905      	add	r1, sp, #20
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001e3c:	6463      	str	r3, [r4, #68]	; 0x44
 8001e3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001e48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8001e50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e56:	9302      	str	r3, [sp, #8]
 8001e58:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_SD_FS_CLK_ENABLE();
 8001e5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e5c:	f043 0310 	orr.w	r3, r3, #16
 8001e60:	6323      	str	r3, [r4, #48]	; 0x30
 8001e62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	9303      	str	r3, [sp, #12]
 8001e6a:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e9cd c305 	strd	ip, r3, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e9cd e307 	strd	lr, r3, [sp, #28]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_AF;
 8001e78:	2306      	movs	r3, #6
 8001e7a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8001e7c:	f002 f99a 	bl	80041b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001e80:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001e82:	a905      	add	r1, sp, #20
 8001e84:	4828      	ldr	r0, [pc, #160]	; (8001f28 <BSP_AUDIO_OUT_MspInit+0x108>)
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001e86:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001e88:	f002 f994 	bl	80041b4 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001e8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e92:	6323      	str	r3, [r4, #48]	; 0x30
 8001e94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9a:	9304      	str	r3, [sp, #16]
 8001e9c:	9b04      	ldr	r3, [sp, #16]
  resolution= (Params != NULL)? *((uint8_t*)Params):16;
 8001e9e:	2e00      	cmp	r6, #0
 8001ea0:	d03c      	beq.n	8001f1c <BSP_AUDIO_OUT_MspInit+0xfc>
 8001ea2:	7832      	ldrb	r2, [r6, #0]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001ea4:	6829      	ldr	r1, [r5, #0]
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <BSP_AUDIO_OUT_MspInit+0x10c>)
 8001ea8:	4299      	cmp	r1, r3
 8001eaa:	d12d      	bne.n	8001f08 <BSP_AUDIO_OUT_MspInit+0xe8>
    if(resolution == 24)
 8001eac:	2a18      	cmp	r2, #24
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <BSP_AUDIO_OUT_MspInit+0x110>)
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001eb0:	f04f 0100 	mov.w	r1, #0
 8001eb4:	f04f 0040 	mov.w	r0, #64	; 0x40
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_24;
 8001eb8:	bf0c      	ite	eq
 8001eba:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_16;
 8001ebe:	f44f 6200 	movne.w	r2, #2048	; 0x800
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001ec2:	60d9      	str	r1, [r3, #12]
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_24;
 8001ec4:	bf07      	ittee	eq
 8001ec6:	615a      	streq	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE_24;
 8001ec8:	f44f 4280 	moveq.w	r2, #16384	; 0x4000
      hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE_16;
 8001ecc:	615a      	strne	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE_16;
 8001ece:	f44f 5200 	movne.w	r2, #8192	; 0x2000
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001ed2:	66eb      	str	r3, [r5, #108]	; 0x6c
      hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE_16;
 8001ed4:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001ed6:	2200      	movs	r2, #0
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001ed8:	639d      	str	r5, [r3, #56]	; 0x38
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001eda:	e9c3 1001 	strd	r1, r0, [r3, #4]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001ee2:	2004      	movs	r0, #4
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001ee4:	6119      	str	r1, [r3, #16]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001ee6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001eea:	e9c3 2107 	strd	r2, r1, [r3, #28]
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001eee:	2103      	movs	r1, #3
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001ef0:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001ef4:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <BSP_AUDIO_OUT_MspInit+0x114>)
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001ef6:	e9c3 0109 	strd	r0, r1, [r3, #36]	; 0x24
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001efa:	480d      	ldr	r0, [pc, #52]	; (8001f30 <BSP_AUDIO_OUT_MspInit+0x110>)
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001efc:	601a      	str	r2, [r3, #0]
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001efe:	f001 fff1 	bl	8003ee4 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);
 8001f02:	480b      	ldr	r0, [pc, #44]	; (8001f30 <BSP_AUDIO_OUT_MspInit+0x110>)
 8001f04:	f001 ff70 	bl	8003de8 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	2039      	movs	r0, #57	; 0x39
 8001f0e:	f001 fcbb 	bl	8003888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8001f12:	2039      	movs	r0, #57	; 0x39
 8001f14:	f001 fcea 	bl	80038ec <HAL_NVIC_EnableIRQ>
}
 8001f18:	b00a      	add	sp, #40	; 0x28
 8001f1a:	bd70      	pop	{r4, r5, r6, pc}
  resolution= (Params != NULL)? *((uint8_t*)Params):16;
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	e7c1      	b.n	8001ea4 <BSP_AUDIO_OUT_MspInit+0x84>
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40021800 	.word	0x40021800
 8001f2c:	40015804 	.word	0x40015804
 8001f30:	20000608 	.word	0x20000608
 8001f34:	40026428 	.word	0x40026428

08001f38 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001f38:	b510      	push	{r4, lr}
 8001f3a:	b0a4      	sub	sp, #144	; 0x90
 8001f3c:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001f3e:	4668      	mov	r0, sp
 8001f40:	f004 f83c 	bl	8005fbc <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001f44:	f642 3311 	movw	r3, #11025	; 0x2b11
 8001f48:	429c      	cmp	r4, r3
 8001f4a:	d007      	beq.n	8001f5c <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001f4c:	f245 6322 	movw	r3, #22050	; 0x5622
 8001f50:	429c      	cmp	r4, r3
 8001f52:	d003      	beq.n	8001f5c <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001f54:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001f58:	429c      	cmp	r4, r3
 8001f5a:	d111      	bne.n	8001f80 <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001f5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f60:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001f62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f66:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001f68:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001f6c:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001f72:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001f74:	4668      	mov	r0, sp
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 8001f76:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001f78:	f003 fd72 	bl	8005a60 <HAL_RCCEx_PeriphCLKConfig>
}
 8001f7c:	b024      	add	sp, #144	; 0x90
 8001f7e:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001f80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f84:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLI2S;
 8001f86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001f8a:	930f      	str	r3, [sp, #60]	; 0x3c
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 8001f8c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001f90:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 8001f92:	2307      	movs	r3, #7
 8001f94:	9303      	str	r3, [sp, #12]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;      
 8001f96:	2301      	movs	r3, #1
 8001f98:	e7ec      	b.n	8001f74 <BSP_AUDIO_OUT_ClockConfig+0x3c>
	...

08001f9c <BSP_AUDIO_IN_AllocScratch>:
  */
uint8_t BSP_AUDIO_IN_AllocScratch (int32_t *pScratch, uint32_t size)
{ 
  uint32_t idx;
  
  ScratchSize = (size / AudioIn_ChannelNumber);
 8001f9c:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <BSP_AUDIO_IN_AllocScratch+0x2c>)
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <BSP_AUDIO_IN_AllocScratch+0x30>)
{ 
 8001fa0:	b530      	push	{r4, r5, lr}
  ScratchSize = (size / AudioIn_ChannelNumber);
 8001fa2:	789c      	ldrb	r4, [r3, #2]
  
  /* copy scratch pointers */
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
  {
    pScratchBuff[idx] = (int32_t *)(pScratch + (idx * ScratchSize));
 8001fa4:	f102 0564 	add.w	r5, r2, #100	; 0x64
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 8001fa8:	2300      	movs	r3, #0
  ScratchSize = (size / AudioIn_ChannelNumber);
 8001faa:	fbb1 f1f4 	udiv	r1, r1, r4
 8001fae:	6611      	str	r1, [r2, #96]	; 0x60
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 8001fb0:	429c      	cmp	r4, r3
 8001fb2:	d801      	bhi.n	8001fb8 <BSP_AUDIO_IN_AllocScratch+0x1c>
  }
  /* Return AUDIO_OK */
  return AUDIO_OK;
}
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	bd30      	pop	{r4, r5, pc}
    pScratchBuff[idx] = (int32_t *)(pScratch + (idx * ScratchSize));
 8001fb8:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8001fba:	0089      	lsls	r1, r1, #2
 8001fbc:	fb03 0101 	mla	r1, r3, r1, r0
 8001fc0:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
  for (idx = 0; idx < AudioIn_ChannelNumber; idx++)
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	e7f3      	b.n	8001fb0 <BSP_AUDIO_IN_AllocScratch+0x14>
 8001fc8:	200000f8 	.word	0x200000f8
 8001fcc:	20000608 	.word	0x20000608

08001fd0 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{  
 8001fd0:	b510      	push	{r4, lr}
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 8001fd2:	4c16      	ldr	r4, [pc, #88]	; (800202c <BSP_AUDIO_IN_Record+0x5c>)
 8001fd4:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
 8001fd8:	bb13      	cbnz	r3, 8002020 <BSP_AUDIO_IN_Record+0x50>
  {
    
    if(AudioIn_ChannelNumber > 2)
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <BSP_AUDIO_IN_Record+0x60>)
 8001fdc:	789b      	ldrb	r3, [r3, #2]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d80e      	bhi.n	8002000 <BSP_AUDIO_IN_Record+0x30>
        return AUDIO_ERROR;
      }
    }

    /* Call the Media layer start function for top right channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopRightFilter, pScratchBuff[0], ScratchSize))
 8001fe2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001fe4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001fe6:	4813      	ldr	r0, [pc, #76]	; (8002034 <BSP_AUDIO_IN_Record+0x64>)
 8001fe8:	f001 fe7e 	bl	8003ce8 <HAL_DFSDM_FilterRegularStart_DMA>
 8001fec:	b970      	cbnz	r0, 800200c <BSP_AUDIO_IN_Record+0x3c>
    {
      return AUDIO_ERROR;
    }
    
    /* Call the Media layer start function for top left channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInTopLeftFilter, pScratchBuff[1], ScratchSize))
 8001fee:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8001ff0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001ff2:	4811      	ldr	r0, [pc, #68]	; (8002038 <BSP_AUDIO_IN_Record+0x68>)
 8001ff4:	f001 fe78 	bl	8003ce8 <HAL_DFSDM_FilterRegularStart_DMA>
        return AUDIO_ERROR;
 8001ff8:	3000      	adds	r0, #0
 8001ffa:	bf18      	it	ne
 8001ffc:	2001      	movne	r0, #1
 8001ffe:	e006      	b.n	800200e <BSP_AUDIO_IN_Record+0x3e>
      if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomRightFilter, pScratchBuff[2], ScratchSize))
 8002000:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002002:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <BSP_AUDIO_IN_Record+0x6c>)
 8002006:	f001 fe6f 	bl	8003ce8 <HAL_DFSDM_FilterRegularStart_DMA>
 800200a:	b108      	cbz	r0, 8002010 <BSP_AUDIO_IN_Record+0x40>
        return AUDIO_ERROR;
 800200c:	2001      	movs	r0, #1
      return AUDIO_ERROR;
    }
  }
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;  
}
 800200e:	bd10      	pop	{r4, pc}
      if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hAudioInButtomLeftFilter, pScratchBuff[3], ScratchSize))
 8002010:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002012:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002014:	480a      	ldr	r0, [pc, #40]	; (8002040 <BSP_AUDIO_IN_Record+0x70>)
 8002016:	f001 fe67 	bl	8003ce8 <HAL_DFSDM_FilterRegularStart_DMA>
 800201a:	2800      	cmp	r0, #0
 800201c:	d0e1      	beq.n	8001fe2 <BSP_AUDIO_IN_Record+0x12>
 800201e:	e7f5      	b.n	800200c <BSP_AUDIO_IN_Record+0x3c>
    if(HAL_OK !=HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size))
 8002020:	b28a      	uxth	r2, r1
 8002022:	4601      	mov	r1, r0
 8002024:	4807      	ldr	r0, [pc, #28]	; (8002044 <BSP_AUDIO_IN_Record+0x74>)
 8002026:	f004 fa7b 	bl	8006520 <HAL_SAI_Receive_DMA>
 800202a:	e7e5      	b.n	8001ff8 <BSP_AUDIO_IN_Record+0x28>
 800202c:	20000608 	.word	0x20000608
 8002030:	200000f8 	.word	0x200000f8
 8002034:	20000bc0 	.word	0x20000bc0
 8002038:	200009ac 	.word	0x200009ac
 800203c:	200007f0 	.word	0x200007f0
 8002040:	20000b34 	.word	0x20000b34
 8002044:	20000844 	.word	0x20000844

08002048 <BSP_AUDIO_IN_Stop>:
  * @brief  Stop audio recording.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(void)
{
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 8002048:	4b18      	ldr	r3, [pc, #96]	; (80020ac <BSP_AUDIO_IN_Stop+0x64>)
 800204a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
{
 800204e:	b510      	push	{r4, lr}
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 8002050:	b9d3      	cbnz	r3, 8002088 <BSP_AUDIO_IN_Stop+0x40>
  { 
    
    if(AudioIn_ChannelNumber > 2)
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <BSP_AUDIO_IN_Stop+0x68>)
 8002054:	789b      	ldrb	r3, [r3, #2]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d80a      	bhi.n	8002070 <BSP_AUDIO_IN_Stop+0x28>
        return AUDIO_ERROR;
      }
    }
    
    /* Call the Media layer stop function for top right channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInTopRightFilter))
 800205a:	4816      	ldr	r0, [pc, #88]	; (80020b4 <BSP_AUDIO_IN_Stop+0x6c>)
 800205c:	f001 fe84 	bl	8003d68 <HAL_DFSDM_FilterRegularStop_DMA>
 8002060:	b950      	cbnz	r0, 8002078 <BSP_AUDIO_IN_Stop+0x30>
    {
      return AUDIO_ERROR;
    }
    
    /* Call the Media layer stop function for top left channel */
    if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInTopLeftFilter))
 8002062:	4815      	ldr	r0, [pc, #84]	; (80020b8 <BSP_AUDIO_IN_Stop+0x70>)
 8002064:	f001 fe80 	bl	8003d68 <HAL_DFSDM_FilterRegularStop_DMA>
        return AUDIO_ERROR;
 8002068:	3000      	adds	r0, #0
 800206a:	bf18      	it	ne
 800206c:	2001      	movne	r0, #1
 800206e:	e004      	b.n	800207a <BSP_AUDIO_IN_Stop+0x32>
      if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInButtomRightFilter))
 8002070:	4812      	ldr	r0, [pc, #72]	; (80020bc <BSP_AUDIO_IN_Stop+0x74>)
 8002072:	f001 fe79 	bl	8003d68 <HAL_DFSDM_FilterRegularStop_DMA>
 8002076:	b108      	cbz	r0, 800207c <BSP_AUDIO_IN_Stop+0x34>
        return AUDIO_ERROR;
 8002078:	2001      	movs	r0, #1
      return AUDIO_OK;
    }  
  }
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
}
 800207a:	bd10      	pop	{r4, pc}
      if(HAL_OK != HAL_DFSDM_FilterRegularStop_DMA(&hAudioInButtomLeftFilter))
 800207c:	4810      	ldr	r0, [pc, #64]	; (80020c0 <BSP_AUDIO_IN_Stop+0x78>)
 800207e:	f001 fe73 	bl	8003d68 <HAL_DFSDM_FilterRegularStop_DMA>
 8002082:	2800      	cmp	r0, #0
 8002084:	d0e9      	beq.n	800205a <BSP_AUDIO_IN_Stop+0x12>
 8002086:	e7f7      	b.n	8002078 <BSP_AUDIO_IN_Stop+0x30>
    HAL_SAI_DMAStop(&haudio_in_sai);
 8002088:	480e      	ldr	r0, [pc, #56]	; (80020c4 <BSP_AUDIO_IN_Stop+0x7c>)
 800208a:	f004 f9fe 	bl	800648a <HAL_SAI_DMAStop>
    if(audio_drv->Stop(AUDIO_I2C_ADDRESS, CODEC_PDWN_HW) != 0)
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <BSP_AUDIO_IN_Stop+0x80>)
 8002090:	2101      	movs	r1, #1
 8002092:	2034      	movs	r0, #52	; 0x34
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4798      	blx	r3
 800209a:	4604      	mov	r4, r0
 800209c:	2800      	cmp	r0, #0
 800209e:	d1eb      	bne.n	8002078 <BSP_AUDIO_IN_Stop+0x30>
      HAL_Delay(1);
 80020a0:	2001      	movs	r0, #1
 80020a2:	f001 fbcd 	bl	8003840 <HAL_Delay>
      return AUDIO_OK;
 80020a6:	4620      	mov	r0, r4
 80020a8:	e7e7      	b.n	800207a <BSP_AUDIO_IN_Stop+0x32>
 80020aa:	bf00      	nop
 80020ac:	20000608 	.word	0x20000608
 80020b0:	200000f8 	.word	0x200000f8
 80020b4:	20000bc0 	.word	0x20000bc0
 80020b8:	200009ac 	.word	0x200009ac
 80020bc:	200007f0 	.word	0x200007f0
 80020c0:	20000b34 	.word	0x20000b34
 80020c4:	20000844 	.word	0x20000844
 80020c8:	20000a60 	.word	0x20000a60

080020cc <BSP_AUDIO_IN_Get_PcmBuffer>:
  * @param  res :audio Resolution should be 2 or 3.
  * @retval None
  */
uint8_t BSP_AUDIO_IN_Get_PcmBuffer(uint8_t* pbuf, uint16_t sample_count, uint16_t ScratchOffset, uint8_t res)
{
  if( res == 2)
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	4411      	add	r1, r2
{
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( res == 2)
 80020d2:	d024      	beq.n	800211e <BSP_AUDIO_IN_Get_PcmBuffer+0x52>
  {
    uint32_t sample ;
    
    for(int i = 0, j = ScratchOffset; j < (ScratchOffset + sample_count); j++)
    {
      sample = (uint32_t)(SaturaLH((pScratchBuff[1][j] ), -8388600, 8388600));
 80020d4:	4d2d      	ldr	r5, [pc, #180]	; (800218c <BSP_AUDIO_IN_Get_PcmBuffer+0xc0>)
 80020d6:	4c2e      	ldr	r4, [pc, #184]	; (8002190 <BSP_AUDIO_IN_Get_PcmBuffer+0xc4>)
 80020d8:	4e2e      	ldr	r6, [pc, #184]	; (8002194 <BSP_AUDIO_IN_Get_PcmBuffer+0xc8>)
    for(int i = 0, j = ScratchOffset; j < (ScratchOffset + sample_count); j++)
 80020da:	4291      	cmp	r1, r2
 80020dc:	dd2b      	ble.n	8002136 <BSP_AUDIO_IN_Get_PcmBuffer+0x6a>
      sample = (uint32_t)(SaturaLH((pScratchBuff[1][j] ), -8388600, 8388600));
 80020de:	6eab      	ldr	r3, [r5, #104]	; 0x68
 80020e0:	0097      	lsls	r7, r2, #2
 80020e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e6:	42a3      	cmp	r3, r4
 80020e8:	db4b      	blt.n	8002182 <BSP_AUDIO_IN_Get_PcmBuffer+0xb6>
 80020ea:	42b3      	cmp	r3, r6
 80020ec:	bfa8      	it	ge
 80020ee:	4633      	movge	r3, r6
      pbuf[i++] =(sample)&0xFF;
 80020f0:	7003      	strb	r3, [r0, #0]
      pbuf[i++] =(sample>>8)&0xFF;
 80020f2:	ea4f 2c13 	mov.w	ip, r3, lsr #8
      pbuf[i++] =(sample>>16)&0xFF;
 80020f6:	0c1b      	lsrs	r3, r3, #16
      pbuf[i++] =(sample>>8)&0xFF;
 80020f8:	f880 c001 	strb.w	ip, [r0, #1]
      pbuf[i++] =(sample>>16)&0xFF;
 80020fc:	7083      	strb	r3, [r0, #2]
      sample = (uint32_t)(SaturaLH((pScratchBuff[0][j] ), -8388600, 8388600));
 80020fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002100:	59db      	ldr	r3, [r3, r7]
 8002102:	42a3      	cmp	r3, r4
 8002104:	db3f      	blt.n	8002186 <BSP_AUDIO_IN_Get_PcmBuffer+0xba>
 8002106:	42b3      	cmp	r3, r6
 8002108:	bfa8      	it	ge
 800210a:	4633      	movge	r3, r6
      pbuf[i++] =(sample)&0xFF;
 800210c:	70c3      	strb	r3, [r0, #3]
      pbuf[i++] =(sample>>8)&0xFF;
 800210e:	0a1f      	lsrs	r7, r3, #8
      pbuf[i++] =(sample>>16)&0xFF;   
 8002110:	0c1b      	lsrs	r3, r3, #16
    for(int i = 0, j = ScratchOffset; j < (ScratchOffset + sample_count); j++)
 8002112:	3201      	adds	r2, #1
      pbuf[i++] =(sample>>8)&0xFF;
 8002114:	7107      	strb	r7, [r0, #4]
 8002116:	3006      	adds	r0, #6
      pbuf[i++] =(sample>>16)&0xFF;   
 8002118:	f800 3c01 	strb.w	r3, [r0, #-1]
 800211c:	e7dd      	b.n	80020da <BSP_AUDIO_IN_Get_PcmBuffer+0xe>
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[1][j] >> 8), -32760, 32760));
 800211e:	4b1b      	ldr	r3, [pc, #108]	; (800218c <BSP_AUDIO_IN_Get_PcmBuffer+0xc0>)
 8002120:	f647 75f8 	movw	r5, #32760	; 0x7ff8
 8002124:	4c1c      	ldr	r4, [pc, #112]	; (8002198 <BSP_AUDIO_IN_Get_PcmBuffer+0xcc>)
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[0][j] >> 8), -32760, 32760));
 8002126:	e9d3 7619 	ldrd	r7, r6, [r3, #100]	; 0x64
 800212a:	f06f 0303 	mvn.w	r3, #3
 800212e:	fb03 0002 	mla	r0, r3, r2, r0
    for(int i = 0, j = ScratchOffset; j < (ScratchOffset + sample_count); j++)
 8002132:	4291      	cmp	r1, r2
 8002134:	dc01      	bgt.n	800213a <BSP_AUDIO_IN_Get_PcmBuffer+0x6e>
    }
  }
  return 0;
}
 8002136:	2000      	movs	r0, #0
 8002138:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[1][j] >> 8), -32760, 32760));
 800213a:	f856 3022 	ldr.w	r3, [r6, r2, lsl #2]
 800213e:	121b      	asrs	r3, r3, #8
 8002140:	42a3      	cmp	r3, r4
 8002142:	db12      	blt.n	800216a <BSP_AUDIO_IN_Get_PcmBuffer+0x9e>
 8002144:	42ab      	cmp	r3, r5
 8002146:	dc13      	bgt.n	8002170 <BSP_AUDIO_IN_Get_PcmBuffer+0xa4>
 8002148:	b29b      	uxth	r3, r3
 800214a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[0][j] >> 8), -32760, 32760));
 800214e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8002152:	121b      	asrs	r3, r3, #8
 8002154:	42a3      	cmp	r3, r4
 8002156:	db0e      	blt.n	8002176 <BSP_AUDIO_IN_Get_PcmBuffer+0xaa>
 8002158:	42ab      	cmp	r3, r5
 800215a:	dc0f      	bgt.n	800217c <BSP_AUDIO_IN_Get_PcmBuffer+0xb0>
 800215c:	b29b      	uxth	r3, r3
 800215e:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
    for(int i = 0, j = ScratchOffset; j < (ScratchOffset + sample_count); j++)
 8002162:	3201      	adds	r2, #1
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[0][j] >> 8), -32760, 32760));
 8002164:	f8ac 3002 	strh.w	r3, [ip, #2]
 8002168:	e7e3      	b.n	8002132 <BSP_AUDIO_IN_Get_PcmBuffer+0x66>
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[1][j] >> 8), -32760, 32760));
 800216a:	f248 0308 	movw	r3, #32776	; 0x8008
 800216e:	e7ec      	b.n	800214a <BSP_AUDIO_IN_Get_PcmBuffer+0x7e>
 8002170:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8002174:	e7e9      	b.n	800214a <BSP_AUDIO_IN_Get_PcmBuffer+0x7e>
      pbuf16[i++] = (uint16_t)(SaturaLH((pScratchBuff[0][j] >> 8), -32760, 32760));
 8002176:	f248 0308 	movw	r3, #32776	; 0x8008
 800217a:	e7f0      	b.n	800215e <BSP_AUDIO_IN_Get_PcmBuffer+0x92>
 800217c:	f647 73f8 	movw	r3, #32760	; 0x7ff8
 8002180:	e7ed      	b.n	800215e <BSP_AUDIO_IN_Get_PcmBuffer+0x92>
      sample = (uint32_t)(SaturaLH((pScratchBuff[1][j] ), -8388600, 8388600));
 8002182:	4623      	mov	r3, r4
 8002184:	e7b4      	b.n	80020f0 <BSP_AUDIO_IN_Get_PcmBuffer+0x24>
      sample = (uint32_t)(SaturaLH((pScratchBuff[0][j] ), -8388600, 8388600));
 8002186:	4623      	mov	r3, r4
 8002188:	e7c0      	b.n	800210c <BSP_AUDIO_IN_Get_PcmBuffer+0x40>
 800218a:	bf00      	nop
 800218c:	20000608 	.word	0x20000608
 8002190:	ff800008 	.word	0xff800008
 8002194:	007ffff8 	.word	0x007ffff8
 8002198:	ffff8008 	.word	0xffff8008

0800219c <HAL_DFSDM_FilterRegConvCpltCallback>:
{
 800219c:	b508      	push	{r3, lr}
  if(hdfsdm_filter == &hAudioInTopLeftFilter)
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_DFSDM_FilterRegConvCpltCallback+0x74>)
 80021a0:	4298      	cmp	r0, r3
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_DFSDM_FilterRegConvCpltCallback+0x78>)
 80021a4:	d11b      	bne.n	80021de <HAL_DFSDM_FilterRegConvCpltCallback+0x42>
    DmaTopLeftRecCplt = 1;
 80021a6:	2201      	movs	r2, #1
 80021a8:	679a      	str	r2, [r3, #120]	; 0x78
  if(AudioIn_ChannelNumber > 2)
 80021aa:	491b      	ldr	r1, [pc, #108]	; (8002218 <HAL_DFSDM_FilterRegConvCpltCallback+0x7c>)
 80021ac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80021ae:	7889      	ldrb	r1, [r1, #2]
 80021b0:	2902      	cmp	r1, #2
 80021b2:	d924      	bls.n	80021fe <HAL_DFSDM_FilterRegConvCpltCallback+0x62>
    if((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1) && (DmaButtomLeftRecCplt == 1) && (DmaButtomRightRecCplt == 1))
 80021b4:	2a01      	cmp	r2, #1
 80021b6:	d111      	bne.n	80021dc <HAL_DFSDM_FilterRegConvCpltCallback+0x40>
 80021b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80021ba:	2a01      	cmp	r2, #1
 80021bc:	d10e      	bne.n	80021dc <HAL_DFSDM_FilterRegConvCpltCallback+0x40>
 80021be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80021c2:	2a01      	cmp	r2, #1
 80021c4:	d10a      	bne.n	80021dc <HAL_DFSDM_FilterRegConvCpltCallback+0x40>
 80021c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80021ca:	2a01      	cmp	r2, #1
 80021cc:	d106      	bne.n	80021dc <HAL_DFSDM_FilterRegConvCpltCallback+0x40>
      DmaTopLeftRecCplt  = 0;
 80021ce:	2200      	movs	r2, #0
      DmaTopRightRecCplt = 0;
 80021d0:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
      DmaButtomRightRecCplt = 0;  
 80021d4:	e9c3 2220 	strd	r2, r2, [r3, #128]	; 0x80
      BSP_AUDIO_IN_TransferComplete_CallBack();
 80021d8:	f000 fed2 	bl	8002f80 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80021dc:	bd08      	pop	{r3, pc}
  else if(hdfsdm_filter == &hAudioInTopRightFilter)
 80021de:	4a0f      	ldr	r2, [pc, #60]	; (800221c <HAL_DFSDM_FilterRegConvCpltCallback+0x80>)
 80021e0:	4290      	cmp	r0, r2
 80021e2:	d102      	bne.n	80021ea <HAL_DFSDM_FilterRegConvCpltCallback+0x4e>
    DmaTopRightRecCplt = 1;
 80021e4:	2201      	movs	r2, #1
 80021e6:	67da      	str	r2, [r3, #124]	; 0x7c
 80021e8:	e7df      	b.n	80021aa <HAL_DFSDM_FilterRegConvCpltCallback+0xe>
  else if(hdfsdm_filter == &hAudioInButtomLeftFilter)
 80021ea:	4a0d      	ldr	r2, [pc, #52]	; (8002220 <HAL_DFSDM_FilterRegConvCpltCallback+0x84>)
 80021ec:	4290      	cmp	r0, r2
 80021ee:	f04f 0201 	mov.w	r2, #1
    DmaButtomLeftRecCplt = 1;
 80021f2:	bf0c      	ite	eq
 80021f4:	f8c3 2080 	streq.w	r2, [r3, #128]	; 0x80
    DmaButtomRightRecCplt = 1;
 80021f8:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
 80021fc:	e7d5      	b.n	80021aa <HAL_DFSDM_FilterRegConvCpltCallback+0xe>
    if((DmaTopLeftRecCplt == 1) && (DmaTopRightRecCplt == 1))
 80021fe:	2a01      	cmp	r2, #1
 8002200:	d1ec      	bne.n	80021dc <HAL_DFSDM_FilterRegConvCpltCallback+0x40>
 8002202:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002204:	2a01      	cmp	r2, #1
 8002206:	d1e9      	bne.n	80021dc <HAL_DFSDM_FilterRegConvCpltCallback+0x40>
      DmaTopLeftRecCplt  = 0;
 8002208:	2200      	movs	r2, #0
      DmaTopRightRecCplt = 0;  
 800220a:	e9c3 221e 	strd	r2, r2, [r3, #120]	; 0x78
 800220e:	e7e3      	b.n	80021d8 <HAL_DFSDM_FilterRegConvCpltCallback+0x3c>
 8002210:	200009ac 	.word	0x200009ac
 8002214:	20000608 	.word	0x20000608
 8002218:	200000f8 	.word	0x200000f8
 800221c:	20000bc0 	.word	0x20000bc0
 8002220:	20000b34 	.word	0x20000b34

08002224 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai : SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002224:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002226:	f000 feab 	bl	8002f80 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800222a:	bd08      	pop	{r3, pc}

0800222c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
{
 800222c:	b508      	push	{r3, lr}
  if(hdfsdm_filter == &hAudioInTopLeftFilter)
 800222e:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x80>)
 8002230:	4298      	cmp	r0, r3
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x84>)
 8002234:	d11e      	bne.n	8002274 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x48>
    DmaTopLeftRecHalfCplt = 1;
 8002236:	2201      	movs	r2, #1
 8002238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  if(AudioIn_ChannelNumber > 2)
 800223c:	491d      	ldr	r1, [pc, #116]	; (80022b4 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x88>)
 800223e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002242:	7889      	ldrb	r1, [r1, #2]
 8002244:	2902      	cmp	r1, #2
 8002246:	d926      	bls.n	8002296 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x6a>
    if((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1) && (DmaButtomLeftRecHalfCplt == 1) && (DmaButtomRightRecHalfCplt == 1))
 8002248:	2a01      	cmp	r2, #1
 800224a:	d112      	bne.n	8002272 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x46>
 800224c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002250:	2a01      	cmp	r2, #1
 8002252:	d10e      	bne.n	8002272 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x46>
 8002254:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002258:	2a01      	cmp	r2, #1
 800225a:	d10a      	bne.n	8002272 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x46>
 800225c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002260:	2a01      	cmp	r2, #1
 8002262:	d106      	bne.n	8002272 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x46>
      DmaTopLeftRecHalfCplt  = 0;
 8002264:	2200      	movs	r2, #0
      DmaTopRightRecHalfCplt = 0;
 8002266:	e9c3 2222 	strd	r2, r2, [r3, #136]	; 0x88
      DmaButtomRightRecHalfCplt = 0;  
 800226a:	e9c3 2224 	strd	r2, r2, [r3, #144]	; 0x90
      BSP_AUDIO_IN_HalfTransfer_CallBack();
 800226e:	f000 fe7b 	bl	8002f68 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002272:	bd08      	pop	{r3, pc}
  else if(hdfsdm_filter == &hAudioInTopRightFilter)
 8002274:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x8c>)
 8002276:	4290      	cmp	r0, r2
 8002278:	d103      	bne.n	8002282 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x56>
    DmaTopRightRecHalfCplt = 1;
 800227a:	2201      	movs	r2, #1
 800227c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002280:	e7dc      	b.n	800223c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10>
  else if(hdfsdm_filter == &hAudioInButtomLeftFilter)
 8002282:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x90>)
 8002284:	4290      	cmp	r0, r2
 8002286:	f04f 0201 	mov.w	r2, #1
    DmaButtomLeftRecHalfCplt = 1;
 800228a:	bf0c      	ite	eq
 800228c:	f8c3 2090 	streq.w	r2, [r3, #144]	; 0x90
    DmaButtomRightRecHalfCplt = 1;
 8002290:	f8c3 2094 	strne.w	r2, [r3, #148]	; 0x94
 8002294:	e7d2      	b.n	800223c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x10>
    if((DmaTopLeftRecHalfCplt == 1) && (DmaTopRightRecHalfCplt == 1))
 8002296:	2a01      	cmp	r2, #1
 8002298:	d1eb      	bne.n	8002272 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x46>
 800229a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800229e:	2a01      	cmp	r2, #1
 80022a0:	d1e7      	bne.n	8002272 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x46>
      DmaTopLeftRecHalfCplt  = 0;
 80022a2:	2200      	movs	r2, #0
      DmaTopRightRecHalfCplt = 0;  
 80022a4:	e9c3 2222 	strd	r2, r2, [r3, #136]	; 0x88
 80022a8:	e7e1      	b.n	800226e <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x42>
 80022aa:	bf00      	nop
 80022ac:	200009ac 	.word	0x200009ac
 80022b0:	20000608 	.word	0x20000608
 80022b4:	200000f8 	.word	0x200000f8
 80022b8:	20000bc0 	.word	0x20000bc0
 80022bc:	20000b34 	.word	0x20000b34

080022c0 <HAL_SAI_RxHalfCpltCallback>:
{
 80022c0:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80022c2:	f000 fe51 	bl	8002f68 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80022c6:	bd08      	pop	{r3, pc}

080022c8 <BSP_AUDIO_IN_Error_CallBack>:
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_SAI_ErrorCallback>:
{
 80022cc:	b508      	push	{r3, lr}
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80022ce:	6802      	ldr	r2, [r0, #0]
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <HAL_SAI_ErrorCallback+0x18>)
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d102      	bne.n	80022dc <HAL_SAI_ErrorCallback+0x10>
  BSP_AUDIO_OUT_Error_CallBack();
 80022d6:	f7ff fda1 	bl	8001e1c <BSP_AUDIO_OUT_Error_CallBack>
}
 80022da:	bd08      	pop	{r3, pc}
    BSP_AUDIO_IN_Error_CallBack();
 80022dc:	f7ff fff4 	bl	80022c8 <BSP_AUDIO_IN_Error_CallBack>
}
 80022e0:	e7fb      	b.n	80022da <HAL_SAI_ErrorCallback+0xe>
 80022e2:	bf00      	nop
 80022e4:	40015804 	.word	0x40015804

080022e8 <BSP_AUDIO_IN_MspInit>:
/**
  * @brief  Initialize BSP_AUDIO_IN MSP.
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(void)
{ 
 80022e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80022ec:	4da3      	ldr	r5, [pc, #652]	; (800257c <BSP_AUDIO_IN_MspInit+0x294>)
{ 
 80022ee:	b08f      	sub	sp, #60	; 0x3c
 80022f0:	4ca3      	ldr	r4, [pc, #652]	; (8002580 <BSP_AUDIO_IN_MspInit+0x298>)
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80022f2:	f8b5 2074 	ldrh.w	r2, [r5, #116]	; 0x74
static void DFSDMx_ChannelMspInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;  
  
  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 80022f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80022f8:	2a00      	cmp	r2, #0
 80022fa:	f040 80c8 	bne.w	800248e <BSP_AUDIO_IN_MspInit+0x1a6>
  AUDIO_DFSDMx_CLK_ENABLE();
 80022fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  AUDIO_DFSDMx_DMIC_DATIN_GPIO_CLK_ENABLE();
  AUDIO_DFSDMx_CKOUT_DMIC_GPIO_CLK_ENABLE();
  
  /* DFSDM pins configuration: DFSDM_CKOUT, DMIC_DATIN1 pins ------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_CKOUT_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2508      	movs	r5, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_CKOUT_AF;
  HAL_GPIO_Init(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, &GPIO_InitStruct);
 8002304:	a909      	add	r1, sp, #36	; 0x24
 8002306:	489f      	ldr	r0, [pc, #636]	; (8002584 <BSP_AUDIO_IN_MspInit+0x29c>)
  AUDIO_DFSDMx_CLK_ENABLE();
 8002308:	6463      	str	r3, [r4, #68]	; 0x44
 800230a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800230c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002310:	9302      	str	r3, [sp, #8]
 8002312:	9b02      	ldr	r3, [sp, #8]
  AUDIO_DFSDMx_DMIC_DATIN_GPIO_CLK_ENABLE();
 8002314:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6323      	str	r3, [r4, #48]	; 0x30
 800231c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	9303      	str	r3, [sp, #12]
 8002324:	9b03      	ldr	r3, [sp, #12]
  AUDIO_DFSDMx_CKOUT_DMIC_GPIO_CLK_ENABLE();
 8002326:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002328:	f043 0308 	orr.w	r3, r3, #8
 800232c:	6323      	str	r3, [r4, #48]	; 0x30
 800232e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2403      	movs	r4, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	920b      	str	r2, [sp, #44]	; 0x2c
  AUDIO_DFSDMx_CKOUT_DMIC_GPIO_CLK_ENABLE();
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	9304      	str	r3, [sp, #16]
 800233a:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_CKOUT_AF;
 800233e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, &GPIO_InitStruct);
 8002346:	f001 ff35 	bl	80041b4 <HAL_GPIO_Init>
  
  /* DFSDM pin configuration: DMIC_DATIN1 pin --------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN1_PIN;
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
  HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 800234a:	a909      	add	r1, sp, #36	; 0x24
 800234c:	488e      	ldr	r0, [pc, #568]	; (8002588 <BSP_AUDIO_IN_MspInit+0x2a0>)
  GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN1_PIN;
 800234e:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 8002350:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);
 8002352:	f001 ff2f 	bl	80041b4 <HAL_GPIO_Init>
  
  if(AudioIn_ChannelNumber > 2)
 8002356:	4b8d      	ldr	r3, [pc, #564]	; (800258c <BSP_AUDIO_IN_MspInit+0x2a4>)
 8002358:	789a      	ldrb	r2, [r3, #2]
 800235a:	469b      	mov	fp, r3
 800235c:	2a02      	cmp	r2, #2
 800235e:	d907      	bls.n	8002370 <BSP_AUDIO_IN_MspInit+0x88>
  {
  /* DFSDM pin configuration: DMIC_DATIN5 pin --------------------------------*/  
    GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN5_PIN;
 8002360:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
    HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);    
 8002364:	a909      	add	r1, sp, #36	; 0x24
 8002366:	4888      	ldr	r0, [pc, #544]	; (8002588 <BSP_AUDIO_IN_MspInit+0x2a0>)
    GPIO_InitStruct.Pin = AUDIO_DFSDMx_DMIC_DATIN5_PIN;
 8002368:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = AUDIO_DFSDMx_DMIC_DATIN_AF;
 800236a:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, &GPIO_InitStruct);    
 800236c:	f001 ff22 	bl	80041b4 <HAL_GPIO_Init>
  * @retval None
  */
static void DFSDMx_FilterMspInit(void)
{  
  /* Enable DFSDM clock */
  AUDIO_DFSDMx_CLK_ENABLE();
 8002370:	4b83      	ldr	r3, [pc, #524]	; (8002580 <BSP_AUDIO_IN_MspInit+0x298>)
  hDmaTopLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
  hDmaTopLeft.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
  hDmaTopLeft.Init.Mode                = DMA_CIRCULAR;
  hDmaTopLeft.Init.Priority            = DMA_PRIORITY_HIGH;
  hDmaTopLeft.Instance                 = AUDIO_DFSDMx_DMAx_TOP_LEFT_STREAM;
  hDmaTopLeft.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL; 
 8002372:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  hDmaTopLeft.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002376:	4886      	ldr	r0, [pc, #536]	; (8002590 <BSP_AUDIO_IN_MspInit+0x2a8>)
 8002378:	2400      	movs	r4, #0
  AUDIO_DFSDMx_CLK_ENABLE();
 800237a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  hDmaTopLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 800237c:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8002380:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  hDmaTopLeft.Init.Mode                = DMA_CIRCULAR;
 8002384:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  AUDIO_DFSDMx_CLK_ENABLE();
 8002388:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
  hDmaTopLeft.Init.Mode                = DMA_CIRCULAR;
 800238c:	f44f 7780 	mov.w	r7, #256	; 0x100
  hDmaTopLeft.Init.Priority            = DMA_PRIORITY_HIGH;
 8002390:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  AUDIO_DFSDMx_CLK_ENABLE();
 8002394:	645a      	str	r2, [r3, #68]	; 0x44
 8002396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002398:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800239c:	9201      	str	r2, [sp, #4]
 800239e:	9a01      	ldr	r2, [sp, #4]
  AUDIO_DFSDMx_DMAx_CLK_ENABLE();
 80023a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  hDmaTopLeft.Init.Priority            = DMA_PRIORITY_HIGH;
 80023aa:	6206      	str	r6, [r0, #32]
  AUDIO_DFSDMx_DMAx_CLK_ENABLE();
 80023ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b0:	9309      	str	r3, [sp, #36]	; 0x24
 80023b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  hDmaTopLeft.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL; 
 80023b4:	4b77      	ldr	r3, [pc, #476]	; (8002594 <BSP_AUDIO_IN_MspInit+0x2ac>)
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(&hAudioInTopLeftFilter, hdmaReg, hDmaTopLeft);
  
  /* Reset DMA handle state */
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopLeft);
 80023b6:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hDmaTopLeft.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL; 
 80023ba:	e9c0 3500 	strd	r3, r5, [r0]
  __HAL_LINKDMA(&hAudioInTopLeftFilter, hdmaReg, hDmaTopLeft);
 80023be:	4b76      	ldr	r3, [pc, #472]	; (8002598 <BSP_AUDIO_IN_MspInit+0x2b0>)
  hDmaTopLeft.Init.PeriphInc           = DMA_PINC_DISABLE;
 80023c0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  __HAL_LINKDMA(&hAudioInTopLeftFilter, hdmaReg, hDmaTopLeft);
 80023c4:	6298      	str	r0, [r3, #40]	; 0x28
 80023c6:	6383      	str	r3, [r0, #56]	; 0x38
  hDmaTopLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 80023c8:	e9c0 a904 	strd	sl, r9, [r0, #16]
  hDmaTopLeft.Init.Mode                = DMA_CIRCULAR;
 80023cc:	e9c0 8706 	strd	r8, r7, [r0, #24]
  
  /* Configure the DMA Channel */
  HAL_DMA_Init(&hDmaTopLeft);      
 80023d0:	f001 fd0a 	bl	8003de8 <HAL_DMA_Init>
  
  /* DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 80023d4:	4622      	mov	r2, r4
 80023d6:	2104      	movs	r1, #4
 80023d8:	2038      	movs	r0, #56	; 0x38
 80023da:	f001 fa55 	bl	8003888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQ);
 80023de:	2038      	movs	r0, #56	; 0x38
 80023e0:	f001 fa84 	bl	80038ec <HAL_NVIC_EnableIRQ>
  
  
  /*********** Configure DMA stream for TOP RIGHT microphone ******************/
  hDmaTopRight.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80023e4:	486d      	ldr	r0, [pc, #436]	; (800259c <BSP_AUDIO_IN_MspInit+0x2b4>)
  hDmaTopRight.Init.MemInc              = DMA_MINC_ENABLE;
  hDmaTopRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
  hDmaTopRight.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
  hDmaTopRight.Init.Mode                = DMA_CIRCULAR;
  hDmaTopRight.Init.Priority            = DMA_PRIORITY_HIGH;  
  hDmaTopRight.Instance                 = AUDIO_DFSDMx_DMAx_TOP_RIGHT_STREAM;
 80023e6:	4b6e      	ldr	r3, [pc, #440]	; (80025a0 <BSP_AUDIO_IN_MspInit+0x2b8>)
  hDmaTopRight.Init.Priority            = DMA_PRIORITY_HIGH;  
 80023e8:	6206      	str	r6, [r0, #32]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(&hAudioInTopRightFilter, hdmaReg, hDmaTopRight);
  
  /* Reset DMA handle state */
  __HAL_DMA_RESET_HANDLE_STATE(&hDmaTopRight);
 80023ea:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hDmaTopRight.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL;
 80023ee:	e9c0 3500 	strd	r3, r5, [r0]
  __HAL_LINKDMA(&hAudioInTopRightFilter, hdmaReg, hDmaTopRight);
 80023f2:	4b6c      	ldr	r3, [pc, #432]	; (80025a4 <BSP_AUDIO_IN_MspInit+0x2bc>)
  hDmaTopRight.Init.PeriphInc           = DMA_PINC_DISABLE;
 80023f4:	e9c0 4402 	strd	r4, r4, [r0, #8]
  __HAL_LINKDMA(&hAudioInTopRightFilter, hdmaReg, hDmaTopRight);
 80023f8:	6298      	str	r0, [r3, #40]	; 0x28
 80023fa:	6383      	str	r3, [r0, #56]	; 0x38
  hDmaTopRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 80023fc:	e9c0 a904 	strd	sl, r9, [r0, #16]
  hDmaTopRight.Init.Mode                = DMA_CIRCULAR;
 8002400:	e9c0 8706 	strd	r8, r7, [r0, #24]
  
  /* Configure the DMA Channel */
  HAL_DMA_Init(&hDmaTopRight);      
 8002404:	f001 fcf0 	bl	8003de8 <HAL_DMA_Init>
  
  /* DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002408:	4622      	mov	r2, r4
 800240a:	2104      	movs	r1, #4
 800240c:	2044      	movs	r0, #68	; 0x44
 800240e:	f001 fa3b 	bl	8003888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQ);
 8002412:	2044      	movs	r0, #68	; 0x44
 8002414:	f001 fa6a 	bl	80038ec <HAL_NVIC_EnableIRQ>
  
  if(AudioIn_ChannelNumber > 2)
 8002418:	f89b 3002 	ldrb.w	r3, [fp, #2]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d933      	bls.n	8002488 <BSP_AUDIO_IN_MspInit+0x1a0>
  {  
    /*********** Configure DMA stream for BUTTOM LEFT microphone ****************/
    hDmaButtomLeft.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002420:	4861      	ldr	r0, [pc, #388]	; (80025a8 <BSP_AUDIO_IN_MspInit+0x2c0>)
    hDmaButtomLeft.Init.MemInc              = DMA_MINC_ENABLE;
    hDmaButtomLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
    hDmaButtomLeft.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
    hDmaButtomLeft.Init.Mode                = DMA_CIRCULAR;
    hDmaButtomLeft.Init.Priority            = DMA_PRIORITY_HIGH;
    hDmaButtomLeft.Instance                 = AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_STREAM;
 8002422:	4b62      	ldr	r3, [pc, #392]	; (80025ac <BSP_AUDIO_IN_MspInit+0x2c4>)
    hDmaButtomLeft.Init.Priority            = DMA_PRIORITY_HIGH;
 8002424:	6206      	str	r6, [r0, #32]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(&hAudioInButtomLeftFilter, hdmaReg, hDmaButtomLeft);
    
    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomLeft);
 8002426:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hDmaButtomLeft.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL; 
 800242a:	e9c0 3500 	strd	r3, r5, [r0]
    __HAL_LINKDMA(&hAudioInButtomLeftFilter, hdmaReg, hDmaButtomLeft);
 800242e:	4b60      	ldr	r3, [pc, #384]	; (80025b0 <BSP_AUDIO_IN_MspInit+0x2c8>)
    hDmaButtomLeft.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002430:	e9c0 4402 	strd	r4, r4, [r0, #8]
    __HAL_LINKDMA(&hAudioInButtomLeftFilter, hdmaReg, hDmaButtomLeft);
 8002434:	6298      	str	r0, [r3, #40]	; 0x28
 8002436:	6383      	str	r3, [r0, #56]	; 0x38
    hDmaButtomLeft.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 8002438:	e9c0 a904 	strd	sl, r9, [r0, #16]
    hDmaButtomLeft.Init.Mode                = DMA_CIRCULAR;
 800243c:	e9c0 8706 	strd	r8, r7, [r0, #24]
    
    /* Configure the DMA Channel */
    HAL_DMA_Init(&hDmaButtomLeft);      
 8002440:	f001 fcd2 	bl	8003de8 <HAL_DMA_Init>
    
    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002444:	4622      	mov	r2, r4
 8002446:	2104      	movs	r1, #4
 8002448:	2045      	movs	r0, #69	; 0x45
 800244a:	f001 fa1d 	bl	8003888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_LEFT_IRQ);
 800244e:	2045      	movs	r0, #69	; 0x45
 8002450:	f001 fa4c 	bl	80038ec <HAL_NVIC_EnableIRQ>
    
    
    /*********** Configure DMA stream for BUTTOM RIGHT microphone ***************/
    hDmaButtomRight.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002454:	4857      	ldr	r0, [pc, #348]	; (80025b4 <BSP_AUDIO_IN_MspInit+0x2cc>)
    hDmaButtomRight.Init.MemInc              = DMA_MINC_ENABLE;
    hDmaButtomRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
    hDmaButtomRight.Init.MemDataAlignment    = AUDIO_DFSDMx_DMAx_MEM_DATA_SIZE;
    hDmaButtomRight.Init.Mode                = DMA_CIRCULAR;
    hDmaButtomRight.Init.Priority            = DMA_PRIORITY_HIGH;  
    hDmaButtomRight.Instance                 = AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_STREAM;
 8002456:	4b58      	ldr	r3, [pc, #352]	; (80025b8 <BSP_AUDIO_IN_MspInit+0x2d0>)
    hDmaButtomRight.Init.Priority            = DMA_PRIORITY_HIGH;  
 8002458:	6206      	str	r6, [r0, #32]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(&hAudioInButtomRightFilter, hdmaReg, hDmaButtomRight);
    
    /* Reset DMA handle state */
    __HAL_DMA_RESET_HANDLE_STATE(&hDmaButtomRight);
 800245a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
    hDmaButtomRight.Init.Channel             = AUDIO_DFSDMx_DMAx_CHANNEL;
 800245e:	e9c0 3500 	strd	r3, r5, [r0]
    __HAL_LINKDMA(&hAudioInButtomRightFilter, hdmaReg, hDmaButtomRight);
 8002462:	4b56      	ldr	r3, [pc, #344]	; (80025bc <BSP_AUDIO_IN_MspInit+0x2d4>)
    hDmaButtomRight.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002464:	e9c0 4402 	strd	r4, r4, [r0, #8]
    __HAL_LINKDMA(&hAudioInButtomRightFilter, hdmaReg, hDmaButtomRight);
 8002468:	6298      	str	r0, [r3, #40]	; 0x28
 800246a:	6383      	str	r3, [r0, #56]	; 0x38
    hDmaButtomRight.Init.PeriphDataAlignment = AUDIO_DFSDMx_DMAx_PERIPH_DATA_SIZE;
 800246c:	e9c0 a904 	strd	sl, r9, [r0, #16]
    hDmaButtomRight.Init.Mode                = DMA_CIRCULAR;
 8002470:	e9c0 8706 	strd	r8, r7, [r0, #24]
    
    /* Configure the DMA Channel */
    HAL_DMA_Init(&hDmaButtomRight);      
 8002474:	f001 fcb8 	bl	8003de8 <HAL_DMA_Init>
    
    /* DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002478:	2046      	movs	r0, #70	; 0x46
 800247a:	4622      	mov	r2, r4
 800247c:	2104      	movs	r1, #4
 800247e:	f001 fa03 	bl	8003888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_DFSDMx_DMAx_BUTTOM_RIGHT_IRQ); 
 8002482:	2046      	movs	r0, #70	; 0x46
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8002484:	f001 fa32 	bl	80038ec <HAL_NVIC_EnableIRQ>
}
 8002488:	b00f      	add	sp, #60	; 0x3c
 800248a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  AUDIO_IN_SAIx_CLK_ENABLE();
 800248e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002492:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002494:	2600      	movs	r6, #0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002496:	a909      	add	r1, sp, #36	; 0x24
  AUDIO_IN_SAIx_CLK_ENABLE();
 8002498:	6463      	str	r3, [r4, #68]	; 0x44
 800249a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800249c:	4848      	ldr	r0, [pc, #288]	; (80025c0 <BSP_AUDIO_IN_MspInit+0x2d8>)
  AUDIO_IN_SAIx_CLK_ENABLE();
 800249e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a2:	9305      	str	r3, [sp, #20]
 80024a4:	9b05      	ldr	r3, [sp, #20]
  AUDIO_IN_SAIx_SD_ENABLE();
 80024a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024a8:	f043 0310 	orr.w	r3, r3, #16
 80024ac:	6323      	str	r3, [r4, #48]	; 0x30
 80024ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	9306      	str	r3, [sp, #24]
 80024b6:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80024b8:	2308      	movs	r3, #8
 80024ba:	e9cd 3709 	strd	r3, r7, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 80024be:	2306      	movs	r3, #6
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80024c0:	e9cd 670b 	strd	r6, r7, [sp, #44]	; 0x2c
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 80024c4:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80024c6:	f001 fe75 	bl	80041b4 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 80024ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80024cc:	a909      	add	r1, sp, #36	; 0x24
 80024ce:	483d      	ldr	r0, [pc, #244]	; (80025c4 <BSP_AUDIO_IN_MspInit+0x2dc>)
  AUDIO_IN_INT_GPIO_ENABLE();
 80024d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d4:	6323      	str	r3, [r4, #48]	; 0x30
 80024d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	9307      	str	r3, [sp, #28]
 80024de:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80024e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80024e4:	e9cd 670b 	strd	r6, r7, [sp, #44]	; 0x2c
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80024e8:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80024ec:	f001 fe62 	bl	80041b4 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80024f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
 80024f2:	4a35      	ldr	r2, [pc, #212]	; (80025c8 <BSP_AUDIO_IN_MspInit+0x2e0>)
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80024f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024f8:	6323      	str	r3, [r4, #48]	; 0x30
 80024fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002500:	9308      	str	r3, [sp, #32]
 8002502:	9b08      	ldr	r3, [sp, #32]
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002504:	4b31      	ldr	r3, [pc, #196]	; (80025cc <BSP_AUDIO_IN_MspInit+0x2e4>)
 8002506:	6819      	ldr	r1, [r3, #0]
 8002508:	4291      	cmp	r1, r2
 800250a:	d127      	bne.n	800255c <BSP_AUDIO_IN_MspInit+0x274>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 800250c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002510:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002514:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002518:	462c      	mov	r4, r5
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800251a:	f8c5 60a4 	str.w	r6, [r5, #164]	; 0xa4
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800251e:	f8c5 60c8 	str.w	r6, [r5, #200]	; 0xc8
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002522:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002526:	e9c5 2627 	strd	r2, r6, [r5, #156]	; 0x9c
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800252a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800252e:	e9c5 122a 	strd	r1, r2, [r5, #168]	; 0xa8
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002536:	e9c5 022c 	strd	r0, r2, [r5, #176]	; 0xb0
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800253a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800253e:	e9c5 262e 	strd	r2, r6, [r5, #184]	; 0xb8
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002542:	2203      	movs	r2, #3
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002544:	e9c5 2630 	strd	r2, r6, [r5, #192]	; 0xc0
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002548:	4a21      	ldr	r2, [pc, #132]	; (80025d0 <BSP_AUDIO_IN_MspInit+0x2e8>)
 800254a:	f844 2f98 	str.w	r2, [r4, #152]!
    HAL_DMA_DeInit(&hdma_sai_rx);
 800254e:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002550:	671c      	str	r4, [r3, #112]	; 0x70
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002552:	f001 fcc7 	bl	8003ee4 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 8002556:	4620      	mov	r0, r4
 8002558:	f001 fc46 	bl	8003de8 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800255c:	2200      	movs	r2, #0
 800255e:	2104      	movs	r1, #4
 8002560:	203c      	movs	r0, #60	; 0x3c
 8002562:	f001 f991 	bl	8003888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8002566:	203c      	movs	r0, #60	; 0x3c
 8002568:	f001 f9c0 	bl	80038ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800256c:	2028      	movs	r0, #40	; 0x28
 800256e:	2200      	movs	r2, #0
 8002570:	2104      	movs	r1, #4
 8002572:	f001 f989 	bl	8003888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8002576:	2028      	movs	r0, #40	; 0x28
 8002578:	e784      	b.n	8002484 <BSP_AUDIO_IN_MspInit+0x19c>
 800257a:	bf00      	nop
 800257c:	20000608 	.word	0x20000608
 8002580:	40023800 	.word	0x40023800
 8002584:	40020c00 	.word	0x40020c00
 8002588:	40020800 	.word	0x40020800
 800258c:	200000f8 	.word	0x200000f8
 8002590:	20000a64 	.word	0x20000a64
 8002594:	40026410 	.word	0x40026410
 8002598:	200009ac 	.word	0x200009ac
 800259c:	20000a00 	.word	0x20000a00
 80025a0:	40026488 	.word	0x40026488
 80025a4:	20000bc0 	.word	0x20000bc0
 80025a8:	200008c8 	.word	0x200008c8
 80025ac:	400264a0 	.word	0x400264a0
 80025b0:	20000b34 	.word	0x20000b34
 80025b4:	20000c4c 	.word	0x20000c4c
 80025b8:	400264b8 	.word	0x400264b8
 80025bc:	200007f0 	.word	0x200007f0
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40022400 	.word	0x40022400
 80025c8:	40015824 	.word	0x40015824
 80025cc:	20000844 	.word	0x20000844
 80025d0:	40026470 	.word	0x40026470

080025d4 <BSP_AUDIO_IN_MspDeInit>:
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80025d4:	4b24      	ldr	r3, [pc, #144]	; (8002668 <BSP_AUDIO_IN_MspDeInit+0x94>)
 80025d6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
{
 80025da:	b510      	push	{r4, lr}
  if (AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80025dc:	bb2b      	cbnz	r3, 800262a <BSP_AUDIO_IN_MspDeInit+0x56>
  HAL_GPIO_DeInit(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, GPIO_InitStruct.Pin);
 80025de:	2108      	movs	r1, #8
 80025e0:	4822      	ldr	r0, [pc, #136]	; (800266c <BSP_AUDIO_IN_MspDeInit+0x98>)
  if(AudioIn_ChannelNumber > 2)
 80025e2:	4c23      	ldr	r4, [pc, #140]	; (8002670 <BSP_AUDIO_IN_MspDeInit+0x9c>)
  HAL_GPIO_DeInit(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, GPIO_InitStruct.Pin);
 80025e4:	f001 fed0 	bl	8004388 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, GPIO_InitStruct.Pin);
 80025e8:	2108      	movs	r1, #8
 80025ea:	4822      	ldr	r0, [pc, #136]	; (8002674 <BSP_AUDIO_IN_MspDeInit+0xa0>)
 80025ec:	f001 fecc 	bl	8004388 <HAL_GPIO_DeInit>
  if(AudioIn_ChannelNumber > 2)
 80025f0:	78a2      	ldrb	r2, [r4, #2]
 80025f2:	2a02      	cmp	r2, #2
 80025f4:	d908      	bls.n	8002608 <BSP_AUDIO_IN_MspDeInit+0x34>
    HAL_GPIO_DeInit(AUDIO_DFSDMx_CKOUT_DMIC_GPIO_PORT, GPIO_InitStruct.Pin);
 80025f6:	2108      	movs	r1, #8
 80025f8:	481c      	ldr	r0, [pc, #112]	; (800266c <BSP_AUDIO_IN_MspDeInit+0x98>)
 80025fa:	f001 fec5 	bl	8004388 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_DFSDMx_DMIC_DATIN_GPIO_PORT, GPIO_InitStruct.Pin);    
 80025fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002602:	481c      	ldr	r0, [pc, #112]	; (8002674 <BSP_AUDIO_IN_MspDeInit+0xa0>)
 8002604:	f001 fec0 	bl	8004388 <HAL_GPIO_DeInit>
  * @retval None
  */
static void DFSDMx_FilterMspDeInit(void)
{
  /* Configure the DMA Channel */
  HAL_DMA_DeInit(&hDmaTopLeft);
 8002608:	481b      	ldr	r0, [pc, #108]	; (8002678 <BSP_AUDIO_IN_MspDeInit+0xa4>)
 800260a:	f001 fc6b 	bl	8003ee4 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hDmaTopRight);
 800260e:	481b      	ldr	r0, [pc, #108]	; (800267c <BSP_AUDIO_IN_MspDeInit+0xa8>)
 8002610:	f001 fc68 	bl	8003ee4 <HAL_DMA_DeInit>
  if(AudioIn_ChannelNumber > 2)
 8002614:	78a3      	ldrb	r3, [r4, #2]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d925      	bls.n	8002666 <BSP_AUDIO_IN_MspDeInit+0x92>
  {
    HAL_DMA_DeInit(&hDmaButtomLeft);
 800261a:	4819      	ldr	r0, [pc, #100]	; (8002680 <BSP_AUDIO_IN_MspDeInit+0xac>)
 800261c:	f001 fc62 	bl	8003ee4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(&hDmaButtomRight);
 8002620:	4818      	ldr	r0, [pc, #96]	; (8002684 <BSP_AUDIO_IN_MspDeInit+0xb0>)
}
 8002622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(&hDmaButtomRight);
 8002626:	f001 bc5d 	b.w	8003ee4 <HAL_DMA_DeInit>
  if(hsai->Instance == AUDIO_IN_SAIx)
 800262a:	4c17      	ldr	r4, [pc, #92]	; (8002688 <BSP_AUDIO_IN_MspDeInit+0xb4>)
  HAL_NVIC_DisableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800262c:	203c      	movs	r0, #60	; 0x3c
 800262e:	f001 f96b 	bl	8003908 <HAL_NVIC_DisableIRQ>
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002632:	4b16      	ldr	r3, [pc, #88]	; (800268c <BSP_AUDIO_IN_MspDeInit+0xb8>)
 8002634:	6822      	ldr	r2, [r4, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d102      	bne.n	8002640 <BSP_AUDIO_IN_MspDeInit+0x6c>
    HAL_DMA_DeInit(hsai->hdmatx);
 800263a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800263c:	f001 fc52 	bl	8003ee4 <HAL_DMA_DeInit>
  __HAL_SAI_DISABLE(hsai);  
 8002640:	6822      	ldr	r2, [r4, #0]
  HAL_GPIO_DeInit(AUDIO_IN_SAIx_SD_GPIO_PORT, gpio_init_structure.Pin);
 8002642:	2108      	movs	r1, #8
 8002644:	4812      	ldr	r0, [pc, #72]	; (8002690 <BSP_AUDIO_IN_MspDeInit+0xbc>)
  __HAL_SAI_DISABLE(hsai);  
 8002646:	6813      	ldr	r3, [r2, #0]
 8002648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
  HAL_GPIO_DeInit(AUDIO_IN_SAIx_SD_GPIO_PORT, gpio_init_structure.Pin);
 800264e:	f001 fe9b 	bl	8004388 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(AUDIO_IN_INT_GPIO_PORT, gpio_init_structure.Pin);
 8002652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002656:	480f      	ldr	r0, [pc, #60]	; (8002694 <BSP_AUDIO_IN_MspDeInit+0xc0>)
 8002658:	f001 fe96 	bl	8004388 <HAL_GPIO_DeInit>
  AUDIO_IN_SAIx_CLK_DISABLE();  
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <BSP_AUDIO_IN_MspDeInit+0xc4>)
 800265e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002660:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
}
 8002666:	bd10      	pop	{r4, pc}
 8002668:	20000608 	.word	0x20000608
 800266c:	40020c00 	.word	0x40020c00
 8002670:	200000f8 	.word	0x200000f8
 8002674:	40020800 	.word	0x40020800
 8002678:	20000a64 	.word	0x20000a64
 800267c:	20000a00 	.word	0x20000a00
 8002680:	200008c8 	.word	0x200008c8
 8002684:	20000c4c 	.word	0x20000c4c
 8002688:	20000844 	.word	0x20000844
 800268c:	40015824 	.word	0x40015824
 8002690:	40021000 	.word	0x40021000
 8002694:	40022400 	.word	0x40022400
 8002698:	40023800 	.word	0x40023800

0800269c <BSP_AUDIO_IN_DeInit>:
{
 800269c:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_MspDeInit();
 800269e:	f7ff ff99 	bl	80025d4 <BSP_AUDIO_IN_MspDeInit>
  if(AudioIn_Device == INPUT_DEVICE_DIGITAL_MIC)
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <BSP_AUDIO_IN_DeInit+0x64>)
 80026a4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80026a8:	bb23      	cbnz	r3, 80026f4 <BSP_AUDIO_IN_DeInit+0x58>
  if(HAL_OK != HAL_DFSDM_FilterDeInit(&hAudioInTopLeftFilter))
 80026aa:	4816      	ldr	r0, [pc, #88]	; (8002704 <BSP_AUDIO_IN_DeInit+0x68>)
 80026ac:	f001 faef 	bl	8003c8e <HAL_DFSDM_FilterDeInit>
 80026b0:	bb20      	cbnz	r0, 80026fc <BSP_AUDIO_IN_DeInit+0x60>
  if(HAL_OK != HAL_DFSDM_FilterDeInit(&hAudioInTopRightFilter))
 80026b2:	4815      	ldr	r0, [pc, #84]	; (8002708 <BSP_AUDIO_IN_DeInit+0x6c>)
 80026b4:	f001 faeb 	bl	8003c8e <HAL_DFSDM_FilterDeInit>
 80026b8:	bb00      	cbnz	r0, 80026fc <BSP_AUDIO_IN_DeInit+0x60>
  if(HAL_OK != HAL_DFSDM_ChannelDeInit(&hAudioInTopLeftChannel))
 80026ba:	4814      	ldr	r0, [pc, #80]	; (800270c <BSP_AUDIO_IN_DeInit+0x70>)
 80026bc:	f001 fa46 	bl	8003b4c <HAL_DFSDM_ChannelDeInit>
 80026c0:	b9e0      	cbnz	r0, 80026fc <BSP_AUDIO_IN_DeInit+0x60>
  if(HAL_OK != HAL_DFSDM_ChannelDeInit(&hAudioInTopRightChannel))
 80026c2:	4813      	ldr	r0, [pc, #76]	; (8002710 <BSP_AUDIO_IN_DeInit+0x74>)
 80026c4:	f001 fa42 	bl	8003b4c <HAL_DFSDM_ChannelDeInit>
 80026c8:	b9c0      	cbnz	r0, 80026fc <BSP_AUDIO_IN_DeInit+0x60>
  if(AudioIn_ChannelNumber > 2)
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <BSP_AUDIO_IN_DeInit+0x78>)
 80026cc:	789b      	ldrb	r3, [r3, #2]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d914      	bls.n	80026fc <BSP_AUDIO_IN_DeInit+0x60>
    if(HAL_OK != HAL_DFSDM_FilterDeInit(&hAudioInButtomLeftFilter))
 80026d2:	4811      	ldr	r0, [pc, #68]	; (8002718 <BSP_AUDIO_IN_DeInit+0x7c>)
 80026d4:	f001 fadb 	bl	8003c8e <HAL_DFSDM_FilterDeInit>
 80026d8:	b980      	cbnz	r0, 80026fc <BSP_AUDIO_IN_DeInit+0x60>
    if(HAL_OK != HAL_DFSDM_FilterDeInit(&hAudioInButtomRightFilter))
 80026da:	4810      	ldr	r0, [pc, #64]	; (800271c <BSP_AUDIO_IN_DeInit+0x80>)
 80026dc:	f001 fad7 	bl	8003c8e <HAL_DFSDM_FilterDeInit>
 80026e0:	b960      	cbnz	r0, 80026fc <BSP_AUDIO_IN_DeInit+0x60>
    if(HAL_OK != HAL_DFSDM_ChannelDeInit(&hAudioInButtomLeftChannel))
 80026e2:	480f      	ldr	r0, [pc, #60]	; (8002720 <BSP_AUDIO_IN_DeInit+0x84>)
 80026e4:	f001 fa32 	bl	8003b4c <HAL_DFSDM_ChannelDeInit>
 80026e8:	b940      	cbnz	r0, 80026fc <BSP_AUDIO_IN_DeInit+0x60>
    if(HAL_OK != HAL_DFSDM_ChannelDeInit(&hAudioInButtomRightChannel))
 80026ea:	480e      	ldr	r0, [pc, #56]	; (8002724 <BSP_AUDIO_IN_DeInit+0x88>)
}
 80026ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(HAL_OK != HAL_DFSDM_ChannelDeInit(&hAudioInButtomRightChannel))
 80026f0:	f001 ba2c 	b.w	8003b4c <HAL_DFSDM_ChannelDeInit>
}
 80026f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SAIx_In_DeInit();
 80026f8:	f7ff bb76 	b.w	8001de8 <SAIx_In_DeInit>
}
 80026fc:	bd08      	pop	{r3, pc}
 80026fe:	bf00      	nop
 8002700:	20000608 	.word	0x20000608
 8002704:	200009ac 	.word	0x200009ac
 8002708:	20000bc0 	.word	0x20000bc0
 800270c:	20000ac4 	.word	0x20000ac4
 8002710:	20000afc 	.word	0x20000afc
 8002714:	200000f8 	.word	0x200000f8
 8002718:	20000b34 	.word	0x20000b34
 800271c:	200007f0 	.word	0x200007f0
 8002720:	20000c14 	.word	0x20000c14
 8002724:	20000b88 	.word	0x20000b88

08002728 <BSP_AUDIO_IN_ClockConfig>:
{ 
 8002728:	b510      	push	{r4, lr}
 800272a:	b0a4      	sub	sp, #144	; 0x90
 800272c:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800272e:	4668      	mov	r0, sp
 8002730:	f003 fc44 	bl	8005fbc <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8002734:	f642 3311 	movw	r3, #11025	; 0x2b11
 8002738:	429c      	cmp	r4, r3
 800273a:	d007      	beq.n	800274c <BSP_AUDIO_IN_ClockConfig+0x24>
 800273c:	f245 6322 	movw	r3, #22050	; 0x5622
 8002740:	429c      	cmp	r4, r3
 8002742:	d003      	beq.n	800274c <BSP_AUDIO_IN_ClockConfig+0x24>
 8002744:	f64a 4344 	movw	r3, #44100	; 0xac44
 8002748:	429c      	cmp	r4, r3
 800274a:	d119      	bne.n	8002780 <BSP_AUDIO_IN_ClockConfig+0x58>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800274c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    rcc_ex_clk_init_struct.PLLSAI.PLLSAIQ = 2;
 8002750:	f240 12ad 	movw	r2, #429	; 0x1ad
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002754:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8002756:	2300      	movs	r3, #0
 8002758:	9310      	str	r3, [sp, #64]	; 0x40
    rcc_ex_clk_init_struct.PLLSAI.PLLSAIQ = 2;
 800275a:	2302      	movs	r3, #2
 800275c:	e9cd 2305 	strd	r2, r3, [sp, #20]
    rcc_ex_clk_init_struct.PLLSAIDivQ = 19;
 8002760:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002762:	4668      	mov	r0, sp
    rcc_ex_clk_init_struct.PLLSAIDivQ = 1;      
 8002764:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002766:	f003 f97b 	bl	8005a60 <HAL_RCCEx_PeriphCLKConfig>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1_AUDIO;
 800276a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct); 
 800276e:	4668      	mov	r0, sp
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1_AUDIO;
 8002770:	9300      	str	r3, [sp, #0]
  rcc_ex_clk_init_struct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8002772:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002776:	9323      	str	r3, [sp, #140]	; 0x8c
  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct); 
 8002778:	f003 f972 	bl	8005a60 <HAL_RCCEx_PeriphCLKConfig>
}
 800277c:	b024      	add	sp, #144	; 0x90
 800277e:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002780:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    rcc_ex_clk_init_struct.PLLSAI.PLLSAIQ = 7; 
 8002784:	f44f 74ac 	mov.w	r4, #344	; 0x158
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002788:	9300      	str	r3, [sp, #0]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800278a:	2300      	movs	r3, #0
 800278c:	9310      	str	r3, [sp, #64]	; 0x40
    rcc_ex_clk_init_struct.PLLSAI.PLLSAIQ = 7; 
 800278e:	2307      	movs	r3, #7
 8002790:	e9cd 4305 	strd	r4, r3, [sp, #20]
    rcc_ex_clk_init_struct.PLLSAIDivQ = 1;      
 8002794:	2301      	movs	r3, #1
 8002796:	e7e4      	b.n	8002762 <BSP_AUDIO_IN_ClockConfig+0x3a>

08002798 <BSP_AUDIO_IN_InitEx>:
  AudioIn_Device = InputDevice;
 8002798:	4ab0      	ldr	r2, [pc, #704]	; (8002a5c <BSP_AUDIO_IN_InitEx+0x2c4>)
{ 
 800279a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800279e:	4682      	mov	sl, r0
 80027a0:	b087      	sub	sp, #28
 80027a2:	460c      	mov	r4, r1
  AudioIn_Device = InputDevice;
 80027a4:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
  if(InputDevice == INPUT_DEVICE_DIGITAL_MIC)
 80027a8:	2800      	cmp	r0, #0
 80027aa:	f040 81ac 	bne.w	8002b06 <BSP_AUDIO_IN_InitEx+0x36e>
    AudioIn_ChannelNumber = ChnlNbr;
 80027ae:	4dac      	ldr	r5, [pc, #688]	; (8002a60 <BSP_AUDIO_IN_InitEx+0x2c8>)
    BSP_AUDIO_IN_ClockConfig(&hAudioInTopLeftFilter, AudioFreq, NULL);
 80027b0:	4602      	mov	r2, r0
 80027b2:	48ac      	ldr	r0, [pc, #688]	; (8002a64 <BSP_AUDIO_IN_InitEx+0x2cc>)
    AudioIn_ChannelNumber = ChnlNbr;
 80027b4:	70ab      	strb	r3, [r5, #2]
    BSP_AUDIO_IN_ClockConfig(&hAudioInTopLeftFilter, AudioFreq, NULL);
 80027b6:	f7ff ffb7 	bl	8002728 <BSP_AUDIO_IN_ClockConfig>
    BSP_AUDIO_IN_MspInit();
 80027ba:	f7ff fd95 	bl	80022e8 <BSP_AUDIO_IN_MspInit>
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopLeftChannel);  
 80027be:	4baa      	ldr	r3, [pc, #680]	; (8002a68 <BSP_AUDIO_IN_InitEx+0x2d0>)
  hAudioInTopLeftChannel.Instance                      = DFSDM1_Channel1;  
 80027c0:	4aaa      	ldr	r2, [pc, #680]	; (8002a6c <BSP_AUDIO_IN_InitEx+0x2d4>)
  hAudioInTopLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80027c2:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopLeftChannel);  
 80027c6:	f883 a034 	strb.w	sl, [r3, #52]	; 0x34
  hAudioInTopLeftChannel.Instance                      = DFSDM1_Channel1;  
 80027ca:	601a      	str	r2, [r3, #0]
  hAudioInTopLeftChannel.Init.OutputClock.Activation   = ENABLE;
 80027cc:	f04f 0201 	mov.w	r2, #1
 80027d0:	9503      	str	r5, [sp, #12]
 80027d2:	711a      	strb	r2, [r3, #4]
  hAudioInTopLeftChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80027d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027d8:	609a      	str	r2, [r3, #8]
  hAudioInTopLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80027da:	f000 8081 	beq.w	80028e0 <BSP_AUDIO_IN_InitEx+0x148>
 80027de:	f642 3211 	movw	r2, #11025	; 0x2b11
 80027e2:	4294      	cmp	r4, r2
 80027e4:	d07e      	beq.n	80028e4 <BSP_AUDIO_IN_InitEx+0x14c>
 80027e6:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
 80027ea:	d079      	beq.n	80028e0 <BSP_AUDIO_IN_InitEx+0x148>
 80027ec:	f245 6222 	movw	r2, #22050	; 0x5622
 80027f0:	4294      	cmp	r4, r2
 80027f2:	d077      	beq.n	80028e4 <BSP_AUDIO_IN_InitEx+0x14c>
 80027f4:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
 80027f8:	d072      	beq.n	80028e0 <BSP_AUDIO_IN_InitEx+0x148>
 80027fa:	f64a 4244 	movw	r2, #44100	; 0xac44
 80027fe:	4294      	cmp	r4, r2
 8002800:	d070      	beq.n	80028e4 <BSP_AUDIO_IN_InitEx+0x14c>
 8002802:	f64b 3580 	movw	r5, #48000	; 0xbb80
 8002806:	42ac      	cmp	r4, r5
 8002808:	bf0c      	ite	eq
 800280a:	2510      	moveq	r5, #16
 800280c:	2519      	movne	r5, #25
  hAudioInTopLeftChannel.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800280e:	2200      	movs	r2, #0
  hAudioInTopLeftChannel.Init.Awd.FilterOrder          = DFSDM_FILTER_ORDER(AudioFreq);
 8002810:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
  hAudioInTopLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8002814:	60dd      	str	r5, [r3, #12]
  hAudioInTopLeftChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8002816:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hAudioInTopLeftChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 800281a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hAudioInTopLeftChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800281e:	f04f 0204 	mov.w	r2, #4
 8002822:	621a      	str	r2, [r3, #32]
  hAudioInTopLeftChannel.Init.Awd.FilterOrder          = DFSDM_FILTER_ORDER(AudioFreq);
 8002824:	d063      	beq.n	80028ee <BSP_AUDIO_IN_InitEx+0x156>
 8002826:	f642 3211 	movw	r2, #11025	; 0x2b11
 800282a:	4294      	cmp	r4, r2
 800282c:	d05f      	beq.n	80028ee <BSP_AUDIO_IN_InitEx+0x156>
 800282e:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
 8002832:	d05c      	beq.n	80028ee <BSP_AUDIO_IN_InitEx+0x156>
 8002834:	f245 6222 	movw	r2, #22050	; 0x5622
 8002838:	4294      	cmp	r4, r2
 800283a:	d058      	beq.n	80028ee <BSP_AUDIO_IN_InitEx+0x156>
 800283c:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
 8002840:	d052      	beq.n	80028e8 <BSP_AUDIO_IN_InitEx+0x150>
 8002842:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002846:	4294      	cmp	r4, r2
 8002848:	d051      	beq.n	80028ee <BSP_AUDIO_IN_InitEx+0x156>
 800284a:	f64b 3780 	movw	r7, #48000	; 0xbb80
 800284e:	42bc      	cmp	r4, r7
 8002850:	bf14      	ite	ne
 8002852:	f04f 4720 	movne.w	r7, #2684354560	; 0xa0000000
 8002856:	f04f 47c0 	moveq.w	r7, #1610612736	; 0x60000000
  hAudioInTopLeftChannel.Init.Awd.Oversampling         = DFSDM_OVER_SAMPLING(AudioFreq);
 800285a:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
  hAudioInTopLeftChannel.Init.Awd.FilterOrder          = DFSDM_FILTER_ORDER(AudioFreq);
 800285e:	625f      	str	r7, [r3, #36]	; 0x24
  hAudioInTopLeftChannel.Init.Awd.Oversampling         = DFSDM_OVER_SAMPLING(AudioFreq);
 8002860:	d048      	beq.n	80028f4 <BSP_AUDIO_IN_InitEx+0x15c>
 8002862:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002866:	4294      	cmp	r4, r2
 8002868:	d044      	beq.n	80028f4 <BSP_AUDIO_IN_InitEx+0x15c>
 800286a:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
 800286e:	d044      	beq.n	80028fa <BSP_AUDIO_IN_InitEx+0x162>
 8002870:	f245 6222 	movw	r2, #22050	; 0x5622
 8002874:	4294      	cmp	r4, r2
 8002876:	d040      	beq.n	80028fa <BSP_AUDIO_IN_InitEx+0x162>
 8002878:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
 800287c:	d03f      	beq.n	80028fe <BSP_AUDIO_IN_InitEx+0x166>
 800287e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002882:	4294      	cmp	r4, r2
 8002884:	d03b      	beq.n	80028fe <BSP_AUDIO_IN_InitEx+0x166>
 8002886:	f64b 3680 	movw	r6, #48000	; 0xbb80
 800288a:	42b4      	cmp	r4, r6
 800288c:	bf14      	ite	ne
 800288e:	2614      	movne	r6, #20
 8002890:	2640      	moveq	r6, #64	; 0x40
  hAudioInTopLeftChannel.Init.Offset                   = 0;
 8002892:	2200      	movs	r2, #0
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8002894:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
  hAudioInTopLeftChannel.Init.Awd.Oversampling         = DFSDM_OVER_SAMPLING(AudioFreq);
 8002898:	629e      	str	r6, [r3, #40]	; 0x28
  hAudioInTopLeftChannel.Init.Offset                   = 0;
 800289a:	62da      	str	r2, [r3, #44]	; 0x2c
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 800289c:	d031      	beq.n	8002902 <BSP_AUDIO_IN_InitEx+0x16a>
 800289e:	f642 3111 	movw	r1, #11025	; 0x2b11
 80028a2:	428c      	cmp	r4, r1
 80028a4:	d02d      	beq.n	8002902 <BSP_AUDIO_IN_InitEx+0x16a>
 80028a6:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
 80028aa:	d02c      	beq.n	8002906 <BSP_AUDIO_IN_InitEx+0x16e>
 80028ac:	f245 6122 	movw	r1, #22050	; 0x5622
 80028b0:	428c      	cmp	r4, r1
 80028b2:	d02a      	beq.n	800290a <BSP_AUDIO_IN_InitEx+0x172>
 80028b4:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
 80028b8:	d029      	beq.n	800290e <BSP_AUDIO_IN_InitEx+0x176>
 80028ba:	f64a 4144 	movw	r1, #44100	; 0xac44
 80028be:	428c      	cmp	r4, r1
 80028c0:	d027      	beq.n	8002912 <BSP_AUDIO_IN_InitEx+0x17a>
 80028c2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80028c6:	4294      	cmp	r4, r2
 80028c8:	bf14      	ite	ne
 80028ca:	2404      	movne	r4, #4
 80028cc:	2400      	moveq	r4, #0
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopLeftChannel))
 80028ce:	4866      	ldr	r0, [pc, #408]	; (8002a68 <BSP_AUDIO_IN_InitEx+0x2d0>)
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 80028d0:	631c      	str	r4, [r3, #48]	; 0x30
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopLeftChannel))
 80028d2:	f001 f8c7 	bl	8003a64 <HAL_DFSDM_ChannelInit>
 80028d6:	b1f0      	cbz	r0, 8002916 <BSP_AUDIO_IN_InitEx+0x17e>
    ret = AUDIO_OK;
 80028d8:	2000      	movs	r0, #0
}
 80028da:	b007      	add	sp, #28
 80028dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  hAudioInTopLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 80028e0:	2518      	movs	r5, #24
 80028e2:	e794      	b.n	800280e <BSP_AUDIO_IN_InitEx+0x76>
 80028e4:	2504      	movs	r5, #4
 80028e6:	e792      	b.n	800280e <BSP_AUDIO_IN_InitEx+0x76>
  hAudioInTopLeftChannel.Init.Awd.FilterOrder          = DFSDM_FILTER_ORDER(AudioFreq);
 80028e8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80028ec:	e7b5      	b.n	800285a <BSP_AUDIO_IN_InitEx+0xc2>
 80028ee:	f04f 47c0 	mov.w	r7, #1610612736	; 0x60000000
 80028f2:	e7b2      	b.n	800285a <BSP_AUDIO_IN_InitEx+0xc2>
  hAudioInTopLeftChannel.Init.Awd.Oversampling         = DFSDM_OVER_SAMPLING(AudioFreq);
 80028f4:	f44f 7680 	mov.w	r6, #256	; 0x100
 80028f8:	e7cb      	b.n	8002892 <BSP_AUDIO_IN_InitEx+0xfa>
 80028fa:	2680      	movs	r6, #128	; 0x80
 80028fc:	e7c9      	b.n	8002892 <BSP_AUDIO_IN_InitEx+0xfa>
 80028fe:	2640      	movs	r6, #64	; 0x40
 8002900:	e7c7      	b.n	8002892 <BSP_AUDIO_IN_InitEx+0xfa>
  hAudioInTopLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8002902:	2408      	movs	r4, #8
 8002904:	e7e3      	b.n	80028ce <BSP_AUDIO_IN_InitEx+0x136>
 8002906:	2403      	movs	r4, #3
 8002908:	e7e1      	b.n	80028ce <BSP_AUDIO_IN_InitEx+0x136>
 800290a:	2404      	movs	r4, #4
 800290c:	e7df      	b.n	80028ce <BSP_AUDIO_IN_InitEx+0x136>
 800290e:	2407      	movs	r4, #7
 8002910:	e7dd      	b.n	80028ce <BSP_AUDIO_IN_InitEx+0x136>
 8002912:	4614      	mov	r4, r2
 8002914:	e7db      	b.n	80028ce <BSP_AUDIO_IN_InitEx+0x136>
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopRightChannel);  
 8002916:	4b56      	ldr	r3, [pc, #344]	; (8002a70 <BSP_AUDIO_IN_InitEx+0x2d8>)
  hAudioInTopRightChannel.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002918:	f04f 0a04 	mov.w	sl, #4
  hAudioInTopRightChannel.Instance                      = DFSDM1_Channel0;  
 800291c:	4a55      	ldr	r2, [pc, #340]	; (8002a74 <BSP_AUDIO_IN_InitEx+0x2dc>)
  hAudioInTopRightChannel.Init.Awd.Oversampling         = 10;
 800291e:	f04f 0b0a 	mov.w	fp, #10
  hAudioInTopRightChannel.Init.OutputClock.Activation   = ENABLE;
 8002922:	f04f 0901 	mov.w	r9, #1
  hAudioInTopRightChannel.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8002926:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  hAudioInTopRightChannel.Instance                      = DFSDM1_Channel0;  
 800292a:	601a      	str	r2, [r3, #0]
  hAudioInTopRightChannel.Init.Input.Pins               = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800292c:	f44f 7280 	mov.w	r2, #256	; 0x100
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInTopRightChannel);  
 8002930:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
  hAudioInTopRightChannel.Init.OutputClock.Activation   = ENABLE;
 8002934:	f883 9004 	strb.w	r9, [r3, #4]
  hAudioInTopRightChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8002938:	631c      	str	r4, [r3, #48]	; 0x30
  hAudioInTopRightChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 800293a:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hAudioInTopRightChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 800293e:	e9c3 a008 	strd	sl, r0, [r3, #32]
  hAudioInTopRightChannel.Init.Offset                   = 0;
 8002942:	e9c3 b00a 	strd	fp, r0, [r3, #40]	; 0x28
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopRightChannel))
 8002946:	4618      	mov	r0, r3
  hAudioInTopRightChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8002948:	e9c3 8502 	strd	r8, r5, [r3, #8]
  hAudioInTopRightChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_FALLING;
 800294c:	e9c3 2906 	strd	r2, r9, [r3, #24]
  if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInTopRightChannel))
 8002950:	f001 f888 	bl	8003a64 <HAL_DFSDM_ChannelInit>
 8002954:	2800      	cmp	r0, #0
 8002956:	d1bf      	bne.n	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
  if(AudioIn_ChannelNumber > 2)
 8002958:	9b03      	ldr	r3, [sp, #12]
 800295a:	789b      	ldrb	r3, [r3, #2]
 800295c:	2b02      	cmp	r3, #2
 800295e:	f200 809f 	bhi.w	8002aa0 <BSP_AUDIO_IN_InitEx+0x308>
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopLeftFilter);
 8002962:	4d40      	ldr	r5, [pc, #256]	; (8002a64 <BSP_AUDIO_IN_InitEx+0x2cc>)
 8002964:	2300      	movs	r3, #0
  hAudioInTopLeftFilter.Init.RegularParam.FastMode        = ENABLE;
 8002966:	2401      	movs	r4, #1
  hAudioInTopLeftFilter.Instance                          = AUDIO_DFSDMx_TOP_LEFT_FILTER;  
 8002968:	4a43      	ldr	r2, [pc, #268]	; (8002a78 <BSP_AUDIO_IN_InitEx+0x2e0>)
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800296a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopLeftFilter))
 800296e:	4628      	mov	r0, r5
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopLeftFilter);
 8002970:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
  hAudioInTopLeftFilter.Init.RegularParam.FastMode        = ENABLE;
 8002974:	722c      	strb	r4, [r5, #8]
  hAudioInTopLeftFilter.Init.RegularParam.DmaMode         = ENABLE;
 8002976:	726c      	strb	r4, [r5, #9]
  hAudioInTopLeftFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8002978:	60eb      	str	r3, [r5, #12]
  hAudioInTopLeftFilter.Init.InjectedParam.ScanMode       = ENABLE;
 800297a:	742c      	strb	r4, [r5, #16]
  hAudioInTopLeftFilter.Init.InjectedParam.DmaMode        = DISABLE;
 800297c:	746b      	strb	r3, [r5, #17]
  hAudioInTopLeftFilter.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800297e:	616b      	str	r3, [r5, #20]
  hAudioInTopLeftFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SW_TRIGGER;
 8002980:	e9c5 2300 	strd	r2, r3, [r5]
  hAudioInTopLeftFilter.Init.FilterParam.SincOrder        = DFSDM_FILTER_ORDER(AudioFreq);
 8002984:	e9c5 9706 	strd	r9, r7, [r5, #24]
  hAudioInTopLeftFilter.Init.FilterParam.IntOversampling  = 1;
 8002988:	e9c5 6408 	strd	r6, r4, [r5, #32]
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopLeftFilter))
 800298c:	f001 f90c 	bl	8003ba8 <HAL_DFSDM_FilterInit>
 8002990:	2800      	cmp	r0, #0
 8002992:	d1a1      	bne.n	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
  if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopLeftFilter, AUDIO_DFSDMx_TOP_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8002994:	4622      	mov	r2, r4
 8002996:	4939      	ldr	r1, [pc, #228]	; (8002a7c <BSP_AUDIO_IN_InitEx+0x2e4>)
 8002998:	4628      	mov	r0, r5
 800299a:	f001 f988 	bl	8003cae <HAL_DFSDM_FilterConfigRegChannel>
 800299e:	2800      	cmp	r0, #0
 80029a0:	d19a      	bne.n	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopRightFilter);
 80029a2:	4d37      	ldr	r5, [pc, #220]	; (8002a80 <BSP_AUDIO_IN_InitEx+0x2e8>)
  hAudioInTopRightFilter.Instance                          = AUDIO_DFSDMx_TOP_RIGHT_FILTER;
 80029a4:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <BSP_AUDIO_IN_InitEx+0x2ec>)
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInTopRightFilter);
 80029a6:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
  hAudioInTopRightFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80029aa:	60e8      	str	r0, [r5, #12]
  hAudioInTopRightFilter.Init.InjectedParam.ScanMode       = DISABLE;
 80029ac:	7428      	strb	r0, [r5, #16]
  hAudioInTopRightFilter.Init.InjectedParam.DmaMode        = DISABLE;
 80029ae:	7468      	strb	r0, [r5, #17]
  hAudioInTopRightFilter.Init.RegularParam.FastMode        = ENABLE;
 80029b0:	722c      	strb	r4, [r5, #8]
  hAudioInTopRightFilter.Init.RegularParam.DmaMode         = ENABLE;
 80029b2:	726c      	strb	r4, [r5, #9]
  hAudioInTopRightFilter.Init.FilterParam.IntOversampling  = 1;
 80029b4:	626c      	str	r4, [r5, #36]	; 0x24
  hAudioInTopRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80029b6:	e9c5 0905 	strd	r0, r9, [r5, #20]
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopRightFilter))
 80029ba:	4628      	mov	r0, r5
  hAudioInTopRightFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 80029bc:	e9c5 3400 	strd	r3, r4, [r5]
  hAudioInTopRightFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 80029c0:	e9c5 7607 	strd	r7, r6, [r5, #28]
  if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInTopRightFilter))
 80029c4:	f001 f8f0 	bl	8003ba8 <HAL_DFSDM_FilterInit>
 80029c8:	2800      	cmp	r0, #0
 80029ca:	d185      	bne.n	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
  if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInTopRightFilter, AUDIO_DFSDMx_TOP_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 80029cc:	4622      	mov	r2, r4
 80029ce:	4621      	mov	r1, r4
 80029d0:	4628      	mov	r0, r5
 80029d2:	f001 f96c 	bl	8003cae <HAL_DFSDM_FilterConfigRegChannel>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	f47f af7e 	bne.w	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
  if(AudioIn_ChannelNumber > 2)
 80029dc:	9b03      	ldr	r3, [sp, #12]
 80029de:	789b      	ldrb	r3, [r3, #2]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	f67f af79 	bls.w	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomLeftFilter);
 80029e6:	4d28      	ldr	r5, [pc, #160]	; (8002a88 <BSP_AUDIO_IN_InitEx+0x2f0>)
    hAudioInButtomLeftFilter.Instance                          = AUDIO_DFSDMx_BUTTOM_LEFT_FILTER;  
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <BSP_AUDIO_IN_InitEx+0x2f4>)
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomLeftFilter);
 80029ea:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    hAudioInButtomLeftFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 80029ee:	60e8      	str	r0, [r5, #12]
    hAudioInButtomLeftFilter.Init.InjectedParam.DmaMode        = DISABLE;
 80029f0:	7468      	strb	r0, [r5, #17]
    hAudioInButtomLeftFilter.Init.RegularParam.FastMode        = ENABLE;
 80029f2:	722c      	strb	r4, [r5, #8]
    hAudioInButtomLeftFilter.Init.RegularParam.DmaMode         = ENABLE;
 80029f4:	726c      	strb	r4, [r5, #9]
    hAudioInButtomLeftFilter.Init.InjectedParam.ScanMode       = ENABLE;
 80029f6:	742c      	strb	r4, [r5, #16]
    hAudioInButtomLeftFilter.Init.FilterParam.IntOversampling  = 1;
 80029f8:	626c      	str	r4, [r5, #36]	; 0x24
    hAudioInButtomLeftFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80029fa:	e9c5 0905 	strd	r0, r9, [r5, #20]
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomLeftFilter))
 80029fe:	4628      	mov	r0, r5
    hAudioInButtomLeftFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 8002a00:	e9c5 3400 	strd	r3, r4, [r5]
    hAudioInButtomLeftFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 8002a04:	e9c5 7607 	strd	r7, r6, [r5, #28]
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomLeftFilter))
 8002a08:	f001 f8ce 	bl	8003ba8 <HAL_DFSDM_FilterInit>
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	f47f af63 	bne.w	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
    if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomLeftFilter, AUDIO_DFSDMx_BUTTOM_LEFT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8002a12:	4622      	mov	r2, r4
 8002a14:	491e      	ldr	r1, [pc, #120]	; (8002a90 <BSP_AUDIO_IN_InitEx+0x2f8>)
 8002a16:	4628      	mov	r0, r5
 8002a18:	f001 f949 	bl	8003cae <HAL_DFSDM_FilterConfigRegChannel>
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	f47f af5b 	bne.w	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomRightFilter);
 8002a22:	4d1c      	ldr	r5, [pc, #112]	; (8002a94 <BSP_AUDIO_IN_InitEx+0x2fc>)
    hAudioInButtomRightFilter.Instance                          = AUDIO_DFSDMx_BUTTOM_RIGHT_FILTER;
 8002a24:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <BSP_AUDIO_IN_InitEx+0x300>)
    __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hAudioInButtomRightFilter);
 8002a26:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    hAudioInButtomRightFilter.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER;
 8002a2a:	60e8      	str	r0, [r5, #12]
    hAudioInButtomRightFilter.Init.InjectedParam.ScanMode       = DISABLE;
 8002a2c:	7428      	strb	r0, [r5, #16]
    hAudioInButtomRightFilter.Init.InjectedParam.DmaMode        = DISABLE;
 8002a2e:	7468      	strb	r0, [r5, #17]
    hAudioInButtomRightFilter.Init.RegularParam.FastMode        = ENABLE;
 8002a30:	722c      	strb	r4, [r5, #8]
    hAudioInButtomRightFilter.Init.RegularParam.DmaMode         = ENABLE;
 8002a32:	726c      	strb	r4, [r5, #9]
    hAudioInButtomRightFilter.Init.FilterParam.IntOversampling  = 1;
 8002a34:	626c      	str	r4, [r5, #36]	; 0x24
    hAudioInButtomRightFilter.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8002a36:	e9c5 0905 	strd	r0, r9, [r5, #20]
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomRightFilter))
 8002a3a:	4628      	mov	r0, r5
    hAudioInButtomRightFilter.Init.RegularParam.Trigger         = DFSDM_FILTER_SYNC_TRIGGER;
 8002a3c:	e9c5 3400 	strd	r3, r4, [r5]
    hAudioInButtomRightFilter.Init.FilterParam.Oversampling     = DFSDM_OVER_SAMPLING(AudioFreq);
 8002a40:	e9c5 7607 	strd	r7, r6, [r5, #28]
    if(HAL_OK != HAL_DFSDM_FilterInit(&hAudioInButtomRightFilter))
 8002a44:	f001 f8b0 	bl	8003ba8 <HAL_DFSDM_FilterInit>
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	f47f af45 	bne.w	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
    if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&hAudioInButtomRightFilter, AUDIO_DFSDMx_BUTTOM_RIGHT_CHANNEL, DFSDM_CONTINUOUS_CONV_ON))
 8002a4e:	4622      	mov	r2, r4
 8002a50:	4912      	ldr	r1, [pc, #72]	; (8002a9c <BSP_AUDIO_IN_InitEx+0x304>)
 8002a52:	4628      	mov	r0, r5
 8002a54:	f001 f92b 	bl	8003cae <HAL_DFSDM_FilterConfigRegChannel>
 8002a58:	e73e      	b.n	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
 8002a5a:	bf00      	nop
 8002a5c:	20000608 	.word	0x20000608
 8002a60:	200000f8 	.word	0x200000f8
 8002a64:	200009ac 	.word	0x200009ac
 8002a68:	20000ac4 	.word	0x20000ac4
 8002a6c:	40017420 	.word	0x40017420
 8002a70:	20000afc 	.word	0x20000afc
 8002a74:	40017400 	.word	0x40017400
 8002a78:	40017500 	.word	0x40017500
 8002a7c:	00010002 	.word	0x00010002
 8002a80:	20000bc0 	.word	0x20000bc0
 8002a84:	40017580 	.word	0x40017580
 8002a88:	20000b34 	.word	0x20000b34
 8002a8c:	40017600 	.word	0x40017600
 8002a90:	00050020 	.word	0x00050020
 8002a94:	200007f0 	.word	0x200007f0
 8002a98:	40017680 	.word	0x40017680
 8002a9c:	00040010 	.word	0x00040010
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomLeftChannel);  
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <BSP_AUDIO_IN_InitEx+0x4ac>)
    hAudioInButtomLeftChannel.Instance                      = DFSDM1_Channel5;  
 8002aa2:	4a69      	ldr	r2, [pc, #420]	; (8002c48 <BSP_AUDIO_IN_InitEx+0x4b0>)
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomLeftChannel);  
 8002aa4:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
    hAudioInButtomLeftChannel.Instance                      = DFSDM1_Channel5;  
 8002aa8:	601a      	str	r2, [r3, #0]
    hAudioInButtomLeftChannel.Init.OutputClock.Activation   = ENABLE;
 8002aaa:	f883 9004 	strb.w	r9, [r3, #4]
    hAudioInButtomLeftChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8002aae:	631c      	str	r4, [r3, #48]	; 0x30
    hAudioInButtomLeftChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8002ab0:	e9c3 0004 	strd	r0, r0, [r3, #16]
    hAudioInButtomLeftChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8002ab4:	e9c3 0006 	strd	r0, r0, [r3, #24]
    hAudioInButtomLeftChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002ab8:	e9c3 a008 	strd	sl, r0, [r3, #32]
    hAudioInButtomLeftChannel.Init.Offset                   = 0;
 8002abc:	e9c3 b00a 	strd	fp, r0, [r3, #40]	; 0x28
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomLeftChannel))
 8002ac0:	4618      	mov	r0, r3
    hAudioInButtomLeftChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8002ac2:	e9c3 8502 	strd	r8, r5, [r3, #8]
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomLeftChannel))
 8002ac6:	f000 ffcd 	bl	8003a64 <HAL_DFSDM_ChannelInit>
 8002aca:	2800      	cmp	r0, #0
 8002acc:	f47f af04 	bne.w	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomRightChannel);  
 8002ad0:	4b5e      	ldr	r3, [pc, #376]	; (8002c4c <BSP_AUDIO_IN_InitEx+0x4b4>)
    hAudioInButtomRightChannel.Instance                      = DFSDM1_Channel4;  
 8002ad2:	4a5f      	ldr	r2, [pc, #380]	; (8002c50 <BSP_AUDIO_IN_InitEx+0x4b8>)
    __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hAudioInButtomRightChannel);  
 8002ad4:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
    hAudioInButtomRightChannel.Instance                      = DFSDM1_Channel4;  
 8002ad8:	601a      	str	r2, [r3, #0]
    hAudioInButtomRightChannel.Init.Input.Pins               = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8002ada:	f44f 7280 	mov.w	r2, #256	; 0x100
    hAudioInButtomRightChannel.Init.OutputClock.Activation   = ENABLE;
 8002ade:	f883 9004 	strb.w	r9, [r3, #4]
    hAudioInButtomRightChannel.Init.RightBitShift            = DFSDM_RIGHT_BIT_SHIFT(AudioFreq);
 8002ae2:	631c      	str	r4, [r3, #48]	; 0x30
    hAudioInButtomRightChannel.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE;
 8002ae4:	e9c3 0004 	strd	r0, r0, [r3, #16]
    hAudioInButtomRightChannel.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002ae8:	e9c3 a008 	strd	sl, r0, [r3, #32]
    hAudioInButtomRightChannel.Init.Offset                   = 0;
 8002aec:	e9c3 b00a 	strd	fp, r0, [r3, #40]	; 0x28
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomRightChannel))
 8002af0:	4618      	mov	r0, r3
    hAudioInButtomRightChannel.Init.OutputClock.Divider      = DFSDM_CLOCK_DIVIDER(AudioFreq);
 8002af2:	e9c3 8502 	strd	r8, r5, [r3, #8]
    hAudioInButtomRightChannel.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_FALLING;
 8002af6:	e9c3 2906 	strd	r2, r9, [r3, #24]
    if(HAL_OK != HAL_DFSDM_ChannelInit(&hAudioInButtomRightChannel))
 8002afa:	f000 ffb3 	bl	8003a64 <HAL_DFSDM_ChannelInit>
 8002afe:	2800      	cmp	r0, #0
 8002b00:	f43f af2f 	beq.w	8002962 <BSP_AUDIO_IN_InitEx+0x1ca>
 8002b04:	e6e8      	b.n	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 8002b06:	4d53      	ldr	r5, [pc, #332]	; (8002c54 <BSP_AUDIO_IN_InitEx+0x4bc>)
    SAIx_In_DeInit();
 8002b08:	f7ff f96e 	bl	8001de8 <SAIx_In_DeInit>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002b0c:	4e52      	ldr	r6, [pc, #328]	; (8002c58 <BSP_AUDIO_IN_InitEx+0x4c0>)
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL);
 8002b0e:	4621      	mov	r1, r4
 8002b10:	2200      	movs	r2, #0
 8002b12:	4628      	mov	r0, r5
 8002b14:	f7ff fa10 	bl	8001f38 <BSP_AUDIO_OUT_ClockConfig>
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8002b18:	4628      	mov	r0, r5
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002b1a:	602e      	str	r6, [r5, #0]
 8002b1c:	46b1      	mov	r9, r6
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8002b1e:	f003 fd90 	bl	8006642 <HAL_SAI_GetState>
 8002b22:	4601      	mov	r1, r0
 8002b24:	b920      	cbnz	r0, 8002b30 <BSP_AUDIO_IN_InitEx+0x398>
    BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);
 8002b26:	4628      	mov	r0, r5
 8002b28:	f7ff f97a 	bl	8001e20 <BSP_AUDIO_OUT_MspInit>
    BSP_AUDIO_IN_MspInit();
 8002b2c:	f7ff fbdc 	bl	80022e8 <BSP_AUDIO_IN_MspInit>
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002b30:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <BSP_AUDIO_IN_InitEx+0x4c4>)
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8002b32:	2700      	movs	r7, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002b34:	4d4a      	ldr	r5, [pc, #296]	; (8002c60 <BSP_AUDIO_IN_InitEx+0x4c8>)
  haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_RX;
 8002b36:	f04f 0801 	mov.w	r8, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002b3a:	681a      	ldr	r2, [r3, #0]
  haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 8002b3c:	2180      	movs	r1, #128	; 0x80
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002b3e:	602b      	str	r3, [r5, #0]
  haudio_out_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8002b40:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002b44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  HAL_SAI_Init(&haudio_out_sai);
 8002b48:	4628      	mov	r0, r5
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002b4a:	4e42      	ldr	r6, [pc, #264]	; (8002c54 <BSP_AUDIO_IN_InitEx+0x4bc>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002b4c:	601a      	str	r2, [r3, #0]
  haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 8002b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  haudio_out_sai.FrameInit.FrameLength       = 64;
 8002b52:	2240      	movs	r2, #64	; 0x40
  haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 8002b54:	6369      	str	r1, [r5, #52]	; 0x34
  haudio_out_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 8002b56:	612b      	str	r3, [r5, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002b58:	2320      	movs	r3, #32
  haudio_out_sai.FrameInit.FrameLength       = 64;
 8002b5a:	642a      	str	r2, [r5, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002b5c:	646b      	str	r3, [r5, #68]	; 0x44
 8002b5e:	9303      	str	r3, [sp, #12]
  haudio_out_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8002b60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  haudio_out_sai.FrameInit.FrameLength       = 64;
 8002b64:	9204      	str	r2, [sp, #16]
  haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_02;
 8002b66:	2204      	movs	r2, #4
  haudio_out_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8002b68:	626f      	str	r7, [r5, #36]	; 0x24
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002b6a:	61ec      	str	r4, [r5, #28]
  haudio_out_sai.Init.AudioMode      = SAI_MODEMASTER_RX;
 8002b6c:	f8c5 8004 	str.w	r8, [r5, #4]
  haudio_out_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8002b70:	616f      	str	r7, [r5, #20]
  haudio_out_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8002b72:	632f      	str	r7, [r5, #48]	; 0x30
  haudio_out_sai.Init.DataSize       = SAI_DATASIZE_16;
 8002b74:	9105      	str	r1, [sp, #20]
  haudio_out_sai.Init.Synchro        = SAI_ASYNCHRONOUS;
 8002b76:	60af      	str	r7, [r5, #8]
  haudio_out_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8002b78:	f8c5 8018 	str.w	r8, [r5, #24]
  haudio_out_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8002b7c:	60ef      	str	r7, [r5, #12]
  haudio_out_sai.Init.Mckdiv         = 0;  
 8002b7e:	622f      	str	r7, [r5, #32]
  haudio_out_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8002b80:	65af      	str	r7, [r5, #88]	; 0x58
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8002b82:	e9c5 3714 	strd	r3, r7, [r5, #80]	; 0x50
  haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_02;
 8002b86:	2305      	movs	r3, #5
  haudio_out_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002b88:	e9c5 770e 	strd	r7, r7, [r5, #56]	; 0x38
  haudio_out_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_02;
 8002b8c:	e9c5 2317 	strd	r2, r3, [r5, #92]	; 0x5c
  haudio_out_sai.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8002b90:	e9c5 770a 	strd	r7, r7, [r5, #40]	; 0x28
  haudio_out_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8002b94:	e9c5 b712 	strd	fp, r7, [r5, #72]	; 0x48
  HAL_SAI_Init(&haudio_out_sai);
 8002b98:	f003 fb7c 	bl	8006294 <HAL_SAI_Init>
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002b9c:	f8d9 0000 	ldr.w	r0, [r9]
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8002ba0:	9b03      	ldr	r3, [sp, #12]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002ba2:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002ba6:	f8c6 9000 	str.w	r9, [r6]
  haudio_in_sai.Init.DataSize       = SAI_DATASIZE_16;
 8002baa:	9905      	ldr	r1, [sp, #20]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002bac:	f8c9 0000 	str.w	r0, [r9]
  haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 8002bb0:	2003      	movs	r0, #3
  haudio_in_sai.FrameInit.FrameLength       = 64;
 8002bb2:	9a04      	ldr	r2, [sp, #16]
  haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 8002bb4:	f04f 0910 	mov.w	r9, #16
  haudio_in_sai.Init.AudioMode      = SAI_MODESLAVE_RX;
 8002bb8:	6070      	str	r0, [r6, #4]
  HAL_SAI_Init(&haudio_in_sai);
 8002bba:	4630      	mov	r0, r6
  haudio_in_sai.FrameInit.FrameLength       = 64;
 8002bbc:	6432      	str	r2, [r6, #64]	; 0x40
  haudio_in_sai.Init.MonoStereoMode = SAI_STEREOMODE;
 8002bbe:	6277      	str	r7, [r6, #36]	; 0x24
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002bc0:	61f4      	str	r4, [r6, #28]
  haudio_in_sai.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8002bc2:	6177      	str	r7, [r6, #20]
  haudio_in_sai.Init.Protocol       = SAI_FREE_PROTOCOL;
 8002bc4:	6337      	str	r7, [r6, #48]	; 0x30
  haudio_in_sai.Init.ClockStrobing  = SAI_CLOCKSTROBING_RISINGEDGE;
 8002bc6:	f8c6 803c 	str.w	r8, [r6, #60]	; 0x3c
  haudio_in_sai.Init.Synchro        = SAI_SYNCHRONOUS;
 8002bca:	f8c6 8008 	str.w	r8, [r6, #8]
  haudio_in_sai.Init.OutputDrive    = SAI_OUTPUTDRIVE_DISABLE;
 8002bce:	6137      	str	r7, [r6, #16]
  haudio_in_sai.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8002bd0:	f8c6 8018 	str.w	r8, [r6, #24]
  haudio_in_sai.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8002bd4:	60f7      	str	r7, [r6, #12]
  haudio_in_sai.Init.CompandingMode = SAI_NOCOMPANDING;
 8002bd6:	62b7      	str	r7, [r6, #40]	; 0x28
  haudio_in_sai.Init.TriState       = SAI_OUTPUT_RELEASED;
 8002bd8:	f8c6 902c 	str.w	r9, [r6, #44]	; 0x2c
  haudio_in_sai.Init.Mckdiv         = 0;
 8002bdc:	6237      	str	r7, [r6, #32]
  haudio_in_sai.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8002bde:	64f7      	str	r7, [r6, #76]	; 0x4c
  haudio_in_sai.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8002be0:	65b7      	str	r7, [r6, #88]	; 0x58
  haudio_in_sai.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8002be2:	e9c6 3b11 	strd	r3, fp, [r6, #68]	; 0x44
  haudio_in_sai.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8002be6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  haudio_in_sai.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8002bea:	e9c6 170d 	strd	r1, r7, [r6, #52]	; 0x34
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002bee:	e9c6 3714 	strd	r3, r7, [r6, #80]	; 0x50
  haudio_in_sai.SlotInit.SlotActive     = CODEC_AUDIOFRAME_SLOT_02;
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	2305      	movs	r3, #5
 8002bf6:	e9c6 1317 	strd	r1, r3, [r6, #92]	; 0x5c
  HAL_SAI_Init(&haudio_in_sai);
 8002bfa:	f003 fb4b 	bl	8006294 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8002bfe:	6832      	ldr	r2, [r6, #0]
    if((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 8002c00:	2034      	movs	r0, #52	; 0x34
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8002c02:	6813      	ldr	r3, [r2, #0]
 8002c04:	ea43 030b 	orr.w	r3, r3, fp
 8002c08:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002c0a:	682a      	ldr	r2, [r5, #0]
    if((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 8002c0c:	4d15      	ldr	r5, [pc, #84]	; (8002c64 <BSP_AUDIO_IN_InitEx+0x4cc>)
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002c0e:	6813      	ldr	r3, [r2, #0]
 8002c10:	ea43 030b 	orr.w	r3, r3, fp
 8002c14:	6013      	str	r3, [r2, #0]
    if((wm8994_drv.ReadID(AUDIO_I2C_ADDRESS)) == WM8994_ID)
 8002c16:	68ab      	ldr	r3, [r5, #8]
 8002c18:	4798      	blx	r3
 8002c1a:	f648 1394 	movw	r3, #35220	; 0x8994
 8002c1e:	4298      	cmp	r0, r3
 8002c20:	d10d      	bne.n	8002c3e <BSP_AUDIO_IN_InitEx+0x4a6>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002c22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002c24:	2034      	movs	r0, #52	; 0x34
 8002c26:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <BSP_AUDIO_IN_InitEx+0x4d0>)
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq,16);
 8002c2a:	2264      	movs	r2, #100	; 0x64
 8002c2c:	4651      	mov	r1, sl
      audio_drv = &wm8994_drv;
 8002c2e:	601d      	str	r5, [r3, #0]
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq,16);
 8002c30:	2034      	movs	r0, #52	; 0x34
 8002c32:	f8cd 9000 	str.w	r9, [sp]
 8002c36:	4623      	mov	r3, r4
 8002c38:	682d      	ldr	r5, [r5, #0]
 8002c3a:	47a8      	blx	r5
 8002c3c:	e64c      	b.n	80028d8 <BSP_AUDIO_IN_InitEx+0x140>
      ret = AUDIO_ERROR;
 8002c3e:	4640      	mov	r0, r8
 8002c40:	e64b      	b.n	80028da <BSP_AUDIO_IN_InitEx+0x142>
 8002c42:	bf00      	nop
 8002c44:	20000c14 	.word	0x20000c14
 8002c48:	400174a0 	.word	0x400174a0
 8002c4c:	20000b88 	.word	0x20000b88
 8002c50:	40017480 	.word	0x40017480
 8002c54:	20000844 	.word	0x20000844
 8002c58:	40015824 	.word	0x40015824
 8002c5c:	40015804 	.word	0x40015804
 8002c60:	20000928 	.word	0x20000928
 8002c64:	200000c8 	.word	0x200000c8
 8002c68:	20000a60 	.word	0x20000a60

08002c6c <BSP_AUDIO_IN_Init>:
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MIC, AudioFreq, BitRes, ChnlNbr);
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	460a      	mov	r2, r1
 8002c70:	4601      	mov	r1, r0
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7ff bd90 	b.w	8002798 <BSP_AUDIO_IN_InitEx>

08002c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c7e:	e003      	b.n	8002c88 <LoopCopyDataInit>

08002c80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c86:	3104      	adds	r1, #4

08002c88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c88:	480b      	ldr	r0, [pc, #44]	; (8002cb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c90:	d3f6      	bcc.n	8002c80 <CopyDataInit>
  ldr  r2, =_sbss
 8002c92:	4a0b      	ldr	r2, [pc, #44]	; (8002cc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c94:	e002      	b.n	8002c9c <LoopFillZerobss>

08002c96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c98:	f842 3b04 	str.w	r3, [r2], #4

08002c9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ca0:	d3f9      	bcc.n	8002c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ca2:	f000 fd5f 	bl	8003764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ca6:	f004 fb41 	bl	800732c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002caa:	f000 f973 	bl	8002f94 <main>
  bx  lr    
 8002cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002cb0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002cb4:	08007608 	.word	0x08007608
  ldr  r0, =_sdata
 8002cb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cbc:	200001bc 	.word	0x200001bc
  ldr  r2, =_sbss
 8002cc0:	200001bc 	.word	0x200001bc
  ldr  r3, = _ebss
 8002cc4:	20001450 	.word	0x20001450

08002cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc8:	e7fe      	b.n	8002cc8 <ADC_IRQHandler>

08002cca <AUDIO_MicStart>:
static int8_t  AUDIO_MicStart(AUDIO_CircularBuffer_t* buffer ,  uint32_t node_handle)
{
  AUDIO_MicNode_t* mic;
  mic=(AUDIO_MicNode_t*)node_handle;

  if(mic->node.state != AUDIO_NODE_STARTED)
 8002cca:	780b      	ldrb	r3, [r1, #0]
 8002ccc:	2b02      	cmp	r3, #2
  {
    mic->node.state = AUDIO_NODE_STARTED;
 8002cce:	bf1c      	itt	ne
 8002cd0:	2302      	movne	r3, #2
    mic->buf        = buffer;
 8002cd2:	6148      	strne	r0, [r1, #20]
  }
    return 0;
}
 8002cd4:	f04f 0000 	mov.w	r0, #0
    mic->node.state = AUDIO_NODE_STARTED;
 8002cd8:	bf18      	it	ne
 8002cda:	700b      	strbne	r3, [r1, #0]
}
 8002cdc:	4770      	bx	lr

08002cde <AUDIO_MicStop>:
{
    
  AUDIO_MicNode_t* mic;
  mic = (AUDIO_MicNode_t*)node_handle;

  if(mic->node.state == AUDIO_NODE_STARTED)
 8002cde:	7803      	ldrb	r3, [r0, #0]
 8002ce0:	2b02      	cmp	r3, #2
  {
    mic->node.state = AUDIO_NODE_STOPPED;
 8002ce2:	bf04      	itt	eq
 8002ce4:	2303      	moveq	r3, #3
 8002ce6:	7003      	strbeq	r3, [r0, #0]
  }
    return 0;
}
 8002ce8:	2000      	movs	r0, #0
 8002cea:	4770      	bx	lr

08002cec <AUDIO_MicChangeFrequency>:
{
    
  AUDIO_MicNode_t* mic;

  mic = (AUDIO_MicNode_t*)node_handle;
  mic->specific.cmd|= MIC_CMD_CHANGE_FREQUENCE;
 8002cec:	f890 3346 	ldrb.w	r3, [r0, #838]	; 0x346
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	f880 3346 	strb.w	r3, [r0, #838]	; 0x346
  
    return 0;
}
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	4770      	bx	lr

08002cfc <AUDIO_MicMute>:
{
  /* @TODO check if really mic is muted */
	/* No action  currently not supported  call*/
  
  return 0;
}
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	4770      	bx	lr

08002d00 <AUDIO_MicSetVolume>:
  * @param  node_handle      mic  node handle
  * @retval 0 if no error
  */
static int8_t  AUDIO_MicSetVolume( uint16_t channel_number,  int volume_db_256 ,  uint32_t node_handle)
{
  ((AUDIO_MicNode_t*)node_handle)->volume = VOLUME_DB_256_TO_PERCENT(volume_db_256);
 8002d00:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
 8002d04:	2164      	movs	r1, #100	; 0x64
	/* No action  currently not supported  call*/
  
  return 0;
}
 8002d06:	2000      	movs	r0, #0
  ((AUDIO_MicNode_t*)node_handle)->volume = VOLUME_DB_256_TO_PERCENT(volume_db_256);
 8002d08:	4359      	muls	r1, r3
 8002d0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d0e:	fb91 f1f3 	sdiv	r1, r1, r3
 8002d12:	7691      	strb	r1, [r2, #26]
}
 8002d14:	4770      	bx	lr

08002d16 <AUDIO_MicGetVolumeDefaultsValues>:
  * @param  node_handle         
  * @retval 0 if no error
  */
static int8_t  AUDIO_MicGetVolumeDefaultsValues( int* vol_max, int* vol_min, int* vol_res, uint32_t node_handle)
{
  *vol_max = MEMS_VOLUME_MIC_MAX_DB_256;
 8002d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d1a:	6003      	str	r3, [r0, #0]
  *vol_min = MEMS_VOLUME_MIC_MIN_DB_256;
 8002d1c:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
  *vol_res = MEMS_VOLUME_MIC_RES_DB_256;
  return 0;
}
 8002d20:	2000      	movs	r0, #0
  *vol_min = MEMS_VOLUME_MIC_MIN_DB_256;
 8002d22:	600b      	str	r3, [r1, #0]
  *vol_res = MEMS_VOLUME_MIC_RES_DB_256;
 8002d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d28:	6013      	str	r3, [r2, #0]
}
 8002d2a:	4770      	bx	lr

08002d2c <AUDIO_MicStartReadCount>:
{
    AUDIO_MicNode_t* mic;
  
    mic = (AUDIO_MicNode_t*)node_handle;
  
    if(mic->node.state == AUDIO_NODE_STARTED)
 8002d2c:	7803      	ldrb	r3, [r0, #0]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d106      	bne.n	8002d40 <AUDIO_MicStartReadCount+0x14>
    {
           /* read remained value in dma buffer */
      mic->specific.dma_remaining =__HAL_DMA_GET_COUNTER(&hDmaTopRight);
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <AUDIO_MicStartReadCount+0x1c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f8a0 3348 	strh.w	r3, [r0, #840]	; 0x348
      return 0;
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	4770      	bx	lr
    }
   return -1;     
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
} 
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	20000a00 	.word	0x20000a00

08002d4c <AUDIO_MicGetLastReadCount>:
{
  AUDIO_MicNode_t* mic;
  int remaining_data_count , read_samples;
  mic = (AUDIO_MicNode_t*)node_handle;
  
  if(mic->node.state == AUDIO_NODE_STARTED)
 8002d4c:	7803      	ldrb	r3, [r0, #0]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d117      	bne.n	8002d82 <AUDIO_MicGetLastReadCount+0x36>
  {
         /* read remined value in dma buffer */
    remaining_data_count = __HAL_DMA_GET_COUNTER(&hDmaTopRight);
 8002d52:	4b0d      	ldr	r3, [pc, #52]	; (8002d88 <AUDIO_MicGetLastReadCount+0x3c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
    read_samples =(remaining_data_count < mic->specific.dma_remaining)? mic->specific.dma_remaining - remaining_data_count :
 8002d58:	f8b0 3348 	ldrh.w	r3, [r0, #840]	; 0x348
                   ((mic->specific.packet_sample_count<<1) - remaining_data_count) + mic->specific.dma_remaining; 

    mic->specific.dma_remaining = remaining_data_count;
 8002d5c:	f8a0 2348 	strh.w	r2, [r0, #840]	; 0x348
    read_samples =(remaining_data_count < mic->specific.dma_remaining)? mic->specific.dma_remaining - remaining_data_count :
 8002d60:	4293      	cmp	r3, r2
                   ((mic->specific.packet_sample_count<<1) - remaining_data_count) + mic->specific.dma_remaining; 
 8002d62:	bfd6      	itet	le
 8002d64:	f8b0 1342 	ldrhle.w	r1, [r0, #834]	; 0x342
    read_samples =(remaining_data_count < mic->specific.dma_remaining)? mic->specific.dma_remaining - remaining_data_count :
 8002d68:	1a9b      	subgt	r3, r3, r2
                   ((mic->specific.packet_sample_count<<1) - remaining_data_count) + mic->specific.dma_remaining; 
 8002d6a:	ebc2 0141 	rsble	r1, r2, r1, lsl #1
	return read_samples*AUDIO_MicHandler->specific.packet_sample_size;
 8002d6e:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <AUDIO_MicGetLastReadCount+0x40>)
 8002d70:	6812      	ldr	r2, [r2, #0]
    read_samples =(remaining_data_count < mic->specific.dma_remaining)? mic->specific.dma_remaining - remaining_data_count :
 8002d72:	bfd8      	it	le
 8002d74:	185b      	addle	r3, r3, r1
	return read_samples*AUDIO_MicHandler->specific.packet_sample_size;
 8002d76:	f892 0344 	ldrb.w	r0, [r2, #836]	; 0x344
 8002d7a:	fb10 f003 	smulbb	r0, r0, r3
 8002d7e:	b280      	uxth	r0, r0
 8002d80:	4770      	bx	lr
  }
    return 0;
 8002d82:	2000      	movs	r0, #0
}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000a00 	.word	0x20000a00
 8002d8c:	20000700 	.word	0x20000700

08002d90 <AUDIO_MicDeInit>:
  if(mic->node.state != AUDIO_NODE_OFF)
 8002d90:	7803      	ldrb	r3, [r0, #0]
{
 8002d92:	b510      	push	{r4, lr}
 8002d94:	4604      	mov	r4, r0
  if(mic->node.state != AUDIO_NODE_OFF)
 8002d96:	b14b      	cbz	r3, 8002dac <AUDIO_MicDeInit+0x1c>
    if(mic->node.state == AUDIO_NODE_STARTED)
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d101      	bne.n	8002da0 <AUDIO_MicDeInit+0x10>
      AUDIO_MicStop(node_handle);
 8002d9c:	f7ff ff9f 	bl	8002cde <AUDIO_MicStop>
    BSP_AUDIO_IN_Stop();
 8002da0:	f7ff f952 	bl	8002048 <BSP_AUDIO_IN_Stop>
    BSP_AUDIO_IN_DeInit();  
 8002da4:	f7ff fc7a 	bl	800269c <BSP_AUDIO_IN_DeInit>
    mic->node.state = AUDIO_NODE_OFF;
 8002da8:	2300      	movs	r3, #0
 8002daa:	7023      	strb	r3, [r4, #0]
}
 8002dac:	2000      	movs	r0, #0
 8002dae:	bd10      	pop	{r4, pc}

08002db0 <AUDIO_FillDataToBuffer>:
{
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(AUDIO_MicHandler->specific.cmd & MIC_CMD_CHANGE_FREQUENCE)
 8002db2:	4e38      	ldr	r6, [pc, #224]	; (8002e94 <AUDIO_FillDataToBuffer+0xe4>)
{
 8002db4:	4605      	mov	r5, r0
  if(AUDIO_MicHandler->specific.cmd & MIC_CMD_CHANGE_FREQUENCE)
 8002db6:	6831      	ldr	r1, [r6, #0]
 8002db8:	4634      	mov	r4, r6
 8002dba:	f891 3346 	ldrb.w	r3, [r1, #838]	; 0x346
 8002dbe:	f013 0f04 	tst.w	r3, #4
 8002dc2:	d035      	beq.n	8002e30 <AUDIO_FillDataToBuffer+0x80>
     BSP_AUDIO_IN_Stop();
 8002dc4:	f7ff f940 	bl	8002048 <BSP_AUDIO_IN_Stop>
     AUDIO_MicHandler->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(AUDIO_MicHandler->node.audio_description);
 8002dc8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
     BSP_AUDIO_IN_DeInit();
 8002dcc:	f7ff fc66 	bl	800269c <BSP_AUDIO_IN_DeInit>
     AUDIO_MicHandler->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(AUDIO_MicHandler->node.audio_description);
 8002dd0:	6835      	ldr	r5, [r6, #0]
 8002dd2:	686b      	ldr	r3, [r5, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	791a      	ldrb	r2, [r3, #4]
 8002dd8:	7c59      	ldrb	r1, [r3, #17]
 8002dda:	fbb0 f7f4 	udiv	r7, r0, r4
 8002dde:	fb12 f301 	smulbb	r3, r2, r1
 8002de2:	fb13 f307 	smulbb	r3, r3, r7
 8002de6:	832b      	strh	r3, [r5, #24]
     BSP_AUDIO_IN_Init(AUDIO_MicHandler->node.audio_description->frequency, AUDIO_MicHandler->node.audio_description->resolution, AUDIO_MicHandler->node.audio_description->channels_count);
 8002de8:	f7ff ff40 	bl	8002c6c <BSP_AUDIO_IN_Init>
     BSP_AUDIO_IN_AllocScratch (AUDIO_MicHandler->specific.scratch, (AUDIO_SAMPLE_COUNT_LENGTH(AUDIO_MicHandler->node.audio_description->frequency))<<2);
 8002dec:	6830      	ldr	r0, [r6, #0]
 8002dee:	6843      	ldr	r3, [r0, #4]
 8002df0:	3040      	adds	r0, #64	; 0x40
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	fbb1 f1f4 	udiv	r1, r1, r4
 8002df8:	0089      	lsls	r1, r1, #2
 8002dfa:	f7ff f8cf 	bl	8001f9c <BSP_AUDIO_IN_AllocScratch>
     AUDIO_MicHandler->specific.packet_sample_count = AUDIO_PACKET_SAMPLES_COUNT(AUDIO_MicHandler->node.audio_description->frequency);
 8002dfe:	6833      	ldr	r3, [r6, #0]
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	680a      	ldr	r2, [r1, #0]
 8002e04:	fbb2 f2f4 	udiv	r2, r2, r4
 8002e08:	f8a3 2342 	strh.w	r2, [r3, #834]	; 0x342
     AUDIO_MicHandler->specific.packet_sample_size = AUDIO_SAMPLE_LENGTH(AUDIO_MicHandler->node.audio_description);
 8002e0c:	790a      	ldrb	r2, [r1, #4]
 8002e0e:	7c49      	ldrb	r1, [r1, #17]
 8002e10:	fb12 f201 	smulbb	r2, r2, r1
     BSP_AUDIO_IN_Record(0,0); /* x2 for double buffering */
 8002e14:	2100      	movs	r1, #0
     AUDIO_MicHandler->specific.packet_sample_size = AUDIO_SAMPLE_LENGTH(AUDIO_MicHandler->node.audio_description);
 8002e16:	f883 2344 	strb.w	r2, [r3, #836]	; 0x344
     BSP_AUDIO_IN_Record(0,0); /* x2 for double buffering */
 8002e1a:	4608      	mov	r0, r1
 8002e1c:	f7ff f8d8 	bl	8001fd0 <BSP_AUDIO_IN_Record>
     AUDIO_MicHandler->specific.cmd &= ~MIC_CMD_CHANGE_FREQUENCE;
 8002e20:	6832      	ldr	r2, [r6, #0]
 8002e22:	f892 3346 	ldrb.w	r3, [r2, #838]	; 0x346
 8002e26:	f023 0304 	bic.w	r3, r3, #4
 8002e2a:	f882 3346 	strb.w	r3, [r2, #838]	; 0x346
}
 8002e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(AUDIO_MicHandler->node.state==AUDIO_NODE_STARTED)
 8002e30:	780b      	ldrb	r3, [r1, #0]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d1fb      	bne.n	8002e2e <AUDIO_FillDataToBuffer+0x7e>
    wr_distance = AUDIO_BUFFER_FREE_SIZE(AUDIO_MicHandler->buf);
 8002e36:	6948      	ldr	r0, [r1, #20]
 8002e38:	88c2      	ldrh	r2, [r0, #6]
 8002e3a:	8883      	ldrh	r3, [r0, #4]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	bf24      	itt	cs
 8002e40:	8900      	ldrhcs	r0, [r0, #8]
 8002e42:	181b      	addcs	r3, r3, r0
 8002e44:	1a9b      	subs	r3, r3, r2
    if(wr_distance<=AUDIO_MicHandler->packet_length)
 8002e46:	8b0a      	ldrh	r2, [r1, #24]
    wr_distance = AUDIO_BUFFER_FREE_SIZE(AUDIO_MicHandler->buf);
 8002e48:	b29b      	uxth	r3, r3
    if(wr_distance<=AUDIO_MicHandler->packet_length)
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d303      	bcc.n	8002e56 <AUDIO_FillDataToBuffer+0xa6>
      AUDIO_MicHandler->node.session_handle->SessionCallback(AUDIO_OVERRUN, (AUDIO_Node_t*)AUDIO_MicHandler,
 8002e4e:	68ca      	ldr	r2, [r1, #12]
 8002e50:	2004      	movs	r0, #4
 8002e52:	6893      	ldr	r3, [r2, #8]
 8002e54:	4798      	blx	r3
    BSP_AUDIO_IN_Get_PcmBuffer((AUDIO_MicHandler->buf->data+AUDIO_MicHandler->buf->wr_ptr),AUDIO_MicHandler->specific.packet_sample_count,
 8002e56:	6821      	ldr	r1, [r4, #0]
 8002e58:	694b      	ldr	r3, [r1, #20]
 8002e5a:	684a      	ldr	r2, [r1, #4]
 8002e5c:	88d8      	ldrh	r0, [r3, #6]
 8002e5e:	681e      	ldr	r6, [r3, #0]
 8002e60:	f8b1 1342 	ldrh.w	r1, [r1, #834]	; 0x342
 8002e64:	7c53      	ldrb	r3, [r2, #17]
 8002e66:	4430      	add	r0, r6
 8002e68:	b2aa      	uxth	r2, r5
 8002e6a:	f7ff f92f 	bl	80020cc <BSP_AUDIO_IN_Get_PcmBuffer>
    AUDIO_MicHandler->buf->wr_ptr += AUDIO_MicHandler->packet_length;
 8002e6e:	6821      	ldr	r1, [r4, #0]
 8002e70:	694a      	ldr	r2, [r1, #20]
 8002e72:	8b08      	ldrh	r0, [r1, #24]
 8002e74:	88d3      	ldrh	r3, [r2, #6]
 8002e76:	4403      	add	r3, r0
  AUDIO_MicHandler->node.session_handle->SessionCallback(AUDIO_PACKET_RECEIVED, (AUDIO_Node_t*)AUDIO_MicHandler,
 8002e78:	2002      	movs	r0, #2
    AUDIO_MicHandler->buf->wr_ptr += AUDIO_MicHandler->packet_length;
 8002e7a:	80d3      	strh	r3, [r2, #6]
  AUDIO_MicHandler->node.session_handle->SessionCallback(AUDIO_PACKET_RECEIVED, (AUDIO_Node_t*)AUDIO_MicHandler,
 8002e7c:	68ca      	ldr	r2, [r1, #12]
 8002e7e:	6893      	ldr	r3, [r2, #8]
 8002e80:	4798      	blx	r3
    if(AUDIO_MicHandler->buf->wr_ptr == AUDIO_MicHandler->buf->size)
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	891a      	ldrh	r2, [r3, #8]
 8002e88:	88d9      	ldrh	r1, [r3, #6]
 8002e8a:	4291      	cmp	r1, r2
      AUDIO_MicHandler->buf->wr_ptr = 0;
 8002e8c:	bf04      	itt	eq
 8002e8e:	2200      	moveq	r2, #0
 8002e90:	80da      	strheq	r2, [r3, #6]
}
 8002e92:	e7cc      	b.n	8002e2e <AUDIO_FillDataToBuffer+0x7e>
 8002e94:	20000700 	.word	0x20000700

08002e98 <AUDIO_DFSDM_MEMS_MicInit>:
{
 8002e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	4605      	mov	r5, r0
 8002ea0:	460f      	mov	r7, r1
  memset(mic, 0, sizeof(AUDIO_MicNode_t));
 8002ea2:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	f004 fa7e 	bl	80073aa <memset>
  mic->node.state               = AUDIO_NODE_INITIALIZED;
 8002eae:	2301      	movs	r3, #1
  mic->node.type                = AUDIO_INPUT;
 8002eb0:	2600      	movs	r6, #0
  mic->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(audio_description);
 8002eb2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
  mic->node.state               = AUDIO_NODE_INITIALIZED;
 8002eb6:	7023      	strb	r3, [r4, #0]
  mic->MicDeInit                = AUDIO_MicDeInit;
 8002eb8:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <AUDIO_DFSDM_MEMS_MicInit+0xa8>)
  mic->node.session_handle      = session_handle;
 8002eba:	60e7      	str	r7, [r4, #12]
  mic->MicDeInit                = AUDIO_MicDeInit;
 8002ebc:	61e3      	str	r3, [r4, #28]
  mic->MicStart                 = AUDIO_MicStart;
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <AUDIO_DFSDM_MEMS_MicInit+0xac>)
  mic->node.type                = AUDIO_INPUT;
 8002ec0:	7226      	strb	r6, [r4, #8]
  mic->MicStart                 = AUDIO_MicStart;
 8002ec2:	6223      	str	r3, [r4, #32]
  mic->MicStop                  = AUDIO_MicStop;
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <AUDIO_DFSDM_MEMS_MicInit+0xb0>)
  mic->node.audio_description   = audio_description;
 8002ec6:	6065      	str	r5, [r4, #4]
  mic->MicStop                  = AUDIO_MicStop;
 8002ec8:	6263      	str	r3, [r4, #36]	; 0x24
  mic->MicChangeFrequency       = AUDIO_MicChangeFrequency;
 8002eca:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <AUDIO_DFSDM_MEMS_MicInit+0xb4>)
 8002ecc:	62a3      	str	r3, [r4, #40]	; 0x28
  mic->MicMute                  = AUDIO_MicMute;
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <AUDIO_DFSDM_MEMS_MicInit+0xb8>)
 8002ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
  mic->MicSetVolume             = AUDIO_MicSetVolume;
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <AUDIO_DFSDM_MEMS_MicInit+0xbc>)
 8002ed4:	6323      	str	r3, [r4, #48]	; 0x30
  mic->MicGetVolumeDefaultsValues = AUDIO_MicGetVolumeDefaultsValues;
 8002ed6:	4b20      	ldr	r3, [pc, #128]	; (8002f58 <AUDIO_DFSDM_MEMS_MicInit+0xc0>)
 8002ed8:	6363      	str	r3, [r4, #52]	; 0x34
  mic->MicStartReadCount        = AUDIO_MicStartReadCount;
 8002eda:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <AUDIO_DFSDM_MEMS_MicInit+0xc4>)
 8002edc:	63a3      	str	r3, [r4, #56]	; 0x38
  mic->MicGetReadCount          = AUDIO_MicGetLastReadCount;
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <AUDIO_DFSDM_MEMS_MicInit+0xc8>)
 8002ee0:	63e3      	str	r3, [r4, #60]	; 0x3c
  mic->volume = VOLUME_DB_256_TO_PERCENT(audio_description->audio_volume_db_256);
 8002ee2:	68eb      	ldr	r3, [r5, #12]
 8002ee4:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8002ee8:	2364      	movs	r3, #100	; 0x64
 8002eea:	4353      	muls	r3, r2
 8002eec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ef4:	76a3      	strb	r3, [r4, #26]
  mic->packet_length = AUDIO_MS_PACKET_SIZE_FROM_AUD_DESC(audio_description);
 8002ef6:	6828      	ldr	r0, [r5, #0]
 8002ef8:	792a      	ldrb	r2, [r5, #4]
 8002efa:	7c69      	ldrb	r1, [r5, #17]
 8002efc:	fbb0 f3f8 	udiv	r3, r0, r8
 8002f00:	fb12 f701 	smulbb	r7, r2, r1
 8002f04:	fb17 f703 	smulbb	r7, r7, r3
 8002f08:	8327      	strh	r7, [r4, #24]
  BSP_AUDIO_IN_Init(audio_description->frequency, audio_description->resolution, audio_description->channels_count);
 8002f0a:	f7ff feaf 	bl	8002c6c <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_AllocScratch (mic->specific.scratch, (AUDIO_SAMPLE_COUNT_LENGTH(USB_AUDIO_CONFIG_RECORD_FREQ_MAX))<<2);
 8002f0e:	21c0      	movs	r1, #192	; 0xc0
 8002f10:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002f14:	f7ff f842 	bl	8001f9c <BSP_AUDIO_IN_AllocScratch>
  mic->specific.packet_sample_count = AUDIO_PACKET_SAMPLES_COUNT(audio_description->frequency);
 8002f18:	682b      	ldr	r3, [r5, #0]
  BSP_AUDIO_IN_Record(0,0);
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	4630      	mov	r0, r6
  mic->specific.packet_sample_count = AUDIO_PACKET_SAMPLES_COUNT(audio_description->frequency);
 8002f1e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002f22:	f8a4 3342 	strh.w	r3, [r4, #834]	; 0x342
  mic->specific.packet_sample_size = AUDIO_SAMPLE_LENGTH(audio_description);
 8002f26:	792b      	ldrb	r3, [r5, #4]
 8002f28:	7c6a      	ldrb	r2, [r5, #17]
 8002f2a:	fb13 f302 	smulbb	r3, r3, r2
 8002f2e:	f884 3344 	strb.w	r3, [r4, #836]	; 0x344
  AUDIO_MicHandler = mic;
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <AUDIO_DFSDM_MEMS_MicInit+0xcc>)
 8002f34:	601c      	str	r4, [r3, #0]
  BSP_AUDIO_IN_Record(0,0);
 8002f36:	f7ff f84b 	bl	8001fd0 <BSP_AUDIO_IN_Record>
}
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f40:	08002d91 	.word	0x08002d91
 8002f44:	08002ccb 	.word	0x08002ccb
 8002f48:	08002cdf 	.word	0x08002cdf
 8002f4c:	08002ced 	.word	0x08002ced
 8002f50:	08002cfd 	.word	0x08002cfd
 8002f54:	08002d01 	.word	0x08002d01
 8002f58:	08002d17 	.word	0x08002d17
 8002f5c:	08002d2d 	.word	0x08002d2d
 8002f60:	08002d4d 	.word	0x08002d4d
 8002f64:	20000700 	.word	0x20000700

08002f68 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  if((AUDIO_MicHandler)&&(AUDIO_MicHandler->node.state==AUDIO_NODE_STARTED))
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b12b      	cbz	r3, 8002f7a <BSP_AUDIO_IN_HalfTransfer_CallBack+0x12>
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d102      	bne.n	8002f7a <BSP_AUDIO_IN_HalfTransfer_CallBack+0x12>
      AUDIO_FillDataToBuffer(0);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7ff bf1b 	b.w	8002db0 <AUDIO_FillDataToBuffer>
}
 8002f7a:	4770      	bx	lr
 8002f7c:	20000700 	.word	0x20000700

08002f80 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  if(AUDIO_MicHandler)
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <BSP_AUDIO_IN_TransferComplete_CallBack+0x10>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	b11b      	cbz	r3, 8002f8e <BSP_AUDIO_IN_TransferComplete_CallBack+0xe>
      AUDIO_FillDataToBuffer(AUDIO_MicHandler->specific.packet_sample_count);
 8002f86:	f8b3 0342 	ldrh.w	r0, [r3, #834]	; 0x342
 8002f8a:	f7ff bf11 	b.w	8002db0 <AUDIO_FillDataToBuffer>
}
 8002f8e:	4770      	bx	lr
 8002f90:	20000700 	.word	0x20000700

08002f94 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002f94:	b500      	push	{lr}
 8002f96:	b0b7      	sub	sp, #220	; 0xdc
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f98:	2402      	movs	r4, #2
  HAL_Init();
 8002f9a:	f000 fc2d 	bl	80037f8 <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fa2:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 384;  
 8002fa4:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 8;
   RCC_OscInitStruct.PLL.PLLR = 7;
 8002fa6:	f04f 0c08 	mov.w	ip, #8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002faa:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fac:	e9cd 1305 	strd	r1, r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fb8:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 384;  
 8002fbc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002fc0:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLR = 7;
 8002fc4:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fc6:	a805      	add	r0, sp, #20
   RCC_OscInitStruct.PLL.PLLR = 7;
 8002fc8:	e9cd c310 	strd	ip, r3, [sp, #64]	; 0x40
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fcc:	f002 fae4 	bl	8005598 <HAL_RCC_OscConfig>
 8002fd0:	b100      	cbz	r0, 8002fd4 <main+0x40>
 8002fd2:	e7fe      	b.n	8002fd2 <main+0x3e>
  {
    Error_Handler();
  }
  /* Select PLLSAI output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002fd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002fd8:	9031      	str	r0, [sp, #196]	; 0xc4
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct)  != HAL_OK)
 8002fda:	a812      	add	r0, sp, #72	; 0x48
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002fdc:	9312      	str	r3, [sp, #72]	; 0x48
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct)  != HAL_OK)
 8002fde:	f002 fd3f 	bl	8005a60 <HAL_RCCEx_PeriphCLKConfig>
 8002fe2:	b100      	cbz	r0, 8002fe6 <main+0x52>
 8002fe4:	e7fe      	b.n	8002fe4 <main+0x50>
    Error_Handler();
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002fe6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fe8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fec:	9002      	str	r0, [sp, #8]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002fee:	2106      	movs	r1, #6
 8002ff0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ff2:	e9cd 3400 	strd	r3, r4, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ffa:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002ffe:	f002 fc8d 	bl	800591c <HAL_RCC_ClockConfig>
 8003002:	4602      	mov	r2, r0
 8003004:	b100      	cbz	r0, 8003008 <main+0x74>
 8003006:	e7fe      	b.n	8003006 <main+0x72>
  USBD_Init(&USBD_Device, &AUDIO_Desc, 0);
 8003008:	4907      	ldr	r1, [pc, #28]	; (8003028 <main+0x94>)
 800300a:	4808      	ldr	r0, [pc, #32]	; (800302c <main+0x98>)
 800300c:	f7fd fd2e 	bl	8000a6c <USBD_Init>
  USBD_RegisterClass(&USBD_Device, USBD_AUDIO_CLASS);
 8003010:	4907      	ldr	r1, [pc, #28]	; (8003030 <main+0x9c>)
 8003012:	4806      	ldr	r0, [pc, #24]	; (800302c <main+0x98>)
 8003014:	f7fd fd3f 	bl	8000a96 <USBD_RegisterClass>
  USBD_AUDIO_RegisterInterface(&USBD_Device, &audio_class_interface);
 8003018:	4906      	ldr	r1, [pc, #24]	; (8003034 <main+0xa0>)
 800301a:	4804      	ldr	r0, [pc, #16]	; (800302c <main+0x98>)
 800301c:	f7fd fd18 	bl	8000a50 <USBD_AUDIO_RegisterInterface>
  USBD_Start(&USBD_Device);
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <main+0x98>)
 8003022:	f7fd fd3f 	bl	8000aa4 <USBD_Start>
 8003026:	e7fe      	b.n	8003026 <main+0x92>
 8003028:	20000130 	.word	0x20000130
 800302c:	20000cac 	.word	0x20000cac
 8003030:	2000000c 	.word	0x2000000c
 8003034:	200000b4 	.word	0x200000b4

08003038 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
 void Error_Handler(void)
{
 8003038:	e7fe      	b.n	8003038 <Error_Handler>

0800303a <USBD_error_handler>:
  while(1)
  {
  }
}
void USBD_error_handler(void)
{
 800303a:	e7fe      	b.n	800303a <USBD_error_handler>

0800303c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800303c:	4770      	bx	lr

0800303e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800303e:	e7fe      	b.n	800303e <HardFault_Handler>

08003040 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003040:	e7fe      	b.n	8003040 <MemManage_Handler>

08003042 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003042:	e7fe      	b.n	8003042 <BusFault_Handler>

08003044 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003044:	e7fe      	b.n	8003044 <UsageFault_Handler>

08003046 <SVC_Handler>:
 8003046:	4770      	bx	lr

08003048 <DebugMon_Handler>:
 8003048:	4770      	bx	lr

0800304a <PendSV_Handler>:
 800304a:	4770      	bx	lr

0800304c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800304c:	f000 bbe6 	b.w	800381c <HAL_IncTick>

08003050 <OTG_HS_IRQHandler>:
#else
void OTG_HS_IRQHandler(void)
#endif
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 8003050:	4801      	ldr	r0, [pc, #4]	; (8003058 <OTG_HS_IRQHandler+0x8>)
 8003052:	f001 bde5 	b.w	8004c20 <HAL_PCD_IRQHandler>
 8003056:	bf00      	nop
 8003058:	20000f48 	.word	0x20000f48

0800305c <DMA2_Stream1_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800305c:	4b01      	ldr	r3, [pc, #4]	; (8003064 <DMA2_Stream1_IRQHandler+0x8>)
 800305e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003060:	f000 bfea 	b.w	8004038 <HAL_DMA_IRQHandler>
 8003064:	20000928 	.word	0x20000928

08003068 <DMA2_Stream0_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_DFSDMx_DMAx_TOP_LEFT_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInTopLeftFilter.hdmaReg);
 8003068:	4b01      	ldr	r3, [pc, #4]	; (8003070 <DMA2_Stream0_IRQHandler+0x8>)
 800306a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800306c:	f000 bfe4 	b.w	8004038 <HAL_DMA_IRQHandler>
 8003070:	200009ac 	.word	0x200009ac

08003074 <DMA2_Stream5_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_DFSDMx_DMAx_TOP_RIGHT_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInTopRightFilter.hdmaReg);
 8003074:	4b01      	ldr	r3, [pc, #4]	; (800307c <DMA2_Stream5_IRQHandler+0x8>)
 8003076:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003078:	f000 bfde 	b.w	8004038 <HAL_DMA_IRQHandler>
 800307c:	20000bc0 	.word	0x20000bc0

08003080 <HAL_PCD_MspInit>:
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hpcd->Instance == USB_OTG_FS)
 8003080:	6803      	ldr	r3, [r0, #0]
 8003082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800308a:	b090      	sub	sp, #64	; 0x40
  if(hpcd->Instance == USB_OTG_FS)
 800308c:	d14a      	bne.n	8003124 <HAL_PCD_MspInit+0xa4>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	4c6a      	ldr	r4, [pc, #424]	; (8003238 <HAL_PCD_MspInit+0x1b8>)
    
    /* Configure DM DP Pins */
    GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003090:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003094:	2500      	movs	r5, #0
 8003096:	2603      	movs	r6, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003098:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800309a:	270a      	movs	r7, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800309c:	a90b      	add	r1, sp, #44	; 0x2c
 800309e:	4867      	ldr	r0, [pc, #412]	; (800323c <HAL_PCD_MspInit+0x1bc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6323      	str	r3, [r4, #48]	; 0x30
 80030a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030a8:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b2:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80030b4:	e9cd 560d 	strd	r5, r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b8:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f001 f87a 	bl	80041b4 <HAL_GPIO_Init>

    /* Configure VBUS Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030c0:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c4:	a90b      	add	r1, sp, #44	; 0x2c
 80030c6:	485d      	ldr	r0, [pc, #372]	; (800323c <HAL_PCD_MspInit+0x1bc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030ca:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ce:	f001 f871 	bl	80041b4 <HAL_GPIO_Init>
    
    /* Configure ID pin */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030d6:	2312      	movs	r3, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d8:	4858      	ldr	r0, [pc, #352]	; (800323c <HAL_PCD_MspInit+0x1bc>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030da:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030dc:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030e0:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e2:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030e4:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e6:	f001 f865 	bl	80041b4 <HAL_GPIO_Init>

    /* Enable USB FS Clock */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    
    /* Set USBFS Interrupt priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, USB_IRQ_PREPRIO, 0);
 80030ec:	2043      	movs	r0, #67	; 0x43
 80030ee:	462a      	mov	r2, r5
 80030f0:	4631      	mov	r1, r6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030f6:	6363      	str	r3, [r4, #52]	; 0x34
 80030f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	9302      	str	r3, [sp, #8]
 8003100:	9b02      	ldr	r3, [sp, #8]
 8003102:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003108:	6463      	str	r3, [r4, #68]	; 0x44
 800310a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800310c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, USB_IRQ_PREPRIO, 0);
 8003114:	f000 fbb8 	bl	8003888 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003118:	2043      	movs	r0, #67	; 0x43
    
    /* Set USBHS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, USB_IRQ_PREPRIO, 0);
    
    /* Enable USBHS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800311a:	f000 fbe7 	bl	80038ec <HAL_NVIC_EnableIRQ>
  }   
}
 800311e:	b010      	add	sp, #64	; 0x40
 8003120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hpcd->Instance == USB_OTG_HS)
 8003124:	4a46      	ldr	r2, [pc, #280]	; (8003240 <HAL_PCD_MspInit+0x1c0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d1f9      	bne.n	800311e <HAL_PCD_MspInit+0x9e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	4c43      	ldr	r4, [pc, #268]	; (8003238 <HAL_PCD_MspInit+0x1b8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800312c:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003130:	260a      	movs	r6, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003132:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003134:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003138:	a90b      	add	r1, sp, #44	; 0x2c
 800313a:	4840      	ldr	r0, [pc, #256]	; (800323c <HAL_PCD_MspInit+0x1bc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6323      	str	r3, [r4, #48]	; 0x30
 8003142:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	9304      	str	r3, [sp, #16]
 800314a:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	6323      	str	r3, [r4, #48]	; 0x30
 8003154:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	9305      	str	r3, [sp, #20]
 800315c:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6323      	str	r3, [r4, #48]	; 0x30
 8003166:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	9306      	str	r3, [sp, #24]
 800316e:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003170:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003176:	6323      	str	r3, [r4, #48]	; 0x30
 8003178:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	9307      	str	r3, [sp, #28]
 8003180:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003182:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003188:	6323      	str	r3, [r4, #48]	; 0x30
 800318a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800318c:	960f      	str	r6, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	9308      	str	r3, [sp, #32]
 8003194:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2320      	movs	r3, #32
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003198:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a0:	f001 f808 	bl	80041b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80031a4:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a6:	a90b      	add	r1, sp, #44	; 0x2c
 80031a8:	4824      	ldr	r0, [pc, #144]	; (800323c <HAL_PCD_MspInit+0x1bc>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80031aa:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80031b0:	e9cd 580d 	strd	r5, r8, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b4:	f000 fffe 	bl	80041b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_5 |\
 80031b8:	f643 4323 	movw	r3, #15395	; 0x3c23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031bc:	a90b      	add	r1, sp, #44	; 0x2c
 80031be:	4821      	ldr	r0, [pc, #132]	; (8003244 <HAL_PCD_MspInit+0x1c4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c0:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80031c2:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c4:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c8:	f000 fff4 	bl	80041b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031cc:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ce:	a90b      	add	r1, sp, #44	; 0x2c
 80031d0:	481d      	ldr	r0, [pc, #116]	; (8003248 <HAL_PCD_MspInit+0x1c8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80031d4:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031da:	f000 ffeb 	bl	80041b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031de:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031e0:	a90b      	add	r1, sp, #44	; 0x2c
 80031e2:	481a      	ldr	r0, [pc, #104]	; (800324c <HAL_PCD_MspInit+0x1cc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80031e6:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e8:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031ec:	f000 ffe2 	bl	80041b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80031f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80031f4:	a90b      	add	r1, sp, #44	; 0x2c
 80031f6:	4816      	ldr	r0, [pc, #88]	; (8003250 <HAL_PCD_MspInit+0x1d0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f8:	950d      	str	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80031fa:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003200:	f000 ffd8 	bl	80041b4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8003204:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_NVIC_SetPriority(OTG_HS_IRQn, USB_IRQ_PREPRIO, 0);
 8003206:	204d      	movs	r0, #77	; 0x4d
 8003208:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800320a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, USB_IRQ_PREPRIO, 0);
 800320e:	4641      	mov	r1, r8
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8003210:	6323      	str	r3, [r4, #48]	; 0x30
 8003212:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003214:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003218:	9309      	str	r3, [sp, #36]	; 0x24
 800321a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800321c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800321e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003222:	6323      	str	r3, [r4, #48]	; 0x30
 8003224:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800322a:	930a      	str	r3, [sp, #40]	; 0x28
 800322c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    HAL_NVIC_SetPriority(OTG_HS_IRQn, USB_IRQ_PREPRIO, 0);
 800322e:	f000 fb2b 	bl	8003888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8003232:	204d      	movs	r0, #77	; 0x4d
 8003234:	e771      	b.n	800311a <HAL_PCD_MspInit+0x9a>
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40020000 	.word	0x40020000
 8003240:	40040000 	.word	0x40040000
 8003244:	40020400 	.word	0x40020400
 8003248:	40020800 	.word	0x40020800
 800324c:	40021c00 	.word	0x40021c00
 8003250:	40022000 	.word	0x40022000

08003254 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 8003254:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8003258:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800325c:	f7fd bc39 	b.w	8000ad2 <USBD_LL_SetupStage>

08003260 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003260:	231c      	movs	r3, #28
 8003262:	fb03 0301 	mla	r3, r3, r1, r0
 8003266:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800326a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800326e:	f7fd bc5d 	b.w	8000b2c <USBD_LL_DataOutStage>

08003272 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003272:	231c      	movs	r3, #28
 8003274:	fb03 0301 	mla	r3, r3, r1, r0
 8003278:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800327c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800327e:	f7fd bc87 	b.w	8000b90 <USBD_LL_DataInStage>

08003282 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 8003282:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8003286:	f7fd bd03 	b.w	8000c90 <USBD_LL_SOF>

0800328a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
  
  /* Set USB Current Speed */
  switch(hpcd->Init.speed)
 800328a:	68c1      	ldr	r1, [r0, #12]
{   
 800328c:	b538      	push	{r3, r4, r5, lr}
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
    break;
    
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 800328e:	1c0d      	adds	r5, r1, #0
{   
 8003290:	4604      	mov	r4, r0
    speed = USBD_SPEED_FULL;
    break;
  }
  
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8003292:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
    speed = USBD_SPEED_FULL;
 8003296:	bf18      	it	ne
 8003298:	2501      	movne	r5, #1
  USBD_LL_Reset(hpcd->pData);
 800329a:	f7fd fcc8 	bl	8000c2e <USBD_LL_Reset>
  
  USBD_LL_SetSpeed(hpcd->pData, speed);
 800329e:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 80032a2:	4629      	mov	r1, r5
}
 80032a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  USBD_LL_SetSpeed(hpcd->pData, speed);
 80032a8:	f7fd bce0 	b.w	8000c6c <USBD_LL_SetSpeed>

080032ac <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Suspend(hpcd->pData);
 80032ac:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80032b0:	f7fd bcdf 	b.w	8000c72 <USBD_LL_Suspend>

080032b4 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 80032b4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80032b8:	f7fd bce4 	b.w	8000c84 <USBD_LL_Resume>

080032bc <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 80032bc:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80032c0:	f7fd bcfe 	b.w	8000cc0 <USBD_LL_IsoOUTIncomplete>

080032c4 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 80032c4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80032c8:	f7fd bcee 	b.w	8000ca8 <USBD_LL_IsoINIncomplete>

080032cc <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 80032cc:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80032d0:	f7fd bd02 	b.w	8000cd8 <USBD_LL_DevConnected>

080032d4 <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 80032d4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80032d8:	f7fd bd00 	b.w	8000cdc <USBD_LL_DevDisconnected>

080032dc <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80032dc:	b538      	push	{r3, r4, r5, lr}
#ifdef USE_USB_FS_INTO_HS
  /* Set LL Driver parameters */
  hpcd.Instance = USB_OTG_HS;
  hpcd.Init.dev_endpoints = 6;
 80032de:	491e      	ldr	r1, [pc, #120]	; (8003358 <USBD_LL_Init+0x7c>)
 80032e0:	2206      	movs	r2, #6
  hpcd.Instance = USB_OTG_HS;
 80032e2:	4b1e      	ldr	r3, [pc, #120]	; (800335c <USBD_LL_Init+0x80>)
  hpcd.Init.use_dedicated_ep1 = 0;
 80032e4:	2400      	movs	r4, #0
  hpcd.Init.dev_endpoints = 6;
 80032e6:	e9c3 1200 	strd	r1, r2, [r3]
  hpcd.Init.ep0_mps = 0x40;
 80032ea:	2240      	movs	r2, #64	; 0x40
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.lpm_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_ULPI;
  hpcd.Init.Sof_enable = 1;
  hpcd.Init.speed = PCD_SPEED_FULL;
 80032ec:	2102      	movs	r1, #2
  hpcd.Init.vbus_sensing_enable = 1;
  
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 80032ee:	f8c3 03fc 	str.w	r0, [r3, #1020]	; 0x3fc
  pdev->pData = &hpcd;
 80032f2:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  
  /* Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 80032f6:	4618      	mov	r0, r3
  hpcd.Init.use_dedicated_ep1 = 0;
 80032f8:	631c      	str	r4, [r3, #48]	; 0x30
  hpcd.Init.speed = PCD_SPEED_FULL;
 80032fa:	60d9      	str	r1, [r3, #12]
  hpcd.Init.dma_enable = 0;
 80032fc:	e9c3 4204 	strd	r4, r2, [r3, #16]
  hpcd.Init.phy_itface = PCD_PHY_ULPI;
 8003300:	2201      	movs	r2, #1
  hpcd.Init.lpm_enable = 0;
 8003302:	e9c3 4408 	strd	r4, r4, [r3, #32]
  hpcd.Init.Sof_enable = 1;
 8003306:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hpcd.Init.vbus_sensing_enable = 1;
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 800330c:	f001 fbfd 	bl	8004b0a <HAL_PCD_Init>
  max_tx_ep_num = USB_AUDIO_CONFIG_RECORD_EP_IN&0x7F;  
 }
 tx_fifo_size[USB_AUDIO_CONFIG_RECORD_EP_IN&0x7F] = (USBD_AUDIO_CONFIG_RECORD_MAX_PACKET_SIZE + 3U)/4;
#endif /* USE_USB_AUDIO_RECORDING */
 
  tx_fifo_used_size = (USB_AUDIO_GetConfigDescriptor(0)+3)/4 ;
 8003310:	4620      	mov	r0, r4
 8003312:	f7fe f939 	bl	8001588 <USB_AUDIO_GetConfigDescriptor>
 8003316:	3003      	adds	r0, #3
 8003318:	f3c0 058f 	ubfx	r5, r0, #2, #16
 {
   if(tx_fifo_size[i]<16)
   {
     tx_fifo_size[i] = 16;
   }
   tx_fifo_used_size += tx_fifo_size[i];
 800331c:	f105 0431 	add.w	r4, r5, #49	; 0x31
 8003320:	b2a4      	uxth	r4, r4
 }
 
 rx_fifo_size += (5*1/*number of control endpoints*/+8
                    +1/* for status information*/+2*8/*number of OUT endpoints*/+1/*for Global NAK*/);
 
  if(tx_fifo_used_size + rx_fifo_size<=USB_FIFO_WORD_SIZE)
 8003322:	f5b4 7f89 	cmp.w	r4, #274	; 0x112
 8003326:	d212      	bcs.n	800334e <USBD_LL_Init+0x72>
  {
#if  USE_USB_AUDIO_RECORDING   
 tx_fifo_size[USB_AUDIO_CONFIG_RECORD_EP_IN&0x7F] += USB_FIFO_WORD_SIZE - (tx_fifo_used_size + rx_fifo_size);
 8003328:	f5c4 74a1 	rsb	r4, r4, #322	; 0x142
 800332c:	b2a4      	uxth	r4, r4
  {
     Error_Handler();
  }
  
  
 HAL_PCDEx_SetRxFiFo(&hpcd, rx_fifo_size);
 800332e:	212f      	movs	r1, #47	; 0x2f
 8003330:	480a      	ldr	r0, [pc, #40]	; (800335c <USBD_LL_Init+0x80>)
 8003332:	f002 f919 	bl	8005568 <HAL_PCDEx_SetRxFiFo>
 for(int i = 0; i<= max_tx_ep_num; i++)
 {
   HAL_PCD_SetTxFiFo(&hpcd, i, tx_fifo_size[i]);
 8003336:	462a      	mov	r2, r5
 8003338:	2100      	movs	r1, #0
 800333a:	4808      	ldr	r0, [pc, #32]	; (800335c <USBD_LL_Init+0x80>)
 800333c:	f002 f8f4 	bl	8005528 <HAL_PCDEx_SetTxFiFo>
 8003340:	4622      	mov	r2, r4
 8003342:	2101      	movs	r1, #1
 8003344:	4805      	ldr	r0, [pc, #20]	; (800335c <USBD_LL_Init+0x80>)
 8003346:	f002 f8ef 	bl	8005528 <HAL_PCDEx_SetTxFiFo>
}
 800334a:	2000      	movs	r0, #0
 800334c:	bd38      	pop	{r3, r4, r5, pc}
     Error_Handler();
 800334e:	f7ff fe73 	bl	8003038 <Error_Handler>
 8003352:	2431      	movs	r4, #49	; 0x31
 8003354:	e7eb      	b.n	800332e <USBD_LL_Init+0x52>
 8003356:	bf00      	nop
 8003358:	40040000 	.word	0x40040000
 800335c:	20000f48 	.word	0x20000f48

08003360 <USBD_LL_Start>:
{
 8003360:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 8003362:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003366:	f001 fc46 	bl	8004bf6 <HAL_PCD_Start>
}
 800336a:	2000      	movs	r0, #0
 800336c:	bd08      	pop	{r3, pc}

0800336e <USBD_LL_OpenEP>:
{
 800336e:	b510      	push	{r4, lr}
 8003370:	461c      	mov	r4, r3
  HAL_PCD_EP_Open(pdev->pData,
 8003372:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003376:	4613      	mov	r3, r2
 8003378:	4622      	mov	r2, r4
 800337a:	f001 ff99 	bl	80052b0 <HAL_PCD_EP_Open>
}
 800337e:	2000      	movs	r0, #0
 8003380:	bd10      	pop	{r4, pc}
	...

08003384 <USBD_LL_CloseEP>:
{
 8003384:	b508      	push	{r3, lr}
  USB_DISABLE_EP_BEFORE_CLOSE(ep_addr);
 8003386:	060b      	lsls	r3, r1, #24
 8003388:	d50b      	bpl.n	80033a2 <USBD_LL_CloseEP+0x1e>
 800338a:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <USBD_LL_CloseEP+0x2c>)
 8003390:	4413      	add	r3, r2
 8003392:	015b      	lsls	r3, r3, #5
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2a00      	cmp	r2, #0
 8003398:	da03      	bge.n	80033a2 <USBD_LL_CloseEP+0x1e>
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033a0:	601a      	str	r2, [r3, #0]
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80033a2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80033a6:	f001 ffbb 	bl	8005320 <HAL_PCD_EP_Close>
}
 80033aa:	2000      	movs	r0, #0
 80033ac:	bd08      	pop	{r3, pc}
 80033ae:	bf00      	nop
 80033b0:	02002048 	.word	0x02002048

080033b4 <USBD_LL_FlushEP>:
{
 80033b4:	b508      	push	{r3, lr}
  HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80033b6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80033ba:	f002 f89c 	bl	80054f6 <HAL_PCD_EP_Flush>
}
 80033be:	2000      	movs	r0, #0
 80033c0:	bd08      	pop	{r3, pc}

080033c2 <USBD_LL_StallEP>:
{
 80033c2:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80033c4:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80033c8:	f002 f825 	bl	8005416 <HAL_PCD_EP_SetStall>
}
 80033cc:	2000      	movs	r0, #0
 80033ce:	bd08      	pop	{r3, pc}

080033d0 <USBD_LL_ClearStallEP>:
{
 80033d0:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80033d2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 80033d6:	f002 f858 	bl	800548a <HAL_PCD_EP_ClrStall>
}
 80033da:	2000      	movs	r0, #0
 80033dc:	bd08      	pop	{r3, pc}

080033de <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80033de:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80033e2:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80033e6:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80033ea:	bf17      	itett	ne
 80033ec:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80033f0:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80033f4:	fb02 3101 	mlane	r1, r2, r1, r3
 80033f8:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80033fc:	bf08      	it	eq
 80033fe:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 8003402:	4770      	bx	lr

08003404 <USBD_LL_SetUSBAddress>:
{
 8003404:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003406:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 800340a:	f001 ff3d 	bl	8005288 <HAL_PCD_SetAddress>
}
 800340e:	2000      	movs	r0, #0
 8003410:	bd08      	pop	{r3, pc}

08003412 <USBD_LL_Transmit>:
{
 8003412:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003414:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003418:	f001 ffdd 	bl	80053d6 <HAL_PCD_EP_Transmit>
}
 800341c:	2000      	movs	r0, #0
 800341e:	bd08      	pop	{r3, pc}

08003420 <USBD_LL_PrepareReceive>:
{
 8003420:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003422:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003426:	f001 ffaa 	bl	800537e <HAL_PCD_EP_Receive>
}
 800342a:	2000      	movs	r0, #0
 800342c:	bd08      	pop	{r3, pc}

0800342e <USBD_LL_GetRxDataSize>:
{
 800342e:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8003430:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8003434:	f001 ffc7 	bl	80053c6 <HAL_PCD_EP_GetRxCount>
}
 8003438:	bd08      	pop	{r3, pc}
	...

0800343c <USBD_AUDIO_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_DeviceDesc);
 800343c:	2312      	movs	r3, #18
  return (uint8_t*)USBD_DeviceDesc;
}
 800343e:	4801      	ldr	r0, [pc, #4]	; (8003444 <USBD_AUDIO_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_DeviceDesc);
 8003440:	800b      	strh	r3, [r1, #0]
}
 8003442:	4770      	bx	lr
 8003444:	200000fc 	.word	0x200000fc

08003448 <USBD_AUDIO_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_AUDIO_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8003448:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 800344a:	4801      	ldr	r0, [pc, #4]	; (8003450 <USBD_AUDIO_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 800344c:	800b      	strh	r3, [r1, #0]
}
 800344e:	4770      	bx	lr
 8003450:	20000110 	.word	0x20000110

08003454 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 8003454:	2300      	movs	r3, #0
 8003456:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 8003458:	461e      	mov	r6, r3
    if( ((value >> 28)) < 0xA )
 800345a:	0f05      	lsrs	r5, r0, #28
    value = value << 4;
 800345c:	0100      	lsls	r0, r0, #4
 800345e:	b2ec      	uxtb	r4, r5
    if( ((value >> 28)) < 0xA )
 8003460:	2d09      	cmp	r5, #9
      pbuf[ 2* idx] = (value >> 28) + '0';
 8003462:	bf94      	ite	ls
 8003464:	3430      	addls	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 8003466:	3437      	addhi	r4, #55	; 0x37
 8003468:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800346c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8003470:	3301      	adds	r3, #1
 8003472:	7066      	strb	r6, [r4, #1]
  for( idx = 0; idx < len; idx ++)
 8003474:	b2dc      	uxtb	r4, r3
 8003476:	42a2      	cmp	r2, r4
 8003478:	d8ef      	bhi.n	800345a <IntToUnicode+0x6>
  }
}
 800347a:	bd70      	pop	{r4, r5, r6, pc}

0800347c <USBD_AUDIO_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800347c:	231a      	movs	r3, #26
{
 800347e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8003480:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <USBD_AUDIO_SerialStrDescriptor+0x2c>)
 8003484:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 8003486:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8003488:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800348a:	18c0      	adds	r0, r0, r3
 800348c:	d00a      	beq.n	80034a4 <USBD_AUDIO_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800348e:	4b07      	ldr	r3, [pc, #28]	; (80034ac <USBD_AUDIO_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, (uint8_t*)&USBD_StringSerial[2] ,8);
 8003490:	2208      	movs	r2, #8
 8003492:	4907      	ldr	r1, [pc, #28]	; (80034b0 <USBD_AUDIO_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 8003494:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, (uint8_t*)&USBD_StringSerial[2] ,8);
 8003496:	f7ff ffdd 	bl	8003454 <IntToUnicode>
    IntToUnicode (deviceserial1, (uint8_t*)&USBD_StringSerial[18] ,4);
 800349a:	2204      	movs	r2, #4
 800349c:	4905      	ldr	r1, [pc, #20]	; (80034b4 <USBD_AUDIO_SerialStrDescriptor+0x38>)
 800349e:	4620      	mov	r0, r4
 80034a0:	f7ff ffd8 	bl	8003454 <IntToUnicode>
}
 80034a4:	4804      	ldr	r0, [pc, #16]	; (80034b8 <USBD_AUDIO_SerialStrDescriptor+0x3c>)
 80034a6:	bd10      	pop	{r4, pc}
 80034a8:	1fff7a10 	.word	0x1fff7a10
 80034ac:	1fff7a14 	.word	0x1fff7a14
 80034b0:	20000116 	.word	0x20000116
 80034b4:	20000126 	.word	0x20000126
 80034b8:	20000114 	.word	0x20000114

080034bc <USBD_AUDIO_ManufacturerStrDescriptor>:
{
 80034bc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80034be:	4c04      	ldr	r4, [pc, #16]	; (80034d0 <USBD_AUDIO_ManufacturerStrDescriptor+0x14>)
 80034c0:	460a      	mov	r2, r1
 80034c2:	4804      	ldr	r0, [pc, #16]	; (80034d4 <USBD_AUDIO_ManufacturerStrDescriptor+0x18>)
 80034c4:	4621      	mov	r1, r4
 80034c6:	f003 fed2 	bl	800726e <USBD_GetString>
}
 80034ca:	4620      	mov	r0, r4
 80034cc:	bd10      	pop	{r4, pc}
 80034ce:	bf00      	nop
 80034d0:	20001348 	.word	0x20001348
 80034d4:	08007584 	.word	0x08007584

080034d8 <USBD_AUDIO_ProductStrDescriptor>:
{
 80034d8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80034da:	4905      	ldr	r1, [pc, #20]	; (80034f0 <USBD_AUDIO_ProductStrDescriptor+0x18>)
{
 80034dc:	b508      	push	{r3, lr}
  if(speed == USBD_SPEED_HIGH)
 80034de:	b920      	cbnz	r0, 80034ea <USBD_AUDIO_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80034e0:	4804      	ldr	r0, [pc, #16]	; (80034f4 <USBD_AUDIO_ProductStrDescriptor+0x1c>)
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80034e2:	f003 fec4 	bl	800726e <USBD_GetString>
}
 80034e6:	4802      	ldr	r0, [pc, #8]	; (80034f0 <USBD_AUDIO_ProductStrDescriptor+0x18>)
 80034e8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80034ea:	4803      	ldr	r0, [pc, #12]	; (80034f8 <USBD_AUDIO_ProductStrDescriptor+0x20>)
 80034ec:	e7f9      	b.n	80034e2 <USBD_AUDIO_ProductStrDescriptor+0xa>
 80034ee:	bf00      	nop
 80034f0:	20001348 	.word	0x20001348
 80034f4:	08007597 	.word	0x08007597
 80034f8:	080075b8 	.word	0x080075b8

080034fc <USBD_AUDIO_ConfigStrDescriptor>:
{
 80034fc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80034fe:	4c04      	ldr	r4, [pc, #16]	; (8003510 <USBD_AUDIO_ConfigStrDescriptor+0x14>)
 8003500:	460a      	mov	r2, r1
 8003502:	4804      	ldr	r0, [pc, #16]	; (8003514 <USBD_AUDIO_ConfigStrDescriptor+0x18>)
 8003504:	4621      	mov	r1, r4
 8003506:	f003 feb2 	bl	800726e <USBD_GetString>
}
 800350a:	4620      	mov	r0, r4
 800350c:	bd10      	pop	{r4, pc}
 800350e:	bf00      	nop
 8003510:	20001348 	.word	0x20001348
 8003514:	080075d9 	.word	0x080075d9

08003518 <USBD_AUDIO_InterfaceStrDescriptor>:
{
 8003518:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800351a:	4c04      	ldr	r4, [pc, #16]	; (800352c <USBD_AUDIO_InterfaceStrDescriptor+0x14>)
 800351c:	460a      	mov	r2, r1
 800351e:	4804      	ldr	r0, [pc, #16]	; (8003530 <USBD_AUDIO_InterfaceStrDescriptor+0x18>)
 8003520:	4621      	mov	r1, r4
 8003522:	f003 fea4 	bl	800726e <USBD_GetString>
}
 8003526:	4620      	mov	r0, r4
 8003528:	bd10      	pop	{r4, pc}
 800352a:	bf00      	nop
 800352c:	20001348 	.word	0x20001348
 8003530:	080075e6 	.word	0x080075e6

08003534 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800353a:	f001 fae3 	bl	8004b04 <HAL_I2C_GetState>
 800353e:	2800      	cmp	r0, #0
 8003540:	d160      	bne.n	8003604 <I2Cx_Init+0xd0>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003542:	4b50      	ldr	r3, [pc, #320]	; (8003684 <I2Cx_Init+0x150>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8003544:	2600      	movs	r6, #0
 8003546:	4c50      	ldr	r4, [pc, #320]	; (8003688 <I2Cx_Init+0x154>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003548:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 800354a:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800354c:	bf0c      	ite	eq
 800354e:	4a4f      	ldreq	r2, [pc, #316]	; (800368c <I2Cx_Init+0x158>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003550:	4a4f      	ldrne	r2, [pc, #316]	; (8003690 <I2Cx_Init+0x15c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003552:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003554:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 8003556:	4a4f      	ldr	r2, [pc, #316]	; (8003694 <I2Cx_Init+0x160>)
 8003558:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800355c:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003560:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003564:	e9c5 2603 	strd	r2, r6, [r5, #12]
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003568:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800356a:	d14d      	bne.n	8003608 <I2Cx_Init+0xd4>
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 800356c:	f043 0308 	orr.w	r3, r3, #8
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003570:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8003574:	f04f 0c02 	mov.w	ip, #2
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8003578:	a905      	add	r1, sp, #20
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 800357a:	6323      	str	r3, [r4, #48]	; 0x30
 800357c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	9b00      	ldr	r3, [sp, #0]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	6323      	str	r3, [r4, #48]	; 0x30
 800358e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003590:	9607      	str	r6, [sp, #28]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800359a:	2312      	movs	r3, #18
 800359c:	e9cd 0305 	strd	r0, r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 80035a0:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 80035a2:	483d      	ldr	r0, [pc, #244]	; (8003698 <I2Cx_Init+0x164>)
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 80035a4:	e9cd c308 	strd	ip, r3, [sp, #32]
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 80035a8:	f000 fe04 	bl	80041b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80035ac:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 80035ae:	a905      	add	r1, sp, #20
 80035b0:	483a      	ldr	r0, [pc, #232]	; (800369c <I2Cx_Init+0x168>)
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80035b2:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 80035b4:	230b      	movs	r3, #11
 80035b6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 80035b8:	f000 fdfc 	bl	80041b4 <HAL_GPIO_Init>
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80035bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80035be:	4632      	mov	r2, r6
 80035c0:	210f      	movs	r1, #15
 80035c2:	205f      	movs	r0, #95	; 0x5f
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80035c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035c8:	6423      	str	r3, [r4, #64]	; 0x40
 80035ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d0:	9302      	str	r3, [sp, #8]
 80035d2:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80035d4:	6a23      	ldr	r3, [r4, #32]
 80035d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035da:	6223      	str	r3, [r4, #32]
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80035dc:	6a23      	ldr	r3, [r4, #32]
 80035de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e2:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80035e4:	f000 f950 	bl	8003888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80035e8:	205f      	movs	r0, #95	; 0x5f
 80035ea:	f000 f97f 	bl	80038ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80035ee:	2060      	movs	r0, #96	; 0x60
 80035f0:	4632      	mov	r2, r6
 80035f2:	210f      	movs	r1, #15
 80035f4:	f000 f948 	bl	8003888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 80035f8:	2060      	movs	r0, #96	; 0x60
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80035fa:	f000 f977 	bl	80038ec <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 80035fe:	4628      	mov	r0, r5
 8003600:	f001 f8a6 	bl	8004750 <HAL_I2C_Init>
  }
}
 8003604:	b00a      	add	sp, #40	; 0x28
 8003606:	bd70      	pop	{r4, r5, r6, pc}
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003608:	f043 0302 	orr.w	r3, r3, #2
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800360c:	f44f 7280 	mov.w	r2, #256	; 0x100
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003610:	2102      	movs	r1, #2
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003612:	4822      	ldr	r0, [pc, #136]	; (800369c <I2Cx_Init+0x168>)
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003614:	6323      	str	r3, [r4, #48]	; 0x30
 8003616:	6b23      	ldr	r3, [r4, #48]	; 0x30
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003618:	9607      	str	r6, [sp, #28]
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	9303      	str	r3, [sp, #12]
 8003620:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003622:	2312      	movs	r3, #18
 8003624:	e9cd 2305 	strd	r2, r3, [sp, #20]
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003628:	2304      	movs	r3, #4
 800362a:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800362e:	a905      	add	r1, sp, #20
 8003630:	f000 fdc0 	bl	80041b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003634:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003638:	a905      	add	r1, sp, #20
 800363a:	4818      	ldr	r0, [pc, #96]	; (800369c <I2Cx_Init+0x168>)
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800363c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800363e:	f000 fdb9 	bl	80041b4 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003642:	6c23      	ldr	r3, [r4, #64]	; 0x40
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003644:	4632      	mov	r2, r6
 8003646:	210f      	movs	r1, #15
 8003648:	201f      	movs	r0, #31
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800364a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800364e:	6423      	str	r3, [r4, #64]	; 0x40
 8003650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003656:	9304      	str	r3, [sp, #16]
 8003658:	9b04      	ldr	r3, [sp, #16]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800365a:	6a23      	ldr	r3, [r4, #32]
 800365c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003660:	6223      	str	r3, [r4, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003662:	6a23      	ldr	r3, [r4, #32]
 8003664:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003668:	6223      	str	r3, [r4, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800366a:	f000 f90d 	bl	8003888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800366e:	201f      	movs	r0, #31
 8003670:	f000 f93c 	bl	80038ec <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003674:	2020      	movs	r0, #32
 8003676:	4632      	mov	r2, r6
 8003678:	210f      	movs	r1, #15
 800367a:	f000 f905 	bl	8003888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800367e:	2020      	movs	r0, #32
 8003680:	e7bb      	b.n	80035fa <I2Cx_Init+0xc6>
 8003682:	bf00      	nop
 8003684:	20000704 	.word	0x20000704
 8003688:	40023800 	.word	0x40023800
 800368c:	40006000 	.word	0x40006000
 8003690:	40005400 	.word	0x40005400
 8003694:	40912732 	.word	0x40912732
 8003698:	40020c00 	.word	0x40020c00
 800369c:	40020400 	.word	0x40020400

080036a0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80036a0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80036a2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 80036a6:	b085      	sub	sp, #20
 80036a8:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80036aa:	9402      	str	r4, [sp, #8]
 80036ac:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80036b0:	9401      	str	r4, [sp, #4]
 80036b2:	9c08      	ldr	r4, [sp, #32]
 80036b4:	9400      	str	r4, [sp, #0]
 80036b6:	f001 f96b 	bl	8004990 <HAL_I2C_Mem_Read>

  /* Check the communication status */
  if(status != HAL_OK)
 80036ba:	4604      	mov	r4, r0
 80036bc:	b128      	cbz	r0, 80036ca <I2Cx_ReadMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80036be:	4628      	mov	r0, r5
 80036c0:	f001 f898 	bl	80047f4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80036c4:	4628      	mov	r0, r5
 80036c6:	f7ff ff35 	bl	8003534 <I2Cx_Init>
}
 80036ca:	4620      	mov	r0, r4
 80036cc:	b005      	add	sp, #20
 80036ce:	bd30      	pop	{r4, r5, pc}

080036d0 <I2Cx_WriteMultiple>:
{
 80036d0:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80036d2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
{
 80036d6:	b085      	sub	sp, #20
 80036d8:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80036da:	9402      	str	r4, [sp, #8]
 80036dc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80036e0:	9401      	str	r4, [sp, #4]
 80036e2:	9c08      	ldr	r4, [sp, #32]
 80036e4:	9400      	str	r4, [sp, #0]
 80036e6:	f001 f89e 	bl	8004826 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80036ea:	4604      	mov	r4, r0
 80036ec:	b128      	cbz	r0, 80036fa <I2Cx_WriteMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 80036ee:	4628      	mov	r0, r5
 80036f0:	f001 f880 	bl	80047f4 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80036f4:	4628      	mov	r0, r5
 80036f6:	f7ff ff1d 	bl	8003534 <I2Cx_Init>
}
 80036fa:	4620      	mov	r0, r4
 80036fc:	b005      	add	sp, #20
 80036fe:	bd30      	pop	{r4, r5, pc}

08003700 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
  I2Cx_Init(&hI2cAudioHandler);
 8003700:	4801      	ldr	r0, [pc, #4]	; (8003708 <AUDIO_IO_Init+0x8>)
 8003702:	f7ff bf17 	b.w	8003534 <I2Cx_Init>
 8003706:	bf00      	nop
 8003708:	20000704 	.word	0x20000704

0800370c <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{

}
 800370c:	4770      	bx	lr
	...

08003710 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003712:	ba52      	rev16	r2, r2
 8003714:	ac04      	add	r4, sp, #16
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003716:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003718:	f824 2d02 	strh.w	r2, [r4, #-2]!
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800371c:	460a      	mov	r2, r1
 800371e:	4601      	mov	r1, r0
 8003720:	4803      	ldr	r0, [pc, #12]	; (8003730 <AUDIO_IO_Write+0x20>)
 8003722:	e9cd 4300 	strd	r4, r3, [sp]
 8003726:	f7ff ffd3 	bl	80036d0 <I2Cx_WriteMultiple>
}
 800372a:	b004      	add	sp, #16
 800372c:	bd10      	pop	{r4, pc}
 800372e:	bf00      	nop
 8003730:	20000704 	.word	0x20000704

08003734 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	aa04      	add	r2, sp, #16
 800373a:	f822 3d02 	strh.w	r3, [r2, #-2]!
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800373e:	2302      	movs	r3, #2
 8003740:	e9cd 2300 	strd	r2, r3, [sp]
 8003744:	460a      	mov	r2, r1
 8003746:	4601      	mov	r1, r0
 8003748:	4804      	ldr	r0, [pc, #16]	; (800375c <AUDIO_IO_Read+0x28>)
 800374a:	f7ff ffa9 	bl	80036a0 <I2Cx_ReadMultiple>
 800374e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8003752:	ba40      	rev16	r0, r0
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
  
  read_value = tmp;
  
  return read_value;
}
 8003754:	b280      	uxth	r0, r0
 8003756:	b005      	add	sp, #20
 8003758:	f85d fb04 	ldr.w	pc, [sp], #4
 800375c:	20000704 	.word	0x20000704

08003760 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay
  * @param  Delay: Delay in ms
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8003760:	f000 b86e 	b.w	8003840 <HAL_Delay>

08003764 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003764:	490f      	ldr	r1, [pc, #60]	; (80037a4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003766:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003768:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800376c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <SystemInit+0x44>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800377e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003786:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800378a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800378c:	4a07      	ldr	r2, [pc, #28]	; (80037ac <SystemInit+0x48>)
 800378e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003796:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003798:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800379a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800379e:	608b      	str	r3, [r1, #8]
#endif
}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00
 80037a8:	40023800 	.word	0x40023800
 80037ac:	24003010 	.word	0x24003010

080037b0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b4:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037b6:	4e0e      	ldr	r6, [pc, #56]	; (80037f0 <HAL_InitTick+0x3c>)
{
 80037b8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037be:	4a0d      	ldr	r2, [pc, #52]	; (80037f4 <HAL_InitTick+0x40>)
 80037c0:	7830      	ldrb	r0, [r6, #0]
 80037c2:	fbb3 f3f0 	udiv	r3, r3, r0
 80037c6:	6810      	ldr	r0, [r2, #0]
 80037c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80037cc:	f000 f8b0 	bl	8003930 <HAL_SYSTICK_Config>
 80037d0:	4604      	mov	r4, r0
 80037d2:	b950      	cbnz	r0, 80037ea <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037d4:	2d0f      	cmp	r5, #15
 80037d6:	d808      	bhi.n	80037ea <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d8:	4602      	mov	r2, r0
 80037da:	4629      	mov	r1, r5
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037e0:	f000 f852 	bl	8003888 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037e4:	4620      	mov	r0, r4
 80037e6:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80037ea:	2001      	movs	r0, #1
 80037ec:	e7fc      	b.n	80037e8 <HAL_InitTick+0x34>
 80037ee:	bf00      	nop
 80037f0:	20000150 	.word	0x20000150
 80037f4:	2000014c 	.word	0x2000014c

080037f8 <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
 80037f8:	4a07      	ldr	r2, [pc, #28]	; (8003818 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037fa:	2003      	movs	r0, #3
{
 80037fc:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80037fe:	6813      	ldr	r3, [r2, #0]
 8003800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003804:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003806:	f000 f82d 	bl	8003864 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800380a:	2000      	movs	r0, #0
 800380c:	f7ff ffd2 	bl	80037b4 <HAL_InitTick>
  HAL_MspInit();
 8003810:	f7ff ffce 	bl	80037b0 <HAL_MspInit>
}
 8003814:	2000      	movs	r0, #0
 8003816:	bd08      	pop	{r3, pc}
 8003818:	40023c00 	.word	0x40023c00

0800381c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800381c:	4a03      	ldr	r2, [pc, #12]	; (800382c <HAL_IncTick+0x10>)
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <HAL_IncTick+0x14>)
 8003820:	6811      	ldr	r1, [r2, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	440b      	add	r3, r1
 8003826:	6013      	str	r3, [r2, #0]
}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20001448 	.word	0x20001448
 8003830:	20000150 	.word	0x20000150

08003834 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003834:	4b01      	ldr	r3, [pc, #4]	; (800383c <HAL_GetTick+0x8>)
 8003836:	6818      	ldr	r0, [r3, #0]
}
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20001448 	.word	0x20001448

08003840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003840:	b538      	push	{r3, r4, r5, lr}
 8003842:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003844:	f7ff fff6 	bl	8003834 <HAL_GetTick>
 8003848:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800384a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800384c:	bf1e      	ittt	ne
 800384e:	4b04      	ldrne	r3, [pc, #16]	; (8003860 <HAL_Delay+0x20>)
 8003850:	781b      	ldrbne	r3, [r3, #0]
 8003852:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003854:	f7ff ffee 	bl	8003834 <HAL_GetTick>
 8003858:	1b40      	subs	r0, r0, r5
 800385a:	42a0      	cmp	r0, r4
 800385c:	d3fa      	bcc.n	8003854 <HAL_Delay+0x14>
  {
  }
}
 800385e:	bd38      	pop	{r3, r4, r5, pc}
 8003860:	20000150 	.word	0x20000150

08003864 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003864:	4a07      	ldr	r2, [pc, #28]	; (8003884 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003866:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003868:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800386a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800386e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800387a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800387e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003880:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003888:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800388a:	b570      	push	{r4, r5, r6, lr}
 800388c:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800388e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003892:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003896:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800389c:	2d04      	cmp	r5, #4
 800389e:	bf28      	it	cs
 80038a0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a8:	bf8c      	ite	hi
 80038aa:	3c03      	subhi	r4, #3
 80038ac:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 80038ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b0:	ea21 0303 	bic.w	r3, r1, r3
 80038b4:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b8:	fa06 f404 	lsl.w	r4, r6, r4
 80038bc:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	ea43 0304 	orr.w	r3, r3, r4
 80038c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80038c8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80038ca:	db06      	blt.n	80038da <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038cc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80038d0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80038d4:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80038d8:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038da:	f000 000f 	and.w	r0, r0, #15
 80038de:	4a02      	ldr	r2, [pc, #8]	; (80038e8 <HAL_NVIC_SetPriority+0x60>)
 80038e0:	5413      	strb	r3, [r2, r0]
 80038e2:	e7f9      	b.n	80038d8 <HAL_NVIC_SetPriority+0x50>
 80038e4:	e000ed00 	.word	0xe000ed00
 80038e8:	e000ed14 	.word	0xe000ed14

080038ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80038ec:	2800      	cmp	r0, #0
 80038ee:	db08      	blt.n	8003902 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80038f0:	0942      	lsrs	r2, r0, #5
 80038f2:	2301      	movs	r3, #1
 80038f4:	f000 001f 	and.w	r0, r0, #31
 80038f8:	fa03 f000 	lsl.w	r0, r3, r0
 80038fc:	4b01      	ldr	r3, [pc, #4]	; (8003904 <HAL_NVIC_EnableIRQ+0x18>)
 80038fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100

08003908 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003908:	2800      	cmp	r0, #0
 800390a:	db0d      	blt.n	8003928 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800390c:	0943      	lsrs	r3, r0, #5
 800390e:	2201      	movs	r2, #1
 8003910:	f000 001f 	and.w	r0, r0, #31
 8003914:	3320      	adds	r3, #32
 8003916:	fa02 f000 	lsl.w	r0, r2, r0
 800391a:	4a04      	ldr	r2, [pc, #16]	; (800392c <HAL_NVIC_DisableIRQ+0x24>)
 800391c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003920:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003924:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000e100 	.word	0xe000e100

08003930 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003930:	3801      	subs	r0, #1
 8003932:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003936:	d20a      	bcs.n	800394e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393a:	21f0      	movs	r1, #240	; 0xf0
 800393c:	4a06      	ldr	r2, [pc, #24]	; (8003958 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800393e:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003940:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003942:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003946:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003948:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800394e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	e000e010 	.word	0xe000e010
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 800395c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800395e:	6803      	ldr	r3, [r0, #0]
 8003960:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 8003964:	b94a      	cbnz	r2, 800397a <DFSDM_RegConvStart+0x1e>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800396c:	601a      	str	r2, [r3, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800396e:	2901      	cmp	r1, #1
 8003970:	d11e      	bne.n	80039b0 <DFSDM_RegConvStart+0x54>
 8003972:	2302      	movs	r3, #2
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003974:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
}
 8003978:	4770      	bx	lr
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800397a:	681a      	ldr	r2, [r3, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800397c:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800398a:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8003994:	d1eb      	bne.n	800396e <DFSDM_RegConvStart+0x12>
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003996:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003998:	b91a      	cbnz	r2, 80039a2 <DFSDM_RegConvStart+0x46>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	f042 0202 	orr.w	r2, r2, #2
 80039a0:	601a      	str	r2, [r3, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 80039a2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	bf0c      	ite	eq
 80039aa:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 80039ac:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80039ae:	6483      	str	r3, [r0, #72]	; 0x48
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80039b0:	2304      	movs	r3, #4
 80039b2:	e7df      	b.n	8003974 <DFSDM_RegConvStart+0x18>

080039b4 <DFSDM_RegConvStop>:
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80039b4:	6803      	ldr	r3, [r0, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80039be:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80039c0:	2a01      	cmp	r2, #1
 80039c2:	d103      	bne.n	80039cc <DFSDM_RegConvStop+0x18>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80039ca:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
  
  /* If injected conversion was in progress, restart it */
  if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80039d4:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 80039d8:	2a04      	cmp	r2, #4
 80039da:	d110      	bne.n	80039fe <DFSDM_RegConvStop+0x4a>
  {
    if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80039dc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80039de:	b91a      	cbnz	r2, 80039e8 <DFSDM_RegConvStop+0x34>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	f042 0202 	orr.w	r2, r2, #2
 80039e6:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
                                       hdfsdm_filter->InjectedChannelsNbr : 1;
 80039e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	bf0c      	ite	eq
 80039f0:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 80039f2:	2301      	movne	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80039f4:	6483      	str	r3, [r0, #72]	; 0x48
  }
  
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
                          HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80039f6:	2303      	movs	r3, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80039f8:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
}
 80039fc:	4770      	bx	lr
                          HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80039fe:	2a02      	cmp	r2, #2
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2303      	movne	r3, #3
 8003a06:	e7f7      	b.n	80039f8 <DFSDM_RegConvStop+0x44>

08003a08 <DFSDM_GetChannelFromInstance>:
  if(Instance == DFSDM1_Channel0)
 8003a08:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <DFSDM_GetChannelFromInstance+0x54>)
 8003a0a:	4298      	cmp	r0, r3
 8003a0c:	d017      	beq.n	8003a3e <DFSDM_GetChannelFromInstance+0x36>
  else if(Instance == DFSDM1_Channel1)
 8003a0e:	3320      	adds	r3, #32
 8003a10:	4298      	cmp	r0, r3
 8003a12:	d016      	beq.n	8003a42 <DFSDM_GetChannelFromInstance+0x3a>
  else if(Instance == DFSDM1_Channel2)
 8003a14:	3320      	adds	r3, #32
 8003a16:	4298      	cmp	r0, r3
 8003a18:	d015      	beq.n	8003a46 <DFSDM_GetChannelFromInstance+0x3e>
  else if(Instance == DFSDM1_Channel3)
 8003a1a:	3320      	adds	r3, #32
 8003a1c:	4298      	cmp	r0, r3
 8003a1e:	d014      	beq.n	8003a4a <DFSDM_GetChannelFromInstance+0x42>
  else if(Instance == DFSDM1_Channel4)
 8003a20:	3320      	adds	r3, #32
 8003a22:	4298      	cmp	r0, r3
 8003a24:	d013      	beq.n	8003a4e <DFSDM_GetChannelFromInstance+0x46>
  else if(Instance == DFSDM1_Channel5)
 8003a26:	3320      	adds	r3, #32
 8003a28:	4298      	cmp	r0, r3
 8003a2a:	d012      	beq.n	8003a52 <DFSDM_GetChannelFromInstance+0x4a>
  else if(Instance == DFSDM1_Channel6)
 8003a2c:	3320      	adds	r3, #32
 8003a2e:	4298      	cmp	r0, r3
 8003a30:	d011      	beq.n	8003a56 <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 8003a32:	3320      	adds	r3, #32
 8003a34:	4298      	cmp	r0, r3
 8003a36:	bf14      	ite	ne
 8003a38:	20ff      	movne	r0, #255	; 0xff
 8003a3a:	2007      	moveq	r0, #7
 8003a3c:	4770      	bx	lr
    channel = 0;
 8003a3e:	2000      	movs	r0, #0
 8003a40:	4770      	bx	lr
    channel = 1;
 8003a42:	2001      	movs	r0, #1
 8003a44:	4770      	bx	lr
    channel = 2;
 8003a46:	2002      	movs	r0, #2
 8003a48:	4770      	bx	lr
    channel = 3;
 8003a4a:	2003      	movs	r0, #3
 8003a4c:	4770      	bx	lr
    channel = 4;
 8003a4e:	2004      	movs	r0, #4
 8003a50:	4770      	bx	lr
    channel = 5;
 8003a52:	2005      	movs	r0, #5
 8003a54:	4770      	bx	lr
    channel = 6;
 8003a56:	2006      	movs	r0, #6
}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40017400 	.word	0x40017400

08003a60 <HAL_DFSDM_ChannelMspInit>:
}
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_DFSDM_ChannelInit>:
{
 8003a64:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_channel == NULL)
 8003a66:	4604      	mov	r4, r0
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d066      	beq.n	8003b3a <HAL_DFSDM_ChannelInit+0xd6>
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003a6c:	4d34      	ldr	r5, [pc, #208]	; (8003b40 <HAL_DFSDM_ChannelInit+0xdc>)
 8003a6e:	6800      	ldr	r0, [r0, #0]
 8003a70:	f7ff ffca 	bl	8003a08 <DFSDM_GetChannelFromInstance>
 8003a74:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d15e      	bne.n	8003b3a <HAL_DFSDM_ChannelInit+0xd6>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f7ff ffef 	bl	8003a60 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8003a82:	6a2b      	ldr	r3, [r5, #32]
 8003a84:	3301      	adds	r3, #1
 8003a86:	622b      	str	r3, [r5, #32]
  if(v_dfsdm1ChannelCounter == 1)
 8003a88:	6a2b      	ldr	r3, [r5, #32]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d119      	bne.n	8003ac2 <HAL_DFSDM_ChannelInit+0x5e>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003a8e:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <HAL_DFSDM_ChannelInit+0xe0>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003a96:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68a1      	ldr	r1, [r4, #8]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8003aa6:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003aa8:	7922      	ldrb	r2, [r4, #4]
 8003aaa:	2a01      	cmp	r2, #1
 8003aac:	d105      	bne.n	8003aba <HAL_DFSDM_ChannelInit+0x56>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8003aae:	68e1      	ldr	r1, [r4, #12]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	3901      	subs	r1, #1
 8003ab4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003ab8:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ac0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003ac2:	6820      	ldr	r0, [r4, #0]
 8003ac4:	6803      	ldr	r3, [r0, #0]
 8003ac6:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8003aca:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003acc:	6802      	ldr	r2, [r0, #0]
 8003ace:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 8003ad2:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003ad4:	69a1      	ldr	r1, [r4, #24]
 8003ad6:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003adc:	6803      	ldr	r3, [r0, #0]
 8003ade:	f023 030f 	bic.w	r3, r3, #15
 8003ae2:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003ae4:	6802      	ldr	r2, [r0, #0]
 8003ae6:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003aea:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003aec:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003aee:	4313      	orrs	r3, r2
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003af0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003af2:	6003      	str	r3, [r0, #0]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003af4:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003af6:	6883      	ldr	r3, [r0, #8]
 8003af8:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8003afc:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003afe:	6883      	ldr	r3, [r0, #8]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003b06:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003b08:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003b0a:	6843      	ldr	r3, [r0, #4]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003b12:	6843      	ldr	r3, [r0, #4]
 8003b14:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003b18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b1e:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003b20:	6803      	ldr	r3, [r0, #0]
 8003b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b26:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003b2e:	f7ff ff6b 	bl	8003a08 <DFSDM_GetChannelFromInstance>
 8003b32:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8003b36:	2000      	movs	r0, #0
}
 8003b38:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	e7fc      	b.n	8003b38 <HAL_DFSDM_ChannelInit+0xd4>
 8003b3e:	bf00      	nop
 8003b40:	2000079c 	.word	0x2000079c
 8003b44:	40017400 	.word	0x40017400

08003b48 <HAL_DFSDM_ChannelMspDeInit>:
 8003b48:	4770      	bx	lr
	...

08003b4c <HAL_DFSDM_ChannelDeInit>:
{
 8003b4c:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_channel == NULL)
 8003b4e:	4605      	mov	r5, r0
 8003b50:	b310      	cbz	r0, 8003b98 <HAL_DFSDM_ChannelDeInit+0x4c>
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] == NULL)
 8003b52:	6802      	ldr	r2, [r0, #0]
 8003b54:	4c11      	ldr	r4, [pc, #68]	; (8003b9c <HAL_DFSDM_ChannelDeInit+0x50>)
 8003b56:	4610      	mov	r0, r2
 8003b58:	f7ff ff56 	bl	8003a08 <DFSDM_GetChannelFromInstance>
 8003b5c:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 8003b60:	b1d3      	cbz	r3, 8003b98 <HAL_DFSDM_ChannelDeInit+0x4c>
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CHEN);
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b68:	6013      	str	r3, [r2, #0]
  v_dfsdm1ChannelCounter--;
 8003b6a:	6a23      	ldr	r3, [r4, #32]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	6223      	str	r3, [r4, #32]
  if(v_dfsdm1ChannelCounter == 0)
 8003b70:	6a23      	ldr	r3, [r4, #32]
 8003b72:	b923      	cbnz	r3, 8003b7e <HAL_DFSDM_ChannelDeInit+0x32>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_DFSDMEN);
 8003b74:	4a0a      	ldr	r2, [pc, #40]	; (8003ba0 <HAL_DFSDM_ChannelDeInit+0x54>)
 8003b76:	6813      	ldr	r3, [r2, #0]
 8003b78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b7c:	6013      	str	r3, [r2, #0]
  HAL_DFSDM_ChannelMspDeInit(hdfsdm_channel);
 8003b7e:	4628      	mov	r0, r5
 8003b80:	f7ff ffe2 	bl	8003b48 <HAL_DFSDM_ChannelMspDeInit>
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_RESET;
 8003b84:	2200      	movs	r2, #0
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = (DFSDM_Channel_HandleTypeDef *) NULL;
 8003b86:	6828      	ldr	r0, [r5, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_RESET;
 8003b88:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = (DFSDM_Channel_HandleTypeDef *) NULL;
 8003b8c:	f7ff ff3c 	bl	8003a08 <DFSDM_GetChannelFromInstance>
 8003b90:	f844 2020 	str.w	r2, [r4, r0, lsl #2]
  return HAL_OK;
 8003b94:	4610      	mov	r0, r2
}
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003b98:	2001      	movs	r0, #1
 8003b9a:	e7fc      	b.n	8003b96 <HAL_DFSDM_ChannelDeInit+0x4a>
 8003b9c:	2000079c 	.word	0x2000079c
 8003ba0:	40017400 	.word	0x40017400

08003ba4 <HAL_DFSDM_FilterMspInit>:
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_DFSDM_FilterInit>:
{
 8003ba8:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_filter == NULL)
 8003baa:	4604      	mov	r4, r0
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d069      	beq.n	8003c84 <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8003bb0:	6802      	ldr	r2, [r0, #0]
 8003bb2:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <HAL_DFSDM_FilterInit+0xe0>)
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d105      	bne.n	8003bc4 <HAL_DFSDM_FilterInit+0x1c>
 8003bb8:	6840      	ldr	r0, [r0, #4]
 8003bba:	2801      	cmp	r0, #1
 8003bbc:	d061      	beq.n	8003c82 <HAL_DFSDM_FilterInit+0xda>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8003bbe:	68e0      	ldr	r0, [r4, #12]
 8003bc0:	2801      	cmp	r0, #1
 8003bc2:	d05e      	beq.n	8003c82 <HAL_DFSDM_FilterInit+0xda>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003bc4:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003bc6:	2201      	movs	r2, #1
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003bc8:	4620      	mov	r0, r4
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003bca:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003bcc:	6523      	str	r3, [r4, #80]	; 0x50
  hdfsdm_filter->InjConvRemaining    = 1;
 8003bce:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003bd2:	f7ff ffe7 	bl	8003ba4 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003bde:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003be0:	7a22      	ldrb	r2, [r4, #8]
 8003be2:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	bf0c      	ite	eq
 8003be8:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003bec:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8003bf0:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003bf2:	7a62      	ldrb	r2, [r4, #9]
 8003bf4:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	bf0c      	ite	eq
 8003bfa:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003bfe:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8003c02:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003c04:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003c06:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003c08:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003c0c:	2d02      	cmp	r5, #2
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003c0e:	f022 0208 	bic.w	r2, r2, #8
 8003c12:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003c14:	d103      	bne.n	8003c1e <HAL_DFSDM_FilterInit+0x76>
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	6961      	ldr	r1, [r4, #20]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003c1e:	7c20      	ldrb	r0, [r4, #16]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003c20:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003c22:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003c24:	bf0c      	ite	eq
 8003c26:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003c2a:	f022 0210 	bicne.w	r2, r2, #16
 8003c2e:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003c30:	7c62      	ldrb	r2, [r4, #17]
 8003c32:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	bf0c      	ite	eq
 8003c38:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003c3c:	f022 0220 	bicne.w	r2, r2, #32
 8003c40:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 8003c48:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8003c4c:	615a      	str	r2, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8003c4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003c50:	6959      	ldr	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8003c52:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003c54:	430a      	orrs	r2, r1
 8003c56:	69e1      	ldr	r1, [r4, #28]
 8003c58:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8003c5a:	6a21      	ldr	r1, [r4, #32]
 8003c5c:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003c5e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003c62:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003c64:	6862      	ldr	r2, [r4, #4]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003c66:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8003c6a:	2000      	movs	r0, #0
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003c6c:	e9c4 250d 	strd	r2, r5, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003c70:	69a2      	ldr	r2, [r4, #24]
 8003c72:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8003c82:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c84:	2001      	movs	r0, #1
 8003c86:	e7fc      	b.n	8003c82 <HAL_DFSDM_FilterInit+0xda>
 8003c88:	40017500 	.word	0x40017500

08003c8c <HAL_DFSDM_FilterMspDeInit>:
 8003c8c:	4770      	bx	lr

08003c8e <HAL_DFSDM_FilterDeInit>:
{
 8003c8e:	b510      	push	{r4, lr}
  if(hdfsdm_filter == NULL)
 8003c90:	4604      	mov	r4, r0
 8003c92:	b150      	cbz	r0, 8003caa <HAL_DFSDM_FilterDeInit+0x1c>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8003c94:	6802      	ldr	r2, [r0, #0]
 8003c96:	6813      	ldr	r3, [r2, #0]
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	6013      	str	r3, [r2, #0]
  HAL_DFSDM_FilterMspDeInit(hdfsdm_filter);
 8003c9e:	f7ff fff5 	bl	8003c8c <HAL_DFSDM_FilterMspDeInit>
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_RESET;
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
}
 8003ca8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003caa:	2001      	movs	r0, #1
 8003cac:	e7fc      	b.n	8003ca8 <HAL_DFSDM_FilterDeInit+0x1a>

08003cae <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8003cae:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2bfd      	cmp	r3, #253	; 0xfd
{
 8003cb8:	b510      	push	{r4, lr}
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8003cba:	d813      	bhi.n	8003ce4 <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003cbc:	6803      	ldr	r3, [r0, #0]
 8003cbe:	0209      	lsls	r1, r1, #8
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003cc0:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003cc2:	681c      	ldr	r4, [r3, #0]
 8003cc4:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003cc8:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003ccc:	bf08      	it	eq
 8003cce:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003cd2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003cd6:	601c      	str	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003cd8:	681c      	ldr	r4, [r3, #0]
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003cda:	4321      	orrs	r1, r4
 8003cdc:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003cde:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	2000      	movs	r0, #0
}
 8003ce2:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	e7fc      	b.n	8003ce2 <HAL_DFSDM_FilterConfigRegChannel+0x34>

08003ce8 <HAL_DFSDM_FilterRegularStart_DMA>:
{
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	4613      	mov	r3, r2
 8003cec:	4605      	mov	r5, r0
  if((pData == NULL) || (Length == 0))
 8003cee:	460a      	mov	r2, r1
 8003cf0:	b361      	cbz	r1, 8003d4c <HAL_DFSDM_FilterRegularStart_DMA+0x64>
 8003cf2:	b35b      	cbz	r3, 8003d4c <HAL_DFSDM_FilterRegularStart_DMA+0x64>
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003cf4:	6807      	ldr	r7, [r0, #0]
 8003cf6:	6839      	ldr	r1, [r7, #0]
 8003cf8:	0289      	lsls	r1, r1, #10
 8003cfa:	d527      	bpl.n	8003d4c <HAL_DFSDM_FilterRegularStart_DMA+0x64>
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003cfc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003cfe:	b951      	cbnz	r1, 8003d16 <HAL_DFSDM_FilterRegularStart_DMA+0x2e>
 8003d00:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003d02:	b941      	cbnz	r1, 8003d16 <HAL_DFSDM_FilterRegularStart_DMA+0x2e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003d04:	6a81      	ldr	r1, [r0, #40]	; 0x28
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003d06:	69c8      	ldr	r0, [r1, #28]
 8003d08:	b908      	cbnz	r0, 8003d0e <HAL_DFSDM_FilterRegularStart_DMA+0x26>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d11e      	bne.n	8003d4c <HAL_DFSDM_FilterRegularStart_DMA+0x64>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003d0e:	69c9      	ldr	r1, [r1, #28]
 8003d10:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003d14:	d01a      	beq.n	8003d4c <HAL_DFSDM_FilterRegularStart_DMA+0x64>
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003d16:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 8003d1a:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 8003d1e:	2e01      	cmp	r6, #1
 8003d20:	d114      	bne.n	8003d4c <HAL_DFSDM_FilterRegularStart_DMA+0x64>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003d22:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8003d24:	490d      	ldr	r1, [pc, #52]	; (8003d5c <HAL_DFSDM_FilterRegularStart_DMA+0x74>)
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003d26:	4c0e      	ldr	r4, [pc, #56]	; (8003d60 <HAL_DFSDM_FilterRegularStart_DMA+0x78>)
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003d28:	63c1      	str	r1, [r0, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003d2a:	490e      	ldr	r1, [pc, #56]	; (8003d64 <HAL_DFSDM_FilterRegularStart_DMA+0x7c>)
 8003d2c:	64c1      	str	r1, [r0, #76]	; 0x4c
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003d2e:	69c1      	ldr	r1, [r0, #28]
 8003d30:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003d34:	f107 011c 	add.w	r1, r7, #28
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003d38:	bf18      	it	ne
 8003d3a:	2400      	movne	r4, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003d3c:	6404      	str	r4, [r0, #64]	; 0x40
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003d3e:	f000 f8fb 	bl	8003f38 <HAL_DMA_Start_IT>
 8003d42:	4604      	mov	r4, r0
 8003d44:	b120      	cbz	r0, 8003d50 <HAL_DFSDM_FilterRegularStart_DMA+0x68>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003d46:	23ff      	movs	r3, #255	; 0xff
 8003d48:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    status = HAL_ERROR;
 8003d4c:	2401      	movs	r4, #1
 8003d4e:	e002      	b.n	8003d56 <HAL_DFSDM_FilterRegularStart_DMA+0x6e>
      DFSDM_RegConvStart(hdfsdm_filter);
 8003d50:	4628      	mov	r0, r5
 8003d52:	f7ff fe03 	bl	800395c <DFSDM_RegConvStart>
}
 8003d56:	4620      	mov	r0, r4
 8003d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	08003d97 	.word	0x08003d97
 8003d60:	08003da1 	.word	0x08003da1
 8003d64:	08003dad 	.word	0x08003dad

08003d68 <HAL_DFSDM_FilterRegularStop_DMA>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8003d68:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8003d6c:	2b02      	cmp	r3, #2
{
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	4604      	mov	r4, r0
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8003d72:	d001      	beq.n	8003d78 <HAL_DFSDM_FilterRegularStop_DMA+0x10>
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d107      	bne.n	8003d88 <HAL_DFSDM_FilterRegularStop_DMA+0x20>
    if(HAL_DMA_Abort(hdfsdm_filter->hdmaReg) != HAL_OK)
 8003d78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003d7a:	f000 f91a 	bl	8003fb2 <HAL_DMA_Abort>
 8003d7e:	4601      	mov	r1, r0
 8003d80:	b120      	cbz	r0, 8003d8c <HAL_DFSDM_FilterRegularStop_DMA+0x24>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003d82:	23ff      	movs	r3, #255	; 0xff
 8003d84:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    status = HAL_ERROR;
 8003d88:	2101      	movs	r1, #1
 8003d8a:	e002      	b.n	8003d92 <HAL_DFSDM_FilterRegularStop_DMA+0x2a>
      DFSDM_RegConvStop(hdfsdm_filter);
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f7ff fe11 	bl	80039b4 <DFSDM_RegConvStop>
}
 8003d92:	4608      	mov	r0, r1
 8003d94:	bd10      	pop	{r4, pc}

08003d96 <DFSDM_DMARegularConvCplt>:
{
 8003d96:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003d98:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003d9a:	f7fe f9ff 	bl	800219c <HAL_DFSDM_FilterRegConvCpltCallback>
}
 8003d9e:	bd08      	pop	{r3, pc}

08003da0 <DFSDM_DMARegularHalfConvCplt>:
{
 8003da0:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003da2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003da4:	f7fe fa42 	bl	800222c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
}
 8003da8:	bd08      	pop	{r3, pc}

08003daa <HAL_DFSDM_FilterErrorCallback>:
 8003daa:	4770      	bx	lr

08003dac <DFSDM_DMAError>:
{
 8003dac:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8003dae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003db0:	2303      	movs	r3, #3
 8003db2:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003db4:	f7ff fff9 	bl	8003daa <HAL_DFSDM_FilterErrorCallback>
}
 8003db8:	bd08      	pop	{r3, pc}
	...

08003dbc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dbc:	6803      	ldr	r3, [r0, #0]
 8003dbe:	2118      	movs	r1, #24
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dc6:	3a10      	subs	r2, #16
 8003dc8:	f023 0303 	bic.w	r3, r3, #3
 8003dcc:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dd0:	4904      	ldr	r1, [pc, #16]	; (8003de4 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8003dd2:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dd4:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dd6:	bf88      	it	hi
 8003dd8:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dda:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ddc:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8003dde:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	0800757c 	.word	0x0800757c

08003de8 <HAL_DMA_Init>:
{
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7ff fd22 	bl	8003834 <HAL_GetTick>
 8003df0:	4605      	mov	r5, r0
  if(hdma == NULL)
 8003df2:	2c00      	cmp	r4, #0
 8003df4:	d071      	beq.n	8003eda <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8003df6:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8003df8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8003dfa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dfe:	2302      	movs	r3, #2
 8003e00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003e04:	6813      	ldr	r3, [r2, #0]
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e0c:	6821      	ldr	r1, [r4, #0]
 8003e0e:	680b      	ldr	r3, [r1, #0]
 8003e10:	07d8      	lsls	r0, r3, #31
 8003e12:	d43c      	bmi.n	8003e8e <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8003e14:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e16:	4d32      	ldr	r5, [pc, #200]	; (8003ee0 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e18:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e1a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e1c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	68e2      	ldr	r2, [r4, #12]
 8003e24:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e26:	6922      	ldr	r2, [r4, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	6962      	ldr	r2, [r4, #20]
 8003e2c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2e:	69e2      	ldr	r2, [r4, #28]
 8003e30:	4303      	orrs	r3, r0
 8003e32:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e34:	6a22      	ldr	r2, [r4, #32]
 8003e36:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e38:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e3a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e3c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e40:	bf02      	ittt	eq
 8003e42:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8003e46:	4335      	orreq	r5, r6
 8003e48:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e4a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8003e4c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8003e4e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e50:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003e54:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e58:	d10b      	bne.n	8003e72 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8003e5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e5c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8003e5e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e60:	b13d      	cbz	r5, 8003e72 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e62:	b9f8      	cbnz	r0, 8003ea4 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8003e64:	2a01      	cmp	r2, #1
 8003e66:	d02d      	beq.n	8003ec4 <HAL_DMA_Init+0xdc>
 8003e68:	d301      	bcc.n	8003e6e <HAL_DMA_Init+0x86>
 8003e6a:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e6c:	d101      	bne.n	8003e72 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e6e:	01ea      	lsls	r2, r5, #7
 8003e70:	d42b      	bmi.n	8003eca <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8003e72:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff ffa1 	bl	8003dbc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003e7c:	233f      	movs	r3, #63	; 0x3f
 8003e7e:	4093      	lsls	r3, r2
 8003e80:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e82:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003e84:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e86:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003e88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003e8c:	e009      	b.n	8003ea2 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e8e:	f7ff fcd1 	bl	8003834 <HAL_GetTick>
 8003e92:	1b40      	subs	r0, r0, r5
 8003e94:	2805      	cmp	r0, #5
 8003e96:	d9b9      	bls.n	8003e0c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e98:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e9a:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e9c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003e9e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ea4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003ea8:	d113      	bne.n	8003ed2 <HAL_DMA_Init+0xea>
    switch (tmp)
 8003eaa:	2a03      	cmp	r2, #3
 8003eac:	d8e1      	bhi.n	8003e72 <HAL_DMA_Init+0x8a>
 8003eae:	a001      	add	r0, pc, #4	; (adr r0, 8003eb4 <HAL_DMA_Init+0xcc>)
 8003eb0:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8003eb4:	08003ecb 	.word	0x08003ecb
 8003eb8:	08003e6f 	.word	0x08003e6f
 8003ebc:	08003ecb 	.word	0x08003ecb
 8003ec0:	08003ec5 	.word	0x08003ec5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ec4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003ec8:	d1d3      	bne.n	8003e72 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003eca:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8003ecc:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ece:	6563      	str	r3, [r4, #84]	; 0x54
 8003ed0:	e7e5      	b.n	8003e9e <HAL_DMA_Init+0xb6>
    switch (tmp)
 8003ed2:	2a02      	cmp	r2, #2
 8003ed4:	d9f9      	bls.n	8003eca <HAL_DMA_Init+0xe2>
 8003ed6:	2a03      	cmp	r2, #3
 8003ed8:	e7c8      	b.n	8003e6c <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8003eda:	2001      	movs	r0, #1
 8003edc:	e7e1      	b.n	8003ea2 <HAL_DMA_Init+0xba>
 8003ede:	bf00      	nop
 8003ee0:	e010803f 	.word	0xe010803f

08003ee4 <HAL_DMA_DeInit>:
{
 8003ee4:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8003ee6:	4605      	mov	r5, r0
 8003ee8:	b320      	cbz	r0, 8003f34 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003eea:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003eee:	b2e4      	uxtb	r4, r4
 8003ef0:	2c02      	cmp	r4, #2
 8003ef2:	d01d      	beq.n	8003f30 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8003ef4:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8003ef6:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	f022 0201 	bic.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003f00:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8003f02:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8003f04:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8003f06:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8003f08:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8003f0a:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003f0c:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f0e:	f7ff ff55 	bl	8003dbc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f12:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003f14:	233f      	movs	r3, #63	; 0x3f
 8003f16:	4093      	lsls	r3, r2
 8003f18:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f1a:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8003f1c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8003f20:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8003f24:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8003f28:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8003f2c:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
    return HAL_BUSY;
 8003f30:	4620      	mov	r0, r4
 8003f32:	e000      	b.n	8003f36 <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 8003f34:	2001      	movs	r0, #1
}
 8003f36:	bd38      	pop	{r3, r4, r5, pc}

08003f38 <HAL_DMA_Start_IT>:
{
 8003f38:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8003f3a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8003f3e:	2c01      	cmp	r4, #1
 8003f40:	d035      	beq.n	8003fae <HAL_DMA_Start_IT+0x76>
 8003f42:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f44:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8003f46:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8003f48:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f4c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003f50:	2c01      	cmp	r4, #1
 8003f52:	f04f 0402 	mov.w	r4, #2
 8003f56:	d128      	bne.n	8003faa <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f58:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f5c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f5e:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f60:	6825      	ldr	r5, [r4, #0]
 8003f62:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8003f66:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8003f68:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f6a:	6883      	ldr	r3, [r0, #8]
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d119      	bne.n	8003fa4 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8003f70:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003f72:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f74:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003f76:	233f      	movs	r3, #63	; 0x3f
 8003f78:	4093      	lsls	r3, r2
 8003f7a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	f043 0316 	orr.w	r3, r3, #22
 8003f82:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003f84:	6963      	ldr	r3, [r4, #20]
 8003f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8003f8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f8e:	b11b      	cbz	r3, 8003f98 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	f043 0308 	orr.w	r3, r3, #8
 8003f96:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003f98:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	6023      	str	r3, [r4, #0]
}
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8003fa4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fa6:	60e2      	str	r2, [r4, #12]
 8003fa8:	e7e4      	b.n	8003f74 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8003faa:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8003fae:	2002      	movs	r0, #2
 8003fb0:	e7f7      	b.n	8003fa2 <HAL_DMA_Start_IT+0x6a>

08003fb2 <HAL_DMA_Abort>:
{
 8003fb2:	b570      	push	{r4, r5, r6, lr}
 8003fb4:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fb6:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8003fb8:	f7ff fc3c 	bl	8003834 <HAL_GetTick>
 8003fbc:	4606      	mov	r6, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fbe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d006      	beq.n	8003fd4 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc6:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 8003fc8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fca:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003fd2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	f022 0216 	bic.w	r2, r2, #22
 8003fdc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe4:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fe6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003fe8:	b90a      	cbnz	r2, 8003fee <HAL_DMA_Abort+0x3c>
 8003fea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003fec:	b11a      	cbz	r2, 8003ff6 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	f022 0208 	bic.w	r2, r2, #8
 8003ff4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	f010 0001 	ands.w	r0, r0, #1
 8004006:	d109      	bne.n	800401c <HAL_DMA_Abort+0x6a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004008:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800400a:	233f      	movs	r3, #63	; 0x3f
 800400c:	4093      	lsls	r3, r2
 800400e:	60ab      	str	r3, [r5, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004010:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8004012:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004016:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800401a:	e7da      	b.n	8003fd2 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800401c:	f7ff fc0a 	bl	8003834 <HAL_GetTick>
 8004020:	1b80      	subs	r0, r0, r6
 8004022:	2805      	cmp	r0, #5
 8004024:	d9eb      	bls.n	8003ffe <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004026:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004028:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800402a:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800402c:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800402e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004032:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004036:	e7cc      	b.n	8003fd2 <HAL_DMA_Abort+0x20>

08004038 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8004038:	2300      	movs	r3, #0
{
 800403a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 800403c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800403e:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8004040:	4b5b      	ldr	r3, [pc, #364]	; (80041b0 <HAL_DMA_IRQHandler+0x178>)
{
 8004042:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004044:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8004046:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004048:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800404a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800404c:	409a      	lsls	r2, r3
 800404e:	4232      	tst	r2, r6
 8004050:	d00c      	beq.n	800406c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004052:	6801      	ldr	r1, [r0, #0]
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	0740      	lsls	r0, r0, #29
 8004058:	d508      	bpl.n	800406c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800405a:	6808      	ldr	r0, [r1, #0]
 800405c:	f020 0004 	bic.w	r0, r0, #4
 8004060:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004062:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004064:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800406c:	2201      	movs	r2, #1
 800406e:	409a      	lsls	r2, r3
 8004070:	4232      	tst	r2, r6
 8004072:	d008      	beq.n	8004086 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004074:	6821      	ldr	r1, [r4, #0]
 8004076:	6949      	ldr	r1, [r1, #20]
 8004078:	0609      	lsls	r1, r1, #24
 800407a:	d504      	bpl.n	8004086 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800407c:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800407e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004080:	f042 0202 	orr.w	r2, r2, #2
 8004084:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004086:	2204      	movs	r2, #4
 8004088:	409a      	lsls	r2, r3
 800408a:	4232      	tst	r2, r6
 800408c:	d008      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800408e:	6821      	ldr	r1, [r4, #0]
 8004090:	6809      	ldr	r1, [r1, #0]
 8004092:	0788      	lsls	r0, r1, #30
 8004094:	d504      	bpl.n	80040a0 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004096:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004098:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800409a:	f042 0204 	orr.w	r2, r2, #4
 800409e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040a0:	2210      	movs	r2, #16
 80040a2:	409a      	lsls	r2, r3
 80040a4:	4232      	tst	r2, r6
 80040a6:	d010      	beq.n	80040ca <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	0709      	lsls	r1, r1, #28
 80040ae:	d50c      	bpl.n	80040ca <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040b0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	0350      	lsls	r0, r2, #13
 80040b6:	d537      	bpl.n	8004128 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	0319      	lsls	r1, r3, #12
 80040bc:	d401      	bmi.n	80040c2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80040be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040c0:	e000      	b.n	80040c4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80040c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80040c4:	b10b      	cbz	r3, 80040ca <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80040c6:	4620      	mov	r0, r4
 80040c8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040ca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80040cc:	2220      	movs	r2, #32
 80040ce:	408a      	lsls	r2, r1
 80040d0:	4232      	tst	r2, r6
 80040d2:	d03a      	beq.n	800414a <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	06c6      	lsls	r6, r0, #27
 80040da:	d536      	bpl.n	800414a <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040dc:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040de:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80040e2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040e6:	d127      	bne.n	8004138 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e8:	f022 0216 	bic.w	r2, r2, #22
 80040ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040f4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040f8:	b90a      	cbnz	r2, 80040fe <HAL_DMA_IRQHandler+0xc6>
 80040fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80040fc:	b11a      	cbz	r2, 8004106 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	f022 0208 	bic.w	r2, r2, #8
 8004104:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004106:	233f      	movs	r3, #63	; 0x3f
 8004108:	408b      	lsls	r3, r1
 800410a:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 800410c:	2300      	movs	r3, #0
 800410e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8004112:	2301      	movs	r3, #1
 8004114:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8004118:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800411a:	2b00      	cmp	r3, #0
 800411c:	d045      	beq.n	80041aa <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800411e:	4620      	mov	r0, r4
}
 8004120:	b003      	add	sp, #12
 8004122:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8004126:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	05d2      	lsls	r2, r2, #23
 800412c:	d4c7      	bmi.n	80040be <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	f022 0208 	bic.w	r2, r2, #8
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e7c2      	b.n	80040be <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004138:	0350      	lsls	r0, r2, #13
 800413a:	d527      	bpl.n	800418c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	0319      	lsls	r1, r3, #12
 8004140:	d431      	bmi.n	80041a6 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8004142:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8004144:	b10b      	cbz	r3, 800414a <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8004146:	4620      	mov	r0, r4
 8004148:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800414a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800414c:	b36b      	cbz	r3, 80041aa <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800414e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004150:	07da      	lsls	r2, r3, #31
 8004152:	d519      	bpl.n	8004188 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004154:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8004156:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8004158:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800415c:	6813      	ldr	r3, [r2, #0]
 800415e:	f023 0301 	bic.w	r3, r3, #1
 8004162:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8004164:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004168:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800416c:	9b01      	ldr	r3, [sp, #4]
 800416e:	3301      	adds	r3, #1
 8004170:	42bb      	cmp	r3, r7
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	d802      	bhi.n	800417c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004176:	6813      	ldr	r3, [r2, #0]
 8004178:	07db      	lsls	r3, r3, #31
 800417a:	d4f7      	bmi.n	800416c <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 800417c:	2300      	movs	r3, #0
 800417e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004182:	2301      	movs	r3, #1
 8004184:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8004188:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800418a:	e7c6      	b.n	800411a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8004192:	d108      	bne.n	80041a6 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004194:	6819      	ldr	r1, [r3, #0]
 8004196:	f021 0110 	bic.w	r1, r1, #16
 800419a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800419c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800419e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80041a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80041a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041a8:	e7cc      	b.n	8004144 <HAL_DMA_IRQHandler+0x10c>
}
 80041aa:	b003      	add	sp, #12
 80041ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000014c 	.word	0x2000014c

080041b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041b8:	680b      	ldr	r3, [r1, #0]
{
 80041ba:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004380 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041c0:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80041c2:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041c4:	4a6c      	ldr	r2, [pc, #432]	; (8004378 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041c6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8004384 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80041ca:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ce:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80041d0:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041d4:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 80041d8:	45b4      	cmp	ip, r6
 80041da:	f040 80b3 	bne.w	8004344 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041de:	684c      	ldr	r4, [r1, #4]
 80041e0:	f024 0710 	bic.w	r7, r4, #16
 80041e4:	2f02      	cmp	r7, #2
 80041e6:	d116      	bne.n	8004216 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80041e8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041ec:	f003 0b07 	and.w	fp, r3, #7
 80041f0:	f04f 0e0f 	mov.w	lr, #15
 80041f4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80041f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80041fc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004200:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004204:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004208:	690d      	ldr	r5, [r1, #16]
 800420a:	fa05 f50b 	lsl.w	r5, r5, fp
 800420e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 8004212:	f8ca 5020 	str.w	r5, [sl, #32]
 8004216:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800421a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800421c:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004220:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004224:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004228:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800422a:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800422e:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004230:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004232:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004236:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 800423a:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800423e:	d811      	bhi.n	8004264 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8004240:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004242:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8004246:	68cf      	ldr	r7, [r1, #12]
 8004248:	fa07 fe0a 	lsl.w	lr, r7, sl
 800424c:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 8004250:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004252:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004254:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004258:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800425c:	409f      	lsls	r7, r3
 800425e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8004262:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8004264:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004266:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004268:	688f      	ldr	r7, [r1, #8]
 800426a:	fa07 f70a 	lsl.w	r7, r7, sl
 800426e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8004270:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004272:	00e5      	lsls	r5, r4, #3
 8004274:	d566      	bpl.n	8004344 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004276:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800427a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800427e:	f003 0c03 	and.w	ip, r3, #3
 8004282:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004286:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800428a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800428e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004292:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8004296:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800429a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800429e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80042a2:	9503      	str	r5, [sp, #12]
 80042a4:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042a6:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 80042aa:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80042ae:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80042b2:	4d32      	ldr	r5, [pc, #200]	; (800437c <HAL_GPIO_Init+0x1c8>)
 80042b4:	42a8      	cmp	r0, r5
 80042b6:	d04c      	beq.n	8004352 <HAL_GPIO_Init+0x19e>
 80042b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042bc:	42a8      	cmp	r0, r5
 80042be:	d04a      	beq.n	8004356 <HAL_GPIO_Init+0x1a2>
 80042c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042c4:	42a8      	cmp	r0, r5
 80042c6:	d048      	beq.n	800435a <HAL_GPIO_Init+0x1a6>
 80042c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042cc:	42a8      	cmp	r0, r5
 80042ce:	d046      	beq.n	800435e <HAL_GPIO_Init+0x1aa>
 80042d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042d4:	42a8      	cmp	r0, r5
 80042d6:	d044      	beq.n	8004362 <HAL_GPIO_Init+0x1ae>
 80042d8:	4548      	cmp	r0, r9
 80042da:	d044      	beq.n	8004366 <HAL_GPIO_Init+0x1b2>
 80042dc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80042e0:	42a8      	cmp	r0, r5
 80042e2:	d042      	beq.n	800436a <HAL_GPIO_Init+0x1b6>
 80042e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042e8:	42a8      	cmp	r0, r5
 80042ea:	d040      	beq.n	800436e <HAL_GPIO_Init+0x1ba>
 80042ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042f0:	42a8      	cmp	r0, r5
 80042f2:	d03e      	beq.n	8004372 <HAL_GPIO_Init+0x1be>
 80042f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042f8:	42a8      	cmp	r0, r5
 80042fa:	bf14      	ite	ne
 80042fc:	250a      	movne	r5, #10
 80042fe:	2509      	moveq	r5, #9
 8004300:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004304:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004308:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800430c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 800430e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8004312:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004314:	bf0c      	ite	eq
 8004316:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004318:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800431a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 800431e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8004320:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004322:	bf0c      	ite	eq
 8004324:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004326:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004328:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 800432c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800432e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004330:	bf0c      	ite	eq
 8004332:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004334:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004336:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8004338:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800433a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800433c:	bf54      	ite	pl
 800433e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8004340:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8004342:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004344:	3301      	adds	r3, #1
 8004346:	2b10      	cmp	r3, #16
 8004348:	f47f af3f 	bne.w	80041ca <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800434c:	b005      	add	sp, #20
 800434e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004352:	2500      	movs	r5, #0
 8004354:	e7d4      	b.n	8004300 <HAL_GPIO_Init+0x14c>
 8004356:	2501      	movs	r5, #1
 8004358:	e7d2      	b.n	8004300 <HAL_GPIO_Init+0x14c>
 800435a:	2502      	movs	r5, #2
 800435c:	e7d0      	b.n	8004300 <HAL_GPIO_Init+0x14c>
 800435e:	2503      	movs	r5, #3
 8004360:	e7ce      	b.n	8004300 <HAL_GPIO_Init+0x14c>
 8004362:	2504      	movs	r5, #4
 8004364:	e7cc      	b.n	8004300 <HAL_GPIO_Init+0x14c>
 8004366:	2505      	movs	r5, #5
 8004368:	e7ca      	b.n	8004300 <HAL_GPIO_Init+0x14c>
 800436a:	2506      	movs	r5, #6
 800436c:	e7c8      	b.n	8004300 <HAL_GPIO_Init+0x14c>
 800436e:	2507      	movs	r5, #7
 8004370:	e7c6      	b.n	8004300 <HAL_GPIO_Init+0x14c>
 8004372:	2508      	movs	r5, #8
 8004374:	e7c4      	b.n	8004300 <HAL_GPIO_Init+0x14c>
 8004376:	bf00      	nop
 8004378:	40013c00 	.word	0x40013c00
 800437c:	40020000 	.word	0x40020000
 8004380:	40023800 	.word	0x40023800
 8004384:	40021400 	.word	0x40021400

08004388 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800438c:	2400      	movs	r4, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800438e:	4e4c      	ldr	r6, [pc, #304]	; (80044c0 <HAL_GPIO_DeInit+0x138>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004390:	f8df a134 	ldr.w	sl, [pc, #308]	; 80044c8 <HAL_GPIO_DeInit+0x140>
 8004394:	f8df b134 	ldr.w	fp, [pc, #308]	; 80044cc <HAL_GPIO_DeInit+0x144>
    ioposition = ((uint32_t)0x01) << position;
 8004398:	f04f 0901 	mov.w	r9, #1
 800439c:	fa09 f204 	lsl.w	r2, r9, r4
    if(iocurrent == ioposition)
 80043a0:	ea32 0301 	bics.w	r3, r2, r1
 80043a4:	d174      	bne.n	8004490 <HAL_GPIO_DeInit+0x108>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80043a6:	2303      	movs	r3, #3
 80043a8:	fa04 f509 	lsl.w	r5, r4, r9
 80043ac:	6807      	ldr	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80043ae:	f004 0c07 	and.w	ip, r4, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80043b2:	fa03 f505 	lsl.w	r5, r3, r5
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80043b6:	fa24 fe03 	lsr.w	lr, r4, r3
 80043ba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043be:	43d2      	mvns	r2, r2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80043c0:	43ed      	mvns	r5, r5
 80043c2:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80043c6:	402f      	ands	r7, r5
 80043c8:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80043ca:	270f      	movs	r7, #15
 80043cc:	f8de 8020 	ldr.w	r8, [lr, #32]
 80043d0:	fa07 fc0c 	lsl.w	ip, r7, ip
 80043d4:	ea28 0c0c 	bic.w	ip, r8, ip
 80043d8:	f8ce c020 	str.w	ip, [lr, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80043dc:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80043e0:	ea05 0c0c 	and.w	ip, r5, ip
 80043e4:	f8c0 c008 	str.w	ip, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043e8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 80043ec:	ea02 0c0c 	and.w	ip, r2, ip
 80043f0:	f8c0 c004 	str.w	ip, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80043f4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80043f8:	ea05 050c 	and.w	r5, r5, ip
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043fc:	ea04 0c03 	and.w	ip, r4, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004400:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <HAL_GPIO_DeInit+0x13c>)
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004402:	60c5      	str	r5, [r0, #12]
 8004404:	f024 0503 	bic.w	r5, r4, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004408:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800440c:	4298      	cmp	r0, r3
 800440e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004412:	fa07 f70c 	lsl.w	r7, r7, ip
 8004416:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp = SYSCFG->EXTICR[position >> 2];
 800441a:	f8d5 e008 	ldr.w	lr, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800441e:	ea07 0e0e 	and.w	lr, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004422:	d03a      	beq.n	800449a <HAL_GPIO_DeInit+0x112>
 8004424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004428:	4298      	cmp	r0, r3
 800442a:	d038      	beq.n	800449e <HAL_GPIO_DeInit+0x116>
 800442c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004430:	4298      	cmp	r0, r3
 8004432:	d036      	beq.n	80044a2 <HAL_GPIO_DeInit+0x11a>
 8004434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004438:	4298      	cmp	r0, r3
 800443a:	d034      	beq.n	80044a6 <HAL_GPIO_DeInit+0x11e>
 800443c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004440:	4298      	cmp	r0, r3
 8004442:	d032      	beq.n	80044aa <HAL_GPIO_DeInit+0x122>
 8004444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004448:	4298      	cmp	r0, r3
 800444a:	d030      	beq.n	80044ae <HAL_GPIO_DeInit+0x126>
 800444c:	4550      	cmp	r0, sl
 800444e:	d030      	beq.n	80044b2 <HAL_GPIO_DeInit+0x12a>
 8004450:	4558      	cmp	r0, fp
 8004452:	d030      	beq.n	80044b6 <HAL_GPIO_DeInit+0x12e>
 8004454:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004458:	4298      	cmp	r0, r3
 800445a:	d02e      	beq.n	80044ba <HAL_GPIO_DeInit+0x132>
 800445c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004460:	4298      	cmp	r0, r3
 8004462:	bf0c      	ite	eq
 8004464:	2309      	moveq	r3, #9
 8004466:	230a      	movne	r3, #10
 8004468:	fa03 f30c 	lsl.w	r3, r3, ip
 800446c:	4573      	cmp	r3, lr
 800446e:	d10f      	bne.n	8004490 <HAL_GPIO_DeInit+0x108>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004470:	68ab      	ldr	r3, [r5, #8]
 8004472:	ea23 0707 	bic.w	r7, r3, r7
 8004476:	60af      	str	r7, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004478:	6833      	ldr	r3, [r6, #0]
 800447a:	4013      	ands	r3, r2
 800447c:	6033      	str	r3, [r6, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800447e:	6873      	ldr	r3, [r6, #4]
 8004480:	4013      	ands	r3, r2
 8004482:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004484:	68b3      	ldr	r3, [r6, #8]
 8004486:	4013      	ands	r3, r2
 8004488:	60b3      	str	r3, [r6, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800448a:	68f3      	ldr	r3, [r6, #12]
 800448c:	401a      	ands	r2, r3
 800448e:	60f2      	str	r2, [r6, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004490:	3401      	adds	r4, #1
 8004492:	2c10      	cmp	r4, #16
 8004494:	d180      	bne.n	8004398 <HAL_GPIO_DeInit+0x10>
	  }
    }
  }
}
 8004496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800449a:	2300      	movs	r3, #0
 800449c:	e7e4      	b.n	8004468 <HAL_GPIO_DeInit+0xe0>
 800449e:	464b      	mov	r3, r9
 80044a0:	e7e2      	b.n	8004468 <HAL_GPIO_DeInit+0xe0>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e7e0      	b.n	8004468 <HAL_GPIO_DeInit+0xe0>
 80044a6:	2303      	movs	r3, #3
 80044a8:	e7de      	b.n	8004468 <HAL_GPIO_DeInit+0xe0>
 80044aa:	2304      	movs	r3, #4
 80044ac:	e7dc      	b.n	8004468 <HAL_GPIO_DeInit+0xe0>
 80044ae:	2305      	movs	r3, #5
 80044b0:	e7da      	b.n	8004468 <HAL_GPIO_DeInit+0xe0>
 80044b2:	2306      	movs	r3, #6
 80044b4:	e7d8      	b.n	8004468 <HAL_GPIO_DeInit+0xe0>
 80044b6:	2307      	movs	r3, #7
 80044b8:	e7d6      	b.n	8004468 <HAL_GPIO_DeInit+0xe0>
 80044ba:	2308      	movs	r3, #8
 80044bc:	e7d4      	b.n	8004468 <HAL_GPIO_DeInit+0xe0>
 80044be:	bf00      	nop
 80044c0:	40013c00 	.word	0x40013c00
 80044c4:	40020000 	.word	0x40020000
 80044c8:	40021800 	.word	0x40021800
 80044cc:	40021c00 	.word	0x40021c00

080044d0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044d0:	6803      	ldr	r3, [r0, #0]
 80044d2:	699a      	ldr	r2, [r3, #24]
 80044d4:	0791      	lsls	r1, r2, #30
 80044d6:	d501      	bpl.n	80044dc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044d8:	2200      	movs	r2, #0
 80044da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044dc:	699a      	ldr	r2, [r3, #24]
 80044de:	07d2      	lsls	r2, r2, #31
 80044e0:	d403      	bmi.n	80044ea <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	619a      	str	r2, [r3, #24]
  }
}
 80044ea:	4770      	bx	lr

080044ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80044ec:	b530      	push	{r4, r5, lr}
 80044ee:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80044f0:	6804      	ldr	r4, [r0, #0]
 80044f2:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 80044f6:	6860      	ldr	r0, [r4, #4]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f3c1 0209 	ubfx	r2, r1, #0, #10
 80044fe:	431a      	orrs	r2, r3
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <I2C_TransferConfig+0x24>)
 8004502:	ea43 5355 	orr.w	r3, r3, r5, lsr #21
 8004506:	ea20 0003 	bic.w	r0, r0, r3
 800450a:	4302      	orrs	r2, r0
 800450c:	6062      	str	r2, [r4, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800450e:	bd30      	pop	{r4, r5, pc}
 8004510:	03ff63ff 	.word	0x03ff63ff

08004514 <I2C_WaitOnFlagUntilTimeout>:
{
 8004514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004518:	9f06      	ldr	r7, [sp, #24]
 800451a:	4604      	mov	r4, r0
 800451c:	4688      	mov	r8, r1
 800451e:	4616      	mov	r6, r2
 8004520:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004522:	6822      	ldr	r2, [r4, #0]
 8004524:	6993      	ldr	r3, [r2, #24]
 8004526:	ea38 0303 	bics.w	r3, r8, r3
 800452a:	bf0c      	ite	eq
 800452c:	2301      	moveq	r3, #1
 800452e:	2300      	movne	r3, #0
 8004530:	42b3      	cmp	r3, r6
 8004532:	d001      	beq.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8004534:	2000      	movs	r0, #0
 8004536:	e00b      	b.n	8004550 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if (Timeout != HAL_MAX_DELAY)
 8004538:	1c6b      	adds	r3, r5, #1
 800453a:	d0f3      	beq.n	8004524 <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800453c:	b955      	cbnz	r5, 8004554 <I2C_WaitOnFlagUntilTimeout+0x40>
        hi2c->State = HAL_I2C_STATE_READY;
 800453e:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8004540:	2003      	movs	r0, #3
        hi2c->State = HAL_I2C_STATE_READY;
 8004542:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004546:	2300      	movs	r3, #0
 8004548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800454c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8004550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004554:	f7ff f96e 	bl	8003834 <HAL_GetTick>
 8004558:	1bc0      	subs	r0, r0, r7
 800455a:	42a8      	cmp	r0, r5
 800455c:	d9e1      	bls.n	8004522 <I2C_WaitOnFlagUntilTimeout+0xe>
 800455e:	e7ee      	b.n	800453e <I2C_WaitOnFlagUntilTimeout+0x2a>

08004560 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004560:	6803      	ldr	r3, [r0, #0]
{
 8004562:	b570      	push	{r4, r5, r6, lr}
 8004564:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004566:	6998      	ldr	r0, [r3, #24]
{
 8004568:	460d      	mov	r5, r1
 800456a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800456c:	f010 0010 	ands.w	r0, r0, #16
 8004570:	d112      	bne.n	8004598 <I2C_IsAcknowledgeFailed+0x38>
}
 8004572:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8004574:	1c69      	adds	r1, r5, #1
 8004576:	d010      	beq.n	800459a <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004578:	b125      	cbz	r5, 8004584 <I2C_IsAcknowledgeFailed+0x24>
 800457a:	f7ff f95b 	bl	8003834 <HAL_GetTick>
 800457e:	1b80      	subs	r0, r0, r6
 8004580:	4285      	cmp	r5, r0
 8004582:	d209      	bcs.n	8004598 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State = HAL_I2C_STATE_READY;
 8004584:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8004586:	2003      	movs	r0, #3
          hi2c->State = HAL_I2C_STATE_READY;
 8004588:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800458c:	2300      	movs	r3, #0
 800458e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8004592:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004596:	e7ec      	b.n	8004572 <I2C_IsAcknowledgeFailed+0x12>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	6999      	ldr	r1, [r3, #24]
 800459c:	068a      	lsls	r2, r1, #26
 800459e:	d5e9      	bpl.n	8004574 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a0:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a2:	2520      	movs	r5, #32
    I2C_Flush_TXDR(hi2c);
 80045a4:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a6:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80045aa:	f7ff ff91 	bl	80044d0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80045ae:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 80045b0:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80045b2:	6853      	ldr	r3, [r2, #4]
 80045b4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80045b8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80045bc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80045c6:	2304      	movs	r3, #4
 80045c8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ca:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80045cc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80045d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045d8:	e7cb      	b.n	8004572 <I2C_IsAcknowledgeFailed+0x12>

080045da <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80045da:	b570      	push	{r4, r5, r6, lr}
 80045dc:	4604      	mov	r4, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	079b      	lsls	r3, r3, #30
 80045e8:	d501      	bpl.n	80045ee <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80045ea:	2000      	movs	r0, #0
 80045ec:	e015      	b.n	800461a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ee:	4632      	mov	r2, r6
 80045f0:	4629      	mov	r1, r5
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7ff ffb4 	bl	8004560 <I2C_IsAcknowledgeFailed>
 80045f8:	b9b0      	cbnz	r0, 8004628 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80045fa:	1c6a      	adds	r2, r5, #1
 80045fc:	d0f1      	beq.n	80045e2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045fe:	b96d      	cbnz	r5, 800461c <I2C_WaitOnTXISFlagUntilTimeout+0x42>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004600:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004602:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004604:	f043 0320 	orr.w	r3, r3, #32
 8004608:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800460a:	2320      	movs	r3, #32
 800460c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004610:	2300      	movs	r3, #0
 8004612:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004616:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800461a:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800461c:	f7ff f90a 	bl	8003834 <HAL_GetTick>
 8004620:	1b80      	subs	r0, r0, r6
 8004622:	42a8      	cmp	r0, r5
 8004624:	d9dd      	bls.n	80045e2 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8004626:	e7eb      	b.n	8004600 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8004628:	2001      	movs	r0, #1
 800462a:	e7f6      	b.n	800461a <I2C_WaitOnTXISFlagUntilTimeout+0x40>

0800462c <I2C_RequestMemoryWrite>:
{
 800462c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800462e:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004630:	4b18      	ldr	r3, [pc, #96]	; (8004694 <I2C_RequestMemoryWrite+0x68>)
{
 8004632:	4604      	mov	r4, r0
 8004634:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004636:	9300      	str	r3, [sp, #0]
{
 8004638:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800463a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800463e:	b2fa      	uxtb	r2, r7
 8004640:	f7ff ff54 	bl	80044ec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004644:	4632      	mov	r2, r6
 8004646:	9908      	ldr	r1, [sp, #32]
 8004648:	4620      	mov	r0, r4
 800464a:	f7ff ffc6 	bl	80045da <I2C_WaitOnTXISFlagUntilTimeout>
 800464e:	b128      	cbz	r0, 800465c <I2C_RequestMemoryWrite+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004650:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004652:	2b04      	cmp	r3, #4
 8004654:	d110      	bne.n	8004678 <I2C_RequestMemoryWrite+0x4c>
      return HAL_ERROR;
 8004656:	2001      	movs	r0, #1
}
 8004658:	b003      	add	sp, #12
 800465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800465c:	2f01      	cmp	r7, #1
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	d10c      	bne.n	800467c <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004662:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004664:	2200      	movs	r2, #0
 8004666:	2180      	movs	r1, #128	; 0x80
 8004668:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800466a:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800466c:	9b08      	ldr	r3, [sp, #32]
 800466e:	9600      	str	r6, [sp, #0]
 8004670:	f7ff ff50 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 8004674:	2800      	cmp	r0, #0
 8004676:	d0ef      	beq.n	8004658 <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 8004678:	2003      	movs	r0, #3
 800467a:	e7ed      	b.n	8004658 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800467c:	0a2a      	lsrs	r2, r5, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800467e:	9908      	ldr	r1, [sp, #32]
 8004680:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004682:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004684:	4632      	mov	r2, r6
 8004686:	f7ff ffa8 	bl	80045da <I2C_WaitOnTXISFlagUntilTimeout>
 800468a:	2800      	cmp	r0, #0
 800468c:	d1e0      	bne.n	8004650 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	e7e7      	b.n	8004662 <I2C_RequestMemoryWrite+0x36>
 8004692:	bf00      	nop
 8004694:	80002000 	.word	0x80002000

08004698 <I2C_RequestMemoryRead>:
{
 8004698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800469a:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800469c:	4b17      	ldr	r3, [pc, #92]	; (80046fc <I2C_RequestMemoryRead+0x64>)
{
 800469e:	4604      	mov	r4, r0
 80046a0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80046a2:	9300      	str	r3, [sp, #0]
{
 80046a4:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80046a6:	2300      	movs	r3, #0
 80046a8:	b2fa      	uxtb	r2, r7
 80046aa:	f7ff ff1f 	bl	80044ec <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ae:	4632      	mov	r2, r6
 80046b0:	9908      	ldr	r1, [sp, #32]
 80046b2:	4620      	mov	r0, r4
 80046b4:	f7ff ff91 	bl	80045da <I2C_WaitOnTXISFlagUntilTimeout>
 80046b8:	b128      	cbz	r0, 80046c6 <I2C_RequestMemoryRead+0x2e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d110      	bne.n	80046e2 <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 80046c0:	2001      	movs	r0, #1
}
 80046c2:	b003      	add	sp, #12
 80046c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046c6:	2f01      	cmp	r7, #1
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	d10c      	bne.n	80046e6 <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046cc:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80046ce:	2200      	movs	r2, #0
 80046d0:	2140      	movs	r1, #64	; 0x40
 80046d2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046d4:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80046d6:	9b08      	ldr	r3, [sp, #32]
 80046d8:	9600      	str	r6, [sp, #0]
 80046da:	f7ff ff1b 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 80046de:	2800      	cmp	r0, #0
 80046e0:	d0ef      	beq.n	80046c2 <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 80046e2:	2003      	movs	r0, #3
 80046e4:	e7ed      	b.n	80046c2 <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046e6:	0a2a      	lsrs	r2, r5, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e8:	9908      	ldr	r1, [sp, #32]
 80046ea:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ee:	4632      	mov	r2, r6
 80046f0:	f7ff ff73 	bl	80045da <I2C_WaitOnTXISFlagUntilTimeout>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d1e0      	bne.n	80046ba <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	e7e7      	b.n	80046cc <I2C_RequestMemoryRead+0x34>
 80046fc:	80002000 	.word	0x80002000

08004700 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	4604      	mov	r4, r0
 8004704:	460d      	mov	r5, r1
 8004706:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	069b      	lsls	r3, r3, #26
 800470e:	d501      	bpl.n	8004714 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004710:	2000      	movs	r0, #0
 8004712:	e013      	b.n	800473c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004714:	4632      	mov	r2, r6
 8004716:	4629      	mov	r1, r5
 8004718:	4620      	mov	r0, r4
 800471a:	f7ff ff21 	bl	8004560 <I2C_IsAcknowledgeFailed>
 800471e:	b9a0      	cbnz	r0, 800474a <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004720:	b96d      	cbnz	r5, 800473e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004722:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004724:	2003      	movs	r0, #3
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004726:	f043 0320 	orr.w	r3, r3, #32
 800472a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800472c:	2320      	movs	r3, #32
 800472e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004732:	2300      	movs	r3, #0
 8004734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004738:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800473c:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800473e:	f7ff f879 	bl	8003834 <HAL_GetTick>
 8004742:	1b80      	subs	r0, r0, r6
 8004744:	42a8      	cmp	r0, r5
 8004746:	d9df      	bls.n	8004708 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8004748:	e7eb      	b.n	8004722 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800474a:	2001      	movs	r0, #1
 800474c:	e7f6      	b.n	800473c <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

0800474e <HAL_I2C_MspInit>:
}
 800474e:	4770      	bx	lr

08004750 <HAL_I2C_Init>:
{
 8004750:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004752:	4604      	mov	r4, r0
 8004754:	2800      	cmp	r0, #0
 8004756:	d04a      	beq.n	80047ee <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004758:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800475c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004760:	b91b      	cbnz	r3, 800476a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004762:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004766:	f7ff fff2 	bl	800474e <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800476a:	2324      	movs	r3, #36	; 0x24
 800476c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	f022 0201 	bic.w	r2, r2, #1
 8004778:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800477a:	6862      	ldr	r2, [r4, #4]
 800477c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004780:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004788:	609a      	str	r2, [r3, #8]
 800478a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800478e:	2901      	cmp	r1, #1
 8004790:	d124      	bne.n	80047dc <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004796:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004798:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800479a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800479c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80047a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047a4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047ac:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80047ae:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	69a1      	ldr	r1, [r4, #24]
 80047b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80047ba:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047bc:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80047cc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ce:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047d4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80047da:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047dc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047e0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047e2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047e4:	d1d8      	bne.n	8004798 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ea:	605a      	str	r2, [r3, #4]
 80047ec:	e7d4      	b.n	8004798 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80047ee:	2001      	movs	r0, #1
 80047f0:	e7f3      	b.n	80047da <HAL_I2C_Init+0x8a>

080047f2 <HAL_I2C_MspDeInit>:
 80047f2:	4770      	bx	lr

080047f4 <HAL_I2C_DeInit>:
{
 80047f4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80047f6:	4604      	mov	r4, r0
 80047f8:	b198      	cbz	r0, 8004822 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80047fa:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80047fc:	2324      	movs	r3, #36	; 0x24
 80047fe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004802:	6813      	ldr	r3, [r2, #0]
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800480a:	f7ff fff2 	bl	80047f2 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800480e:	2000      	movs	r0, #0
 8004810:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8004812:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8004816:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800481a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800481c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004820:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004822:	2001      	movs	r0, #1
 8004824:	e7fc      	b.n	8004820 <HAL_I2C_DeInit+0x2c>

08004826 <HAL_I2C_Mem_Write>:
{
 8004826:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482a:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800482c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004830:	b085      	sub	sp, #20
 8004832:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004834:	2b20      	cmp	r3, #32
{
 8004836:	460f      	mov	r7, r1
 8004838:	9203      	str	r2, [sp, #12]
 800483a:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 800483e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004842:	f040 80a3 	bne.w	800498c <HAL_I2C_Mem_Write+0x166>
    if ((pData == NULL) || (Size == 0U))
 8004846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004848:	b91b      	cbnz	r3, 8004852 <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 800484a:	2001      	movs	r0, #1
}
 800484c:	b005      	add	sp, #20
 800484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 8004852:	f1ba 0f00 	cmp.w	sl, #0
 8004856:	d0f8      	beq.n	800484a <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 8004858:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800485c:	2b01      	cmp	r3, #1
 800485e:	f000 8095 	beq.w	800498c <HAL_I2C_Mem_Write+0x166>
 8004862:	2501      	movs	r5, #1
 8004864:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004868:	f7fe ffe4 	bl	8003834 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800486c:	2319      	movs	r3, #25
 800486e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004870:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004872:	462a      	mov	r2, r5
 8004874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004878:	4620      	mov	r0, r4
 800487a:	f7ff fe4b 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 800487e:	4680      	mov	r8, r0
 8004880:	b9c8      	cbnz	r0, 80048b6 <HAL_I2C_Mem_Write+0x90>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004882:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8004884:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004886:	9a03      	ldr	r2, [sp, #12]
 8004888:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800488a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800488e:	2340      	movs	r3, #64	; 0x40
 8004890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004894:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004896:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004898:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800489a:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800489c:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 800489e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048a2:	e9cd 9600 	strd	r9, r6, [sp]
 80048a6:	f7ff fec1 	bl	800462c <I2C_RequestMemoryWrite>
 80048aa:	b130      	cbz	r0, 80048ba <HAL_I2C_Mem_Write+0x94>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80048ae:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d0c9      	beq.n	800484a <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 80048b6:	2003      	movs	r0, #3
 80048b8:	e7c8      	b.n	800484c <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048bc:	2bff      	cmp	r3, #255	; 0xff
 80048be:	d910      	bls.n	80048e2 <HAL_I2C_Mem_Write+0xbc>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048c0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048c6:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048c8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048ca:	4639      	mov	r1, r7
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7ff fe0d 	bl	80044ec <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048d2:	4632      	mov	r2, r6
 80048d4:	4649      	mov	r1, r9
 80048d6:	4620      	mov	r0, r4
 80048d8:	f7ff fe7f 	bl	80045da <I2C_WaitOnTXISFlagUntilTimeout>
 80048dc:	b148      	cbz	r0, 80048f2 <HAL_I2C_Mem_Write+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80048e0:	e7e7      	b.n	80048b2 <HAL_I2C_Mem_Write+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 80048e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048e8:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80048ea:	b292      	uxth	r2, r2
 80048ec:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	e7eb      	b.n	80048ca <HAL_I2C_Mem_Write+0xa4>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80048f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	6262      	str	r2, [r4, #36]	; 0x24
 80048f8:	6822      	ldr	r2, [r4, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferSize--;
 80048fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004900:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004902:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004904:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004906:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004908:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800490a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800490c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800490e:	b9b2      	cbnz	r2, 800493e <HAL_I2C_Mem_Write+0x118>
 8004910:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	b19b      	cbz	r3, 800493e <HAL_I2C_Mem_Write+0x118>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004916:	9600      	str	r6, [sp, #0]
 8004918:	464b      	mov	r3, r9
 800491a:	2180      	movs	r1, #128	; 0x80
 800491c:	4620      	mov	r0, r4
 800491e:	f7ff fdf9 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 8004922:	2800      	cmp	r0, #0
 8004924:	d1c7      	bne.n	80048b6 <HAL_I2C_Mem_Write+0x90>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004926:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004928:	2bff      	cmp	r3, #255	; 0xff
 800492a:	d927      	bls.n	800497c <HAL_I2C_Mem_Write+0x156>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800492c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800492e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004932:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004934:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004936:	4639      	mov	r1, r7
 8004938:	4620      	mov	r0, r4
 800493a:	f7ff fdd7 	bl	80044ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800493e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1c5      	bne.n	80048d2 <HAL_I2C_Mem_Write+0xac>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004946:	4632      	mov	r2, r6
 8004948:	4649      	mov	r1, r9
 800494a:	4620      	mov	r0, r4
 800494c:	f7ff fed8 	bl	8004700 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004950:	2800      	cmp	r0, #0
 8004952:	d1c4      	bne.n	80048de <HAL_I2C_Mem_Write+0xb8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	2120      	movs	r1, #32
 8004958:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004960:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004964:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004968:	f022 0201 	bic.w	r2, r2, #1
 800496c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800496e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004972:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004976:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800497a:	e767      	b.n	800484c <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 800497c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800497e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004982:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004984:	b292      	uxth	r2, r2
 8004986:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	e7d4      	b.n	8004936 <HAL_I2C_Mem_Write+0x110>
    return HAL_BUSY;
 800498c:	2002      	movs	r0, #2
 800498e:	e75d      	b.n	800484c <HAL_I2C_Mem_Write+0x26>

08004990 <HAL_I2C_Mem_Read>:
{
 8004990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004994:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004996:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800499a:	b085      	sub	sp, #20
 800499c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800499e:	2b20      	cmp	r3, #32
{
 80049a0:	460f      	mov	r7, r1
 80049a2:	9203      	str	r2, [sp, #12]
 80049a4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80049a8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ac:	f040 80a6 	bne.w	8004afc <HAL_I2C_Mem_Read+0x16c>
    if ((pData == NULL) || (Size == 0U))
 80049b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049b2:	b91b      	cbnz	r3, 80049bc <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 80049b4:	2001      	movs	r0, #1
}
 80049b6:	b005      	add	sp, #20
 80049b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 80049bc:	f1ba 0f00 	cmp.w	sl, #0
 80049c0:	d0f8      	beq.n	80049b4 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 80049c2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	f000 8098 	beq.w	8004afc <HAL_I2C_Mem_Read+0x16c>
 80049cc:	2501      	movs	r5, #1
 80049ce:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80049d2:	f7fe ff2f 	bl	8003834 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049d6:	2319      	movs	r3, #25
 80049d8:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80049da:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049dc:	462a      	mov	r2, r5
 80049de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049e2:	4620      	mov	r0, r4
 80049e4:	f7ff fd96 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 80049e8:	4680      	mov	r8, r0
 80049ea:	b9c8      	cbnz	r0, 8004a20 <HAL_I2C_Mem_Read+0x90>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049ec:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 80049ee:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049f0:	9a03      	ldr	r2, [sp, #12]
 80049f2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049f4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049f8:	2340      	movs	r3, #64	; 0x40
 80049fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80049fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a00:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a02:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004a04:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a06:	465b      	mov	r3, fp
    hi2c->XferCount = Size;
 8004a08:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a0c:	e9cd 9600 	strd	r9, r6, [sp]
 8004a10:	f7ff fe42 	bl	8004698 <I2C_RequestMemoryRead>
 8004a14:	b130      	cbz	r0, 8004a24 <HAL_I2C_Mem_Read+0x94>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a16:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004a18:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d0c9      	beq.n	80049b4 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 8004a20:	2003      	movs	r0, #3
 8004a22:	e7c8      	b.n	80049b6 <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a26:	2bff      	cmp	r3, #255	; 0xff
 8004a28:	4b35      	ldr	r3, [pc, #212]	; (8004b00 <HAL_I2C_Mem_Read+0x170>)
 8004a2a:	d943      	bls.n	8004ab4 <HAL_I2C_Mem_Read+0x124>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a2c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a34:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004a36:	4639      	mov	r1, r7
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f7ff fd57 	bl	80044ec <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a3e:	9600      	str	r6, [sp, #0]
 8004a40:	464b      	mov	r3, r9
 8004a42:	2200      	movs	r2, #0
 8004a44:	2104      	movs	r1, #4
 8004a46:	4620      	mov	r0, r4
 8004a48:	f7ff fd64 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d1e7      	bne.n	8004a20 <HAL_I2C_Mem_Read+0x90>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a56:	1c59      	adds	r1, r3, #1
 8004a58:	6261      	str	r1, [r4, #36]	; 0x24
 8004a5a:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8004a5c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004a5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004a60:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004a62:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004a64:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004a66:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004a68:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004a6a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8004a6c:	b9b2      	cbnz	r2, 8004a9c <HAL_I2C_Mem_Read+0x10c>
 8004a6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	b19b      	cbz	r3, 8004a9c <HAL_I2C_Mem_Read+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a74:	9600      	str	r6, [sp, #0]
 8004a76:	464b      	mov	r3, r9
 8004a78:	2180      	movs	r1, #128	; 0x80
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f7ff fd4a 	bl	8004514 <I2C_WaitOnFlagUntilTimeout>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d1cd      	bne.n	8004a20 <HAL_I2C_Mem_Read+0x90>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a86:	2bff      	cmp	r3, #255	; 0xff
 8004a88:	d91c      	bls.n	8004ac4 <HAL_I2C_Mem_Read+0x134>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a8a:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a90:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a92:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a94:	4639      	mov	r1, r7
 8004a96:	4620      	mov	r0, r4
 8004a98:	f7ff fd28 	bl	80044ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8004a9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1cc      	bne.n	8004a3e <HAL_I2C_Mem_Read+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aa4:	4632      	mov	r2, r6
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7ff fe29 	bl	8004700 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004aae:	b188      	cbz	r0, 8004ad4 <HAL_I2C_Mem_Read+0x144>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ab0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ab2:	e7b3      	b.n	8004a1c <HAL_I2C_Mem_Read+0x8c>
      hi2c->XferSize = hi2c->XferCount;
 8004ab4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8004abc:	b292      	uxth	r2, r2
 8004abe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	e7b8      	b.n	8004a36 <HAL_I2C_Mem_Read+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8004ac4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004aca:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004acc:	b292      	uxth	r2, r2
 8004ace:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	e7df      	b.n	8004a94 <HAL_I2C_Mem_Read+0x104>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	2120      	movs	r1, #32
 8004ad8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004ae0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004ae4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004af2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004af6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004afa:	e75c      	b.n	80049b6 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8004afc:	2002      	movs	r0, #2
 8004afe:	e75a      	b.n	80049b6 <HAL_I2C_Mem_Read+0x26>
 8004b00:	80002400 	.word	0x80002400

08004b04 <HAL_I2C_GetState>:
  return hi2c->State;
 8004b04:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8004b08:	4770      	bx	lr

08004b0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8004b0e:	4604      	mov	r4, r0
{
 8004b10:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d06d      	beq.n	8004bf2 <HAL_PCD_Init+0xe8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8004b16:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8004b1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b1e:	b91b      	cbnz	r3, 8004b28 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b20:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b24:	f7fe faac 	bl	8003080 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b28:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b2a:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8004b2c:	466e      	mov	r6, sp
 8004b2e:	f104 0804 	add.w	r8, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 8004b32:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b36:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8004b3a:	f001 fdde 	bl	80066fa <USB_DisableGlobalInt>
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8004b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b44:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004b46:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004b4a:	f104 0510 	add.w	r5, r4, #16
 8004b4e:	e886 0003 	stmia.w	r6, {r0, r1}
 8004b52:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004b56:	6820      	ldr	r0, [r4, #0]

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b58:	2601      	movs	r6, #1
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8004b5a:	f001 fd8d 	bl	8006678 <USB_CoreInit>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b5e:	2100      	movs	r1, #0
 8004b60:	6820      	ldr	r0, [r4, #0]
 8004b62:	f001 fdd0 	bl	8006706 <USB_SetCurrentMode>
 8004b66:	2100      	movs	r1, #0
 8004b68:	4622      	mov	r2, r4
 8004b6a:	4623      	mov	r3, r4
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b6c:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8004b6e:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b72:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 8004b76:	3101      	adds	r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 8004b78:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  for (i = 0U; i < 15U; i++)
 8004b7c:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b7e:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b82:	6518      	str	r0, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b84:	e9c3 0011 	strd	r0, r0, [r3, #68]	; 0x44
 8004b88:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 8004b8c:	d1ef      	bne.n	8004b6e <HAL_PCD_Init+0x64>
 8004b8e:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b90:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8004b92:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 8004b96:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].is_in = 0U;
 8004b98:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
 8004b9c:	321c      	adds	r2, #28
  for (i = 0U; i < 15U; i++)
 8004b9e:	2b0f      	cmp	r3, #15
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ba0:	f882 71e3 	strb.w	r7, [r2, #483]	; 0x1e3
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ba4:	f8c2 71e8 	str.w	r7, [r2, #488]	; 0x1e8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ba8:	f8c2 71ec 	str.w	r7, [r2, #492]	; 0x1ec
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004bac:	f8c2 71f4 	str.w	r7, [r2, #500]	; 0x1f4
  for (i = 0U; i < 15U; i++)
 8004bb0:	d1ef      	bne.n	8004b92 <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bb4:	466e      	mov	r6, sp
 8004bb6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004bbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004bc0:	e886 0003 	stmia.w	r6, {r0, r1}
 8004bc4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	f001 fddd 	bl	8006788 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8004bce:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8004bd0:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004bd4:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004bd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d102      	bne.n	8004be4 <HAL_PCD_Init+0xda>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004bde:	4620      	mov	r0, r4
 8004be0:	f000 fcc6 	bl	8005570 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect (hpcd->Instance);
 8004be4:	6820      	ldr	r0, [r4, #0]
 8004be6:	f002 f8d5 	bl	8006d94 <USB_DevDisconnect>

  return HAL_OK;
 8004bea:	2000      	movs	r0, #0
}
 8004bec:	b00a      	add	sp, #40	; 0x28
 8004bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004bf2:	2001      	movs	r0, #1
 8004bf4:	e7fa      	b.n	8004bec <HAL_PCD_Init+0xe2>

08004bf6 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8004bf6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8004bfa:	2b01      	cmp	r3, #1
{
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004c00:	d00c      	beq.n	8004c1c <HAL_PCD_Start+0x26>
 8004c02:	2301      	movs	r3, #1
 8004c04:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect (hpcd->Instance);
 8004c08:	6800      	ldr	r0, [r0, #0]
 8004c0a:	f002 f8b7 	bl	8006d7c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004c0e:	6820      	ldr	r0, [r4, #0]
 8004c10:	f001 fd6d 	bl	80066ee <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004c14:	2000      	movs	r0, #0
 8004c16:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8004c1a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004c1c:	2002      	movs	r0, #2
 8004c1e:	e7fc      	b.n	8004c1a <HAL_PCD_Start+0x24>

08004c20 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c24:	6806      	ldr	r6, [r0, #0]
{
 8004c26:	b087      	sub	sp, #28
 8004c28:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c2a:	4630      	mov	r0, r6
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 8004c2c:	f8d6 9040 	ldr.w	r9, [r6, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c30:	f002 f8eb 	bl	8006e0a <USB_GetMode>
 8004c34:	9002      	str	r0, [sp, #8]
 8004c36:	2800      	cmp	r0, #0
 8004c38:	f040 814f 	bne.w	8004eda <HAL_PCD_IRQHandler+0x2ba>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c3c:	6820      	ldr	r0, [r4, #0]
 8004c3e:	f002 f8b5 	bl	8006dac <USB_ReadInterrupts>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	f000 8149 	beq.w	8004eda <HAL_PCD_IRQHandler+0x2ba>
    {
      return;
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c48:	6820      	ldr	r0, [r4, #0]
 8004c4a:	f002 f8af 	bl	8006dac <USB_ReadInterrupts>
 8004c4e:	0782      	lsls	r2, r0, #30
 8004c50:	d504      	bpl.n	8004c5c <HAL_PCD_IRQHandler+0x3c>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	6953      	ldr	r3, [r2, #20]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	6153      	str	r3, [r2, #20]
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c5c:	6820      	ldr	r0, [r4, #0]
 8004c5e:	f002 f8a5 	bl	8006dac <USB_ReadInterrupts>
 8004c62:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8004c66:	d00c      	beq.n	8004c82 <HAL_PCD_IRQHandler+0x62>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004c68:	6820      	ldr	r0, [r4, #0]
      epnum = 0U;
 8004c6a:	2500      	movs	r5, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004c6c:	f002 f8a2 	bl	8006db4 <USB_ReadDevAllOutEpInterrupt>
 8004c70:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 8004c74:	4680      	mov	r8, r0
              {
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
              }
            }

            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c76:	f8df b5cc 	ldr.w	fp, [pc, #1484]	; 8005244 <HAL_PCD_IRQHandler+0x624>
      while (ep_intr != 0U)
 8004c7a:	f1b8 0f00 	cmp.w	r8, #0
 8004c7e:	f040 812f 	bne.w	8004ee0 <HAL_PCD_IRQHandler+0x2c0>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	f002 f892 	bl	8006dac <USB_ReadInterrupts>
 8004c88:	0341      	lsls	r1, r0, #13
 8004c8a:	d50b      	bpl.n	8004ca4 <HAL_PCD_IRQHandler+0x84>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	4627      	mov	r7, r4
 8004c90:	f002 f898 	bl	8006dc4 <USB_ReadDevAllInEpInterrupt>

      epnum = 0U;
 8004c94:	2500      	movs	r5, #0
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c96:	4682      	mov	sl, r0
 8004c98:	f506 6910 	add.w	r9, r6, #2304	; 0x900

      while (ep_intr != 0U)
 8004c9c:	f1ba 0f00 	cmp.w	sl, #0
 8004ca0:	f040 819b 	bne.w	8004fda <HAL_PCD_IRQHandler+0x3ba>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ca4:	6820      	ldr	r0, [r4, #0]
 8004ca6:	f002 f881 	bl	8006dac <USB_ReadInterrupts>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	da15      	bge.n	8004cda <HAL_PCD_IRQHandler+0xba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cae:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804

      if(hpcd->LPM_State == LPM_L1)
 8004cba:	f894 33f0 	ldrb.w	r3, [r4, #1008]	; 0x3f0
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	f040 8228 	bne.w	8005114 <HAL_PCD_IRQHandler+0x4f4>
      {
        hpcd->LPM_State = LPM_L0;
 8004cc4:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004cc6:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8004cc8:	f884 13f0 	strb.w	r1, [r4, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ccc:	f000 fc63 	bl	8005596 <HAL_PCDEx_LPM_Callback>
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004cd0:	6822      	ldr	r2, [r4, #0]
 8004cd2:	6953      	ldr	r3, [r2, #20]
 8004cd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cd8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cda:	6820      	ldr	r0, [r4, #0]
 8004cdc:	f002 f866 	bl	8006dac <USB_ReadInterrupts>
 8004ce0:	0502      	lsls	r2, r0, #20
 8004ce2:	d50b      	bpl.n	8004cfc <HAL_PCD_IRQHandler+0xdc>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ce4:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8004ce8:	07db      	lsls	r3, r3, #31
 8004cea:	d502      	bpl.n	8004cf2 <HAL_PCD_IRQHandler+0xd2>
      {

        HAL_PCD_SuspendCallback(hpcd);
 8004cec:	4620      	mov	r0, r4
 8004cee:	f7fe fadd 	bl	80032ac <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cf2:	6822      	ldr	r2, [r4, #0]
 8004cf4:	6953      	ldr	r3, [r2, #20]
 8004cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfa:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	f002 f855 	bl	8006dac <USB_ReadInterrupts>
 8004d02:	0107      	lsls	r7, r0, #4
 8004d04:	d514      	bpl.n	8004d30 <HAL_PCD_IRQHandler+0x110>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004d0e:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 8004d10:	f894 23f0 	ldrb.w	r2, [r4, #1008]	; 0x3f0
 8004d14:	2a00      	cmp	r2, #0
 8004d16:	f040 8201 	bne.w	800511c <HAL_PCD_IRQHandler+0x4fc>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8004d1c:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004d1e:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004d20:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 8004d24:	f884 13f0 	strb.w	r1, [r4, #1008]	; 0x3f0
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004d28:	f8c4 33f4 	str.w	r3, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004d2c:	f000 fc33 	bl	8005596 <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d30:	6820      	ldr	r0, [r4, #0]
 8004d32:	f002 f83b 	bl	8006dac <USB_ReadInterrupts>
 8004d36:	04c0      	lsls	r0, r0, #19
 8004d38:	d535      	bpl.n	8004da6 <HAL_PCD_IRQHandler+0x186>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d3a:	f506 6700 	add.w	r7, r6, #2048	; 0x800
 8004d3e:	687b      	ldr	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d40:	2110      	movs	r1, #16
 8004d42:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	607b      	str	r3, [r7, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d4a:	f001 fcf3 	bl	8006734 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d4e:	6860      	ldr	r0, [r4, #4]
 8004d50:	f506 6310 	add.w	r3, r6, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d54:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d58:	9a02      	ldr	r2, [sp, #8]
 8004d5a:	4290      	cmp	r0, r2
 8004d5c:	f040 81e2 	bne.w	8005124 <HAL_PCD_IRQHandler+0x504>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004d66:	61fb      	str	r3, [r7, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 81ee 	beq.w	800514c <HAL_PCD_IRQHandler+0x52c>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8004d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d74:	f043 030b 	orr.w	r3, r3, #11
 8004d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8004d7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d7e:	f043 030b 	orr.w	r3, r3, #11
 8004d82:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d84:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d88:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 8004d8c:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d92:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d94:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004d98:	f002 f856 	bl	8006e48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	6953      	ldr	r3, [r2, #20]
 8004da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004da4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004da6:	6820      	ldr	r0, [r4, #0]
 8004da8:	f002 f800 	bl	8006dac <USB_ReadInterrupts>
 8004dac:	0481      	lsls	r1, r0, #18
 8004dae:	d51d      	bpl.n	8004dec <HAL_PCD_IRQHandler+0x1cc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004db0:	6820      	ldr	r0, [r4, #0]
 8004db2:	f002 f82e 	bl	8006e12 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004db6:	6820      	ldr	r0, [r4, #0]
 8004db8:	68c3      	ldr	r3, [r0, #12]
 8004dba:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8004dbe:	60c3      	str	r3, [r0, #12]

      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 8004dc0:	f001 fd9a 	bl	80068f8 <USB_GetDevSpeed>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	f040 81ca 	bne.w	800515e <HAL_PCD_IRQHandler+0x53e>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE;
 8004dca:	f44f 7300 	mov.w	r3, #512	; 0x200
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8004dce:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 8004dd0:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE;
 8004dd2:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 8004dd4:	68d3      	ldr	r3, [r2, #12]
 8004dd6:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8004dda:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
        }
      }

      HAL_PCD_ResetCallback(hpcd);
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f7fe fa54 	bl	800328a <HAL_PCD_ResetCallback>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	6953      	ldr	r3, [r2, #20]
 8004de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dea:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	f001 ffdd 	bl	8006dac <USB_ReadInterrupts>
 8004df2:	06c3      	lsls	r3, r0, #27
 8004df4:	d52b      	bpl.n	8004e4e <HAL_PCD_IRQHandler+0x22e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004df6:	6822      	ldr	r2, [r4, #0]
 8004df8:	6993      	ldr	r3, [r2, #24]
 8004dfa:	f023 0310 	bic.w	r3, r3, #16
 8004dfe:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8004e00:	6a37      	ldr	r7, [r6, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e02:	f3c7 4343 	ubfx	r3, r7, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004e06:	f007 090f 	and.w	r9, r7, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	f040 8227 	bne.w	800525e <HAL_PCD_IRQHandler+0x63e>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004e10:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004e14:	421f      	tst	r7, r3
 8004e16:	d015      	beq.n	8004e44 <HAL_PCD_IRQHandler+0x224>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004e18:	f04f 081c 	mov.w	r8, #28
 8004e1c:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8004e20:	4630      	mov	r0, r6
 8004e22:	fb08 4809 	mla	r8, r8, r9, r4
 8004e26:	463a      	mov	r2, r7
 8004e28:	f8d8 1208 	ldr.w	r1, [r8, #520]	; 0x208
 8004e2c:	f001 ff34 	bl	8006c98 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e30:	f8d8 3208 	ldr.w	r3, [r8, #520]	; 0x208
 8004e34:	443b      	add	r3, r7
 8004e36:	f8c8 3208 	str.w	r3, [r8, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e3a:	f8d8 3214 	ldr.w	r3, [r8, #532]	; 0x214
 8004e3e:	441f      	add	r7, r3
 8004e40:	f8c8 7214 	str.w	r7, [r8, #532]	; 0x214
      }
      else
      {
         /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	6993      	ldr	r3, [r2, #24]
 8004e48:	f043 0310 	orr.w	r3, r3, #16
 8004e4c:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e4e:	6820      	ldr	r0, [r4, #0]
 8004e50:	f001 ffac 	bl	8006dac <USB_ReadInterrupts>
 8004e54:	0707      	lsls	r7, r0, #28
 8004e56:	d507      	bpl.n	8004e68 <HAL_PCD_IRQHandler+0x248>
    {
      HAL_PCD_SOFCallback(hpcd);
 8004e58:	4620      	mov	r0, r4
 8004e5a:	f7fe fa12 	bl	8003282 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e5e:	6822      	ldr	r2, [r4, #0]
 8004e60:	6953      	ldr	r3, [r2, #20]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e68:	6820      	ldr	r0, [r4, #0]
 8004e6a:	f001 ff9f 	bl	8006dac <USB_ReadInterrupts>
 8004e6e:	02c6      	lsls	r6, r0, #11
 8004e70:	d508      	bpl.n	8004e84 <HAL_PCD_IRQHandler+0x264>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e72:	b2e9      	uxtb	r1, r5
 8004e74:	4620      	mov	r0, r4
 8004e76:	f7fe fa25 	bl	80032c4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e7a:	6822      	ldr	r2, [r4, #0]
 8004e7c:	6953      	ldr	r3, [r2, #20]
 8004e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e82:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e84:	6820      	ldr	r0, [r4, #0]
 8004e86:	f001 ff91 	bl	8006dac <USB_ReadInterrupts>
 8004e8a:	0280      	lsls	r0, r0, #10
 8004e8c:	d508      	bpl.n	8004ea0 <HAL_PCD_IRQHandler+0x280>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e8e:	b2e9      	uxtb	r1, r5
 8004e90:	4620      	mov	r0, r4
 8004e92:	f7fe fa13 	bl	80032bc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	6953      	ldr	r3, [r2, #20]
 8004e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e9e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	f001 ff83 	bl	8006dac <USB_ReadInterrupts>
 8004ea6:	0041      	lsls	r1, r0, #1
 8004ea8:	d507      	bpl.n	8004eba <HAL_PCD_IRQHandler+0x29a>
    {
      HAL_PCD_ConnectCallback(hpcd);
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7fe fa0e 	bl	80032cc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004eb0:	6822      	ldr	r2, [r4, #0]
 8004eb2:	6953      	ldr	r3, [r2, #20]
 8004eb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004eb8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	f001 ff76 	bl	8006dac <USB_ReadInterrupts>
 8004ec0:	0742      	lsls	r2, r0, #29
 8004ec2:	d50a      	bpl.n	8004eda <HAL_PCD_IRQHandler+0x2ba>
    {
      temp = hpcd->Instance->GOTGINT;
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	685d      	ldr	r5, [r3, #4]

      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ec8:	076b      	lsls	r3, r5, #29
 8004eca:	d502      	bpl.n	8004ed2 <HAL_PCD_IRQHandler+0x2b2>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f7fe fa01 	bl	80032d4 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	6853      	ldr	r3, [r2, #4]
 8004ed6:	432b      	orrs	r3, r5
 8004ed8:	6053      	str	r3, [r2, #4]
    }
  }
}
 8004eda:	b007      	add	sp, #28
 8004edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8004ee0:	f018 0f01 	tst.w	r8, #1
 8004ee4:	d075      	beq.n	8004fd2 <HAL_PCD_IRQHandler+0x3b2>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ee6:	b2ea      	uxtb	r2, r5
 8004ee8:	6820      	ldr	r0, [r4, #0]
 8004eea:	4611      	mov	r1, r2
 8004eec:	9203      	str	r2, [sp, #12]
 8004eee:	f001 ff71 	bl	8006dd4 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ef2:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ef6:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004ef8:	d035      	beq.n	8004f66 <HAL_PCD_IRQHandler+0x346>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004efa:	2301      	movs	r3, #1
 8004efc:	eb07 1045 	add.w	r0, r7, r5, lsl #5
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f00:	45d9      	cmp	r9, fp
 8004f02:	9a03      	ldr	r2, [sp, #12]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f04:	6083      	str	r3, [r0, #8]
 8004f06:	6923      	ldr	r3, [r4, #16]
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f08:	d945      	bls.n	8004f96 <HAL_PCD_IRQHandler+0x376>
              if (hpcd->Init.dma_enable == 1U)
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d116      	bne.n	8004f3c <HAL_PCD_IRQHandler+0x31c>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	041b      	lsls	r3, r3, #16
 8004f12:	d502      	bpl.n	8004f1a <HAL_PCD_IRQHandler+0x2fa>
                  CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8004f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f18:	6083      	str	r3, [r0, #8]
 8004f1a:	231c      	movs	r3, #28
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f1c:	6901      	ldr	r1, [r0, #16]
 8004f1e:	fb03 4305 	mla	r3, r3, r5, r4
 8004f22:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8004f26:	f8d3 c204 	ldr.w	ip, [r3, #516]	; 0x204
 8004f2a:	ebac 0101 	sub.w	r1, ip, r1
 8004f2e:	f8c3 1214 	str.w	r1, [r3, #532]	; 0x214
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004f32:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8004f36:	4461      	add	r1, ip
 8004f38:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f3c:	4bb3      	ldr	r3, [pc, #716]	; (800520c <HAL_PCD_IRQHandler+0x5ec>)
 8004f3e:	4599      	cmp	r9, r3
 8004f40:	d12b      	bne.n	8004f9a <HAL_PCD_IRQHandler+0x37a>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	0419      	lsls	r1, r3, #16
 8004f46:	d528      	bpl.n	8004f9a <HAL_PCD_IRQHandler+0x37a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8004f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f4c:	6083      	str	r3, [r0, #8]
            if(hpcd->Init.dma_enable == 1U)
 8004f4e:	6921      	ldr	r1, [r4, #16]
 8004f50:	2901      	cmp	r1, #1
 8004f52:	d108      	bne.n	8004f66 <HAL_PCD_IRQHandler+0x346>
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004f54:	b93d      	cbnz	r5, 8004f66 <HAL_PCD_IRQHandler+0x346>
 8004f56:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8004f5a:	b923      	cbnz	r3, 8004f66 <HAL_PCD_IRQHandler+0x346>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f5c:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 8004f60:	6820      	ldr	r0, [r4, #0]
 8004f62:	f001 ff71 	bl	8006e48 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004f66:	f01a 0f08 	tst.w	sl, #8
 8004f6a:	d024      	beq.n	8004fb6 <HAL_PCD_IRQHandler+0x396>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f6c:	4aa7      	ldr	r2, [pc, #668]	; (800520c <HAL_PCD_IRQHandler+0x5ec>)
 8004f6e:	eb07 1345 	add.w	r3, r7, r5, lsl #5
 8004f72:	4591      	cmp	r9, r2
 8004f74:	d116      	bne.n	8004fa4 <HAL_PCD_IRQHandler+0x384>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	0412      	lsls	r2, r2, #16
 8004f7a:	d502      	bpl.n	8004f82 <HAL_PCD_IRQHandler+0x362>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8004f7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f80:	609a      	str	r2, [r3, #8]
              if (hpcd->Init.dma_enable == 1U)
 8004f82:	6922      	ldr	r2, [r4, #16]
 8004f84:	2a01      	cmp	r2, #1
 8004f86:	d10f      	bne.n	8004fa8 <HAL_PCD_IRQHandler+0x388>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	0410      	lsls	r0, r2, #16
 8004f8c:	d50c      	bpl.n	8004fa8 <HAL_PCD_IRQHandler+0x388>
                  CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8004f8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	e008      	b.n	8004fa8 <HAL_PCD_IRQHandler+0x388>
            if(hpcd->Init.dma_enable == 1U)
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d0bf      	beq.n	8004f1a <HAL_PCD_IRQHandler+0x2fa>
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f7fe f95f 	bl	8003260 <HAL_PCD_DataOutStageCallback>
 8004fa2:	e7d4      	b.n	8004f4e <HAL_PCD_IRQHandler+0x32e>
            if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004fa4:	45d9      	cmp	r9, fp
 8004fa6:	d8ec      	bhi.n	8004f82 <HAL_PCD_IRQHandler+0x362>
            HAL_PCD_SetupStageCallback(hpcd);
 8004fa8:	4620      	mov	r0, r4
 8004faa:	9303      	str	r3, [sp, #12]
 8004fac:	f7fe f952 	bl	8003254 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	9b03      	ldr	r3, [sp, #12]
 8004fb4:	609a      	str	r2, [r3, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004fb6:	f01a 0f10 	tst.w	sl, #16
 8004fba:	d003      	beq.n	8004fc4 <HAL_PCD_IRQHandler+0x3a4>
 8004fbc:	eb07 1345 	add.w	r3, r7, r5, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fc0:	2210      	movs	r2, #16
 8004fc2:	609a      	str	r2, [r3, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fc4:	f01a 0f20 	tst.w	sl, #32
 8004fc8:	d003      	beq.n	8004fd2 <HAL_PCD_IRQHandler+0x3b2>
 8004fca:	eb07 1345 	add.w	r3, r7, r5, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fce:	2220      	movs	r2, #32
 8004fd0:	609a      	str	r2, [r3, #8]
        epnum++;
 8004fd2:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8004fd4:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8004fd8:	e64f      	b.n	8004c7a <HAL_PCD_IRQHandler+0x5a>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fda:	f01a 0f01 	tst.w	sl, #1
 8004fde:	d07a      	beq.n	80050d6 <HAL_PCD_IRQHandler+0x4b6>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fe0:	fa5f fb85 	uxtb.w	fp, r5
 8004fe4:	6820      	ldr	r0, [r4, #0]
 8004fe6:	4659      	mov	r1, fp
 8004fe8:	f001 fefd 	bl	8006de6 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004fec:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ff0:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ff2:	d024      	beq.n	800503e <HAL_PCD_IRQHandler+0x41e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	f005 020f 	and.w	r2, r5, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ffa:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004ffe:	4659      	mov	r1, fp
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 8005000:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005004:	ea23 0302 	bic.w	r3, r3, r2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005008:	4602      	mov	r2, r0
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800500a:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
 800500e:	eb09 1345 	add.w	r3, r9, r5, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005012:	6098      	str	r0, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	4283      	cmp	r3, r0
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005018:	4620      	mov	r0, r4
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800501a:	bf02      	ittt	eq
 800501c:	e9d7 2311 	ldrdeq	r2, r3, [r7, #68]	; 0x44
 8005020:	189b      	addeq	r3, r3, r2
 8005022:	64bb      	streq	r3, [r7, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005024:	f7fe f925 	bl	8003272 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 8005028:	6921      	ldr	r1, [r4, #16]
 800502a:	2901      	cmp	r1, #1
 800502c:	d107      	bne.n	800503e <HAL_PCD_IRQHandler+0x41e>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800502e:	b935      	cbnz	r5, 800503e <HAL_PCD_IRQHandler+0x41e>
 8005030:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005032:	b923      	cbnz	r3, 800503e <HAL_PCD_IRQHandler+0x41e>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005034:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 8005038:	6820      	ldr	r0, [r4, #0]
 800503a:	f001 ff05 	bl	8006e48 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800503e:	f018 0f08 	tst.w	r8, #8
 8005042:	d003      	beq.n	800504c <HAL_PCD_IRQHandler+0x42c>
 8005044:	eb09 1345 	add.w	r3, r9, r5, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005048:	2208      	movs	r2, #8
 800504a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800504c:	f018 0f10 	tst.w	r8, #16
 8005050:	d003      	beq.n	800505a <HAL_PCD_IRQHandler+0x43a>
 8005052:	eb09 1345 	add.w	r3, r9, r5, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005056:	2210      	movs	r2, #16
 8005058:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800505a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800505e:	d003      	beq.n	8005068 <HAL_PCD_IRQHandler+0x448>
 8005060:	eb09 1345 	add.w	r3, r9, r5, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005064:	2240      	movs	r2, #64	; 0x40
 8005066:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005068:	f018 0f02 	tst.w	r8, #2
 800506c:	d003      	beq.n	8005076 <HAL_PCD_IRQHandler+0x456>
 800506e:	eb09 1345 	add.w	r3, r9, r5, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005072:	2202      	movs	r2, #2
 8005074:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005076:	f018 0f80 	tst.w	r8, #128	; 0x80
 800507a:	d02c      	beq.n	80050d6 <HAL_PCD_IRQHandler+0x4b6>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	9303      	str	r3, [sp, #12]
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 8005080:	e9d7 3214 	ldrd	r3, r2, [r7, #80]	; 0x50
 8005084:	eba3 0802 	sub.w	r8, r3, r2
 8005088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508a:	4598      	cmp	r8, r3
 800508c:	bf28      	it	cs
 800508e:	4698      	movcs	r8, r3
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8005090:	f108 0303 	add.w	r3, r8, #3
 8005094:	089b      	lsrs	r3, r3, #2
 8005096:	9304      	str	r3, [sp, #16]

  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8005098:	9b03      	ldr	r3, [sp, #12]
 800509a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509e:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80050a2:	9305      	str	r3, [sp, #20]
 80050a4:	9b05      	ldr	r3, [sp, #20]
 80050a6:	9a04      	ldr	r2, [sp, #16]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d904      	bls.n	80050ba <HAL_PCD_IRQHandler+0x49a>
          (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050b0:	e9d7 3214 	ldrd	r3, r2, [r7, #80]	; 0x50
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d900      	bls.n	80050ba <HAL_PCD_IRQHandler+0x49a>
          (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050b8:	b993      	cbnz	r3, 80050e0 <HAL_PCD_IRQHandler+0x4c0>

    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }

  if(len <= 0U)
 80050ba:	f1b8 0f00 	cmp.w	r8, #0
 80050be:	d10a      	bne.n	80050d6 <HAL_PCD_IRQHandler+0x4b6>
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050c0:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 80050c2:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050c4:	f503 6b00 	add.w	fp, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 80050c8:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050ca:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 80050ce:	ea23 0302 	bic.w	r3, r3, r2
 80050d2:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
        epnum++;
 80050d6:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80050d8:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80050dc:	371c      	adds	r7, #28
 80050de:	e5dd      	b.n	8004c9c <HAL_PCD_IRQHandler+0x7c>
    len = ep->xfer_len - ep->xfer_count;
 80050e0:	eba3 0802 	sub.w	r8, r3, r2
 80050e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len, (uint8_t)hpcd->Init.dma_enable);
 80050e6:	465a      	mov	r2, fp
 80050e8:	9803      	ldr	r0, [sp, #12]
 80050ea:	4598      	cmp	r8, r3
 80050ec:	bf28      	it	cs
 80050ee:	4698      	movcs	r8, r3
    len32b = (len + 3U) / 4U;
 80050f0:	f108 0303 	add.w	r3, r8, #3
 80050f4:	089b      	lsrs	r3, r3, #2
 80050f6:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len, (uint8_t)hpcd->Init.dma_enable);
 80050f8:	7c23      	ldrb	r3, [r4, #16]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	fa1f f388 	uxth.w	r3, r8
 8005100:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005102:	f001 fce9 	bl	8006ad8 <USB_WritePacket>
    ep->xfer_buff  += len;
 8005106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005108:	4443      	add	r3, r8
 800510a:	64bb      	str	r3, [r7, #72]	; 0x48
    ep->xfer_count += len;
 800510c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800510e:	4443      	add	r3, r8
 8005110:	657b      	str	r3, [r7, #84]	; 0x54
 8005112:	e7c7      	b.n	80050a4 <HAL_PCD_IRQHandler+0x484>
        HAL_PCD_ResumeCallback(hpcd);
 8005114:	4620      	mov	r0, r4
 8005116:	f7fe f8cd 	bl	80032b4 <HAL_PCD_ResumeCallback>
 800511a:	e5d9      	b.n	8004cd0 <HAL_PCD_IRQHandler+0xb0>
        HAL_PCD_SuspendCallback(hpcd);
 800511c:	4620      	mov	r0, r4
 800511e:	f7fe f8c5 	bl	80032ac <HAL_PCD_SuspendCallback>
 8005122:	e605      	b.n	8004d30 <HAL_PCD_IRQHandler+0x110>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005124:	6099      	str	r1, [r3, #8]
 8005126:	3320      	adds	r3, #32
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005128:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800512c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005130:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005134:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005138:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800513c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005140:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005144:	9a02      	ldr	r2, [sp, #8]
 8005146:	3201      	adds	r2, #1
 8005148:	9202      	str	r2, [sp, #8]
 800514a:	e605      	b.n	8004d58 <HAL_PCD_IRQHandler+0x138>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005152:	617b      	str	r3, [r7, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f043 030b 	orr.w	r3, r3, #11
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	e612      	b.n	8004d84 <HAL_PCD_IRQHandler+0x164>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800515e:	2303      	movs	r3, #3
 8005160:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 8005162:	2340      	movs	r3, #64	; 0x40
 8005164:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 8005166:	f000 fc75 	bl	8005a54 <HAL_RCC_GetHCLKFreq>
        if((hclk >= 14200000U) && (hclk < 15000000U))
 800516a:	4b29      	ldr	r3, [pc, #164]	; (8005210 <HAL_PCD_IRQHandler+0x5f0>)
 800516c:	4a29      	ldr	r2, [pc, #164]	; (8005214 <HAL_PCD_IRQHandler+0x5f4>)
 800516e:	4403      	add	r3, r0
 8005170:	4293      	cmp	r3, r2
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	d804      	bhi.n	8005180 <HAL_PCD_IRQHandler+0x560>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	e62d      	b.n	8004ddc <HAL_PCD_IRQHandler+0x1bc>
        else if((hclk >= 15000000U) && (hclk < 16000000U))
 8005180:	4a25      	ldr	r2, [pc, #148]	; (8005218 <HAL_PCD_IRQHandler+0x5f8>)
 8005182:	4926      	ldr	r1, [pc, #152]	; (800521c <HAL_PCD_IRQHandler+0x5fc>)
 8005184:	4402      	add	r2, r0
 8005186:	428a      	cmp	r2, r1
 8005188:	d803      	bhi.n	8005192 <HAL_PCD_IRQHandler+0x572>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8005190:	e7f4      	b.n	800517c <HAL_PCD_IRQHandler+0x55c>
        else if((hclk >= 16000000U) && (hclk < 17200000U))
 8005192:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8005196:	4922      	ldr	r1, [pc, #136]	; (8005220 <HAL_PCD_IRQHandler+0x600>)
 8005198:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 800519c:	428a      	cmp	r2, r1
 800519e:	d803      	bhi.n	80051a8 <HAL_PCD_IRQHandler+0x588>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80051a6:	e7e9      	b.n	800517c <HAL_PCD_IRQHandler+0x55c>
        else if((hclk >= 17200000U) && (hclk < 18500000U))
 80051a8:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 80051ac:	491d      	ldr	r1, [pc, #116]	; (8005224 <HAL_PCD_IRQHandler+0x604>)
 80051ae:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 80051b2:	428a      	cmp	r2, r1
 80051b4:	d803      	bhi.n	80051be <HAL_PCD_IRQHandler+0x59e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80051bc:	e7de      	b.n	800517c <HAL_PCD_IRQHandler+0x55c>
        else if((hclk >= 18500000U) && (hclk < 20000000U))
 80051be:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <HAL_PCD_IRQHandler+0x608>)
 80051c0:	491a      	ldr	r1, [pc, #104]	; (800522c <HAL_PCD_IRQHandler+0x60c>)
 80051c2:	4402      	add	r2, r0
 80051c4:	428a      	cmp	r2, r1
 80051c6:	d803      	bhi.n	80051d0 <HAL_PCD_IRQHandler+0x5b0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80051ce:	e7d5      	b.n	800517c <HAL_PCD_IRQHandler+0x55c>
        else if((hclk >= 20000000U) && (hclk < 21800000U))
 80051d0:	4a17      	ldr	r2, [pc, #92]	; (8005230 <HAL_PCD_IRQHandler+0x610>)
 80051d2:	4918      	ldr	r1, [pc, #96]	; (8005234 <HAL_PCD_IRQHandler+0x614>)
 80051d4:	4402      	add	r2, r0
 80051d6:	428a      	cmp	r2, r1
 80051d8:	d803      	bhi.n	80051e2 <HAL_PCD_IRQHandler+0x5c2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80051e0:	e7cc      	b.n	800517c <HAL_PCD_IRQHandler+0x55c>
        else if((hclk >= 21800000U) && (hclk < 24000000U))
 80051e2:	4a15      	ldr	r2, [pc, #84]	; (8005238 <HAL_PCD_IRQHandler+0x618>)
 80051e4:	4915      	ldr	r1, [pc, #84]	; (800523c <HAL_PCD_IRQHandler+0x61c>)
 80051e6:	4402      	add	r2, r0
 80051e8:	428a      	cmp	r2, r1
 80051ea:	d803      	bhi.n	80051f4 <HAL_PCD_IRQHandler+0x5d4>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80051f2:	e7c3      	b.n	800517c <HAL_PCD_IRQHandler+0x55c>
        else if((hclk >= 24000000U) && (hclk < 27700000U))
 80051f4:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80051f8:	4911      	ldr	r1, [pc, #68]	; (8005240 <HAL_PCD_IRQHandler+0x620>)
 80051fa:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80051fe:	428a      	cmp	r2, r1
 8005200:	d822      	bhi.n	8005248 <HAL_PCD_IRQHandler+0x628>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005208:	e7b8      	b.n	800517c <HAL_PCD_IRQHandler+0x55c>
 800520a:	bf00      	nop
 800520c:	4f54310a 	.word	0x4f54310a
 8005210:	ff275340 	.word	0xff275340
 8005214:	000c34ff 	.word	0x000c34ff
 8005218:	ff1b1e40 	.word	0xff1b1e40
 800521c:	000f423f 	.word	0x000f423f
 8005220:	00124f7f 	.word	0x00124f7f
 8005224:	0013d61f 	.word	0x0013d61f
 8005228:	fee5b660 	.word	0xfee5b660
 800522c:	0016e35f 	.word	0x0016e35f
 8005230:	feced300 	.word	0xfeced300
 8005234:	001b773f 	.word	0x001b773f
 8005238:	feb35bc0 	.word	0xfeb35bc0
 800523c:	002191bf 	.word	0x002191bf
 8005240:	0038751f 	.word	0x0038751f
 8005244:	4f54300a 	.word	0x4f54300a
        else if((hclk >= 27700000U) && (hclk < 32000000U))
 8005248:	4a0d      	ldr	r2, [pc, #52]	; (8005280 <HAL_PCD_IRQHandler+0x660>)
 800524a:	490e      	ldr	r1, [pc, #56]	; (8005284 <HAL_PCD_IRQHandler+0x664>)
 800524c:	4402      	add	r2, r0
 800524e:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	bf94      	ite	ls
 8005254:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8005258:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 800525c:	e78e      	b.n	800517c <HAL_PCD_IRQHandler+0x55c>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800525e:	2b06      	cmp	r3, #6
 8005260:	f47f adf0 	bne.w	8004e44 <HAL_PCD_IRQHandler+0x224>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005264:	f04f 081c 	mov.w	r8, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005268:	2208      	movs	r2, #8
 800526a:	f504 7170 	add.w	r1, r4, #960	; 0x3c0
 800526e:	4630      	mov	r0, r6
 8005270:	f001 fd12 	bl	8006c98 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005274:	fb08 4809 	mla	r8, r8, r9, r4
 8005278:	f3c7 170a 	ubfx	r7, r7, #4, #11
 800527c:	e5dd      	b.n	8004e3a <HAL_PCD_IRQHandler+0x21a>
 800527e:	bf00      	nop
 8005280:	fe5954e0 	.word	0xfe5954e0
 8005284:	00419cdf 	.word	0x00419cdf

08005288 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8005288:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800528c:	2a01      	cmp	r2, #1
{
 800528e:	b510      	push	{r4, lr}
 8005290:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005292:	d00b      	beq.n	80052ac <HAL_PCD_SetAddress+0x24>
 8005294:	2201      	movs	r2, #1
 8005296:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800529a:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800529e:	6800      	ldr	r0, [r0, #0]
 80052a0:	f001 fd5c 	bl	8006d5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80052a4:	2000      	movs	r0, #0
 80052a6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80052aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80052ac:	2002      	movs	r0, #2
 80052ae:	e7fc      	b.n	80052aa <HAL_PCD_SetAddress+0x22>

080052b0 <HAL_PCD_EP_Open>:
{
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	f001 050f 	and.w	r5, r1, #15
 80052b6:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80052b8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80052bc:	f04f 061c 	mov.w	r6, #28
 80052c0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 80052c4:	ea4f 0080 	mov.w	r0, r0, lsl #2
 80052c8:	d01f      	beq.n	800530a <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80052ca:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 80052ce:	fb06 4605 	mla	r6, r6, r5, r4
 80052d2:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80052d4:	4421      	add	r1, r4
    ep->is_in = 1U;
 80052d6:	f886 003d 	strb.w	r0, [r6, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 80052da:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80052dc:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & 0xFU;
 80052de:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 80052e0:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80052e2:	b102      	cbz	r2, 80052e6 <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 80052e4:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80052e6:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80052e8:	bf04      	itt	eq
 80052ea:	2300      	moveq	r3, #0
 80052ec:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80052ee:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d012      	beq.n	800531c <HAL_PCD_EP_Open+0x6c>
 80052f6:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052f8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80052fa:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052fe:	f001 fb09 	bl	8006914 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005302:	2000      	movs	r0, #0
 8005304:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8005308:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800530a:	f500 71fe 	add.w	r1, r0, #508	; 0x1fc
    ep->is_in = 0U;
 800530e:	fb06 4605 	mla	r6, r6, r5, r4
 8005312:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8005314:	4421      	add	r1, r4
    ep->is_in = 0U;
 8005316:	f886 01fd 	strb.w	r0, [r6, #509]	; 0x1fd
 800531a:	e7de      	b.n	80052da <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 800531c:	2002      	movs	r0, #2
 800531e:	e7f3      	b.n	8005308 <HAL_PCD_EP_Open+0x58>

08005320 <HAL_PCD_EP_Close>:
{
 8005320:	b510      	push	{r4, lr}
 8005322:	4604      	mov	r4, r0
 8005324:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8005328:	f011 0f80 	tst.w	r1, #128	; 0x80
 800532c:	f04f 021c 	mov.w	r2, #28
 8005330:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8005334:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005338:	d016      	beq.n	8005368 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800533a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800533e:	fb02 4200 	mla	r2, r2, r0, r4
 8005342:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8005344:	4421      	add	r1, r4
    ep->is_in = 1U;
 8005346:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & 0xFU;
 800534a:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 800534c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8005350:	2b01      	cmp	r3, #1
 8005352:	d012      	beq.n	800537a <HAL_PCD_EP_Close+0x5a>
 8005354:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance , ep);
 8005356:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005358:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance , ep);
 800535c:	f001 fb18 	bl	8006990 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005360:	2000      	movs	r0, #0
 8005362:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8005366:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8005368:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800536c:	fb02 4200 	mla	r2, r2, r0, r4
 8005370:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8005372:	4421      	add	r1, r4
    ep->is_in = 0U;
 8005374:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 8005378:	e7e7      	b.n	800534a <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800537a:	2002      	movs	r0, #2
 800537c:	e7f3      	b.n	8005366 <HAL_PCD_EP_Close+0x46>

0800537e <HAL_PCD_EP_Receive>:
{
 800537e:	b538      	push	{r3, r4, r5, lr}
 8005380:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8005384:	241c      	movs	r4, #28
 8005386:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800538a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800538e:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8005392:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8005396:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8005398:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 800539c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 80053a0:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 80053a4:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80053a8:	6903      	ldr	r3, [r0, #16]
 80053aa:	6800      	ldr	r0, [r0, #0]
 80053ac:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80053ae:	bf08      	it	eq
 80053b0:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 80053b4:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0xFU) == 0U)
 80053b6:	b91d      	cbnz	r5, 80053c0 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053b8:	f001 fb1a 	bl	80069f0 <USB_EP0StartXfer>
}
 80053bc:	2000      	movs	r0, #0
 80053be:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053c0:	f001 fb9e 	bl	8006b00 <USB_EPStartXfer>
 80053c4:	e7fa      	b.n	80053bc <HAL_PCD_EP_Receive+0x3e>

080053c6 <HAL_PCD_EP_GetRxCount>:
  return (uint16_t)hpcd->OUT_ep[ep_addr & 0xFU].xfer_count;
 80053c6:	231c      	movs	r3, #28
 80053c8:	f001 010f 	and.w	r1, r1, #15
 80053cc:	fb03 0101 	mla	r1, r3, r1, r0
}
 80053d0:	f8b1 0214 	ldrh.w	r0, [r1, #532]	; 0x214
 80053d4:	4770      	bx	lr

080053d6 <HAL_PCD_EP_Transmit>:
{
 80053d6:	b538      	push	{r3, r4, r5, lr}
 80053d8:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80053dc:	241c      	movs	r4, #28
 80053de:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80053e2:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80053e6:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 80053e8:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 80053ea:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 80053ec:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80053ee:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80053f0:	2301      	movs	r3, #1
  ep->num = ep_addr & 0xFU;
 80053f2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 80053f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 80053fa:	6903      	ldr	r3, [r0, #16]
 80053fc:	6800      	ldr	r0, [r0, #0]
 80053fe:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8005400:	bf08      	it	eq
 8005402:	64e2      	streq	r2, [r4, #76]	; 0x4c
 8005404:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0xFU) == 0U)
 8005406:	b91d      	cbnz	r5, 8005410 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005408:	f001 faf2 	bl	80069f0 <USB_EP0StartXfer>
}
 800540c:	2000      	movs	r0, #0
 800540e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005410:	f001 fb76 	bl	8006b00 <USB_EPStartXfer>
 8005414:	e7fa      	b.n	800540c <HAL_PCD_EP_Transmit+0x36>

08005416 <HAL_PCD_EP_SetStall>:
{
 8005416:	b538      	push	{r3, r4, r5, lr}
 8005418:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 800541c:	6843      	ldr	r3, [r0, #4]
{
 800541e:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8005420:	429d      	cmp	r5, r3
 8005422:	d82e      	bhi.n	8005482 <HAL_PCD_EP_SetStall+0x6c>
  if ((0x80U & ep_addr) == 0x80U)
 8005424:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005428:	f04f 021c 	mov.w	r2, #28
 800542c:	d01f      	beq.n	800546e <HAL_PCD_EP_SetStall+0x58>
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800542e:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8005432:	fb02 0105 	mla	r1, r2, r5, r0
 8005436:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8005438:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 800543a:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 800543e:	2201      	movs	r2, #1
  ep->num = ep_addr & 0xFU;
 8005440:	701d      	strb	r5, [r3, #0]
  ep->is_stall = 1U;
 8005442:	709a      	strb	r2, [r3, #2]
  __HAL_LOCK(hpcd);
 8005444:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8005448:	4291      	cmp	r1, r2
 800544a:	d01c      	beq.n	8005486 <HAL_PCD_EP_SetStall+0x70>
 800544c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005450:	4619      	mov	r1, r3
 8005452:	6820      	ldr	r0, [r4, #0]
 8005454:	f001 fc2e 	bl	8006cb4 <USB_EPSetStall>
  if((ep_addr & 0xFU) == 0U)
 8005458:	b92d      	cbnz	r5, 8005466 <HAL_PCD_EP_SetStall+0x50>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800545a:	f504 7270 	add.w	r2, r4, #960	; 0x3c0
 800545e:	7c21      	ldrb	r1, [r4, #16]
 8005460:	6820      	ldr	r0, [r4, #0]
 8005462:	f001 fcf1 	bl	8006e48 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8005466:	2000      	movs	r0, #0
 8005468:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800546c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 800546e:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8005472:	fb02 0101 	mla	r1, r2, r1, r0
 8005476:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8005478:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800547c:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8005480:	e7dd      	b.n	800543e <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8005482:	2001      	movs	r0, #1
 8005484:	e7f2      	b.n	800546c <HAL_PCD_EP_SetStall+0x56>
  __HAL_LOCK(hpcd);
 8005486:	2002      	movs	r0, #2
 8005488:	e7f0      	b.n	800546c <HAL_PCD_EP_SetStall+0x56>

0800548a <HAL_PCD_EP_ClrStall>:
{
 800548a:	b538      	push	{r3, r4, r5, lr}
 800548c:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005490:	6843      	ldr	r3, [r0, #4]
{
 8005492:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005494:	429a      	cmp	r2, r3
 8005496:	d82a      	bhi.n	80054ee <HAL_PCD_EP_ClrStall+0x64>
 8005498:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800549c:	f011 0f80 	tst.w	r1, #128	; 0x80
 80054a0:	f04f 001c 	mov.w	r0, #28
 80054a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80054a8:	d018      	beq.n	80054dc <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80054aa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 80054ae:	fb00 4002 	mla	r0, r0, r2, r4
 80054b2:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80054b4:	4421      	add	r1, r4
    ep->is_in = 1U;
 80054b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 80054ba:	2500      	movs	r5, #0
  ep->num = ep_addr & 0xFU;
 80054bc:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 80054be:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80054c0:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d014      	beq.n	80054f2 <HAL_PCD_EP_ClrStall+0x68>
 80054c8:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054ca:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80054cc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054d0:	f001 fc1b 	bl	8006d0a <USB_EPClearStall>
  return HAL_OK;
 80054d4:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80054d6:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 80054da:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr &0xFU];
 80054dc:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80054e0:	fb00 4002 	mla	r0, r0, r2, r4
 80054e4:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr &0xFU];
 80054e6:	4421      	add	r1, r4
    ep->is_in = 0U;
 80054e8:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 80054ec:	e7e5      	b.n	80054ba <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 80054ee:	2001      	movs	r0, #1
 80054f0:	e7f3      	b.n	80054da <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 80054f2:	2002      	movs	r0, #2
 80054f4:	e7f1      	b.n	80054da <HAL_PCD_EP_ClrStall+0x50>

080054f6 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 80054f6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80054fa:	2b01      	cmp	r3, #1
{
 80054fc:	b510      	push	{r4, lr}
 80054fe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005500:	d010      	beq.n	8005524 <HAL_PCD_EP_Flush+0x2e>
 8005502:	2301      	movs	r3, #1
 8005504:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((ep_addr & 0x80U) == 0x80U)
 8005508:	060b      	lsls	r3, r1, #24
 800550a:	6800      	ldr	r0, [r0, #0]
 800550c:	d507      	bpl.n	800551e <HAL_PCD_EP_Flush+0x28>
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & 0xFU);
 800550e:	f001 010f 	and.w	r1, r1, #15
 8005512:	f001 f90f 	bl	8006734 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 8005516:	2000      	movs	r0, #0
 8005518:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800551c:	bd10      	pop	{r4, pc}
    (void)USB_FlushRxFifo(hpcd->Instance);
 800551e:	f001 f91b 	bl	8006758 <USB_FlushRxFifo>
 8005522:	e7f8      	b.n	8005516 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 8005524:	2002      	movs	r0, #2
 8005526:	e7f9      	b.n	800551c <HAL_PCD_EP_Flush+0x26>

08005528 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005528:	6800      	ldr	r0, [r0, #0]
 800552a:	0412      	lsls	r2, r2, #16
{
 800552c:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800552e:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if(fifo == 0U)
 8005530:	b919      	cbnz	r1, 800553a <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005532:	4322      	orrs	r2, r4
 8005534:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8005536:	2000      	movs	r0, #0
 8005538:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800553a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800553c:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800553e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8005542:	2300      	movs	r3, #0
 8005544:	1c5e      	adds	r6, r3, #1
 8005546:	b2db      	uxtb	r3, r3
 8005548:	429d      	cmp	r5, r3
 800554a:	d805      	bhi.n	8005558 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800554c:	313f      	adds	r1, #63	; 0x3f
 800554e:	4322      	orrs	r2, r4
 8005550:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005554:	6042      	str	r2, [r0, #4]
 8005556:	e7ee      	b.n	8005536 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005558:	3340      	adds	r3, #64	; 0x40
 800555a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005564:	4633      	mov	r3, r6
 8005566:	e7ed      	b.n	8005544 <HAL_PCDEx_SetTxFiFo+0x1c>

08005568 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8005568:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 800556a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800556c:	6259      	str	r1, [r3, #36]	; 0x24
}
 800556e:	4770      	bx	lr

08005570 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8005570:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005572:	6802      	ldr	r2, [r0, #0]
{
 8005574:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8005576:	f8c0 13f8 	str.w	r1, [r0, #1016]	; 0x3f8
  hpcd->LPM_State = LPM_L0;
 800557a:	2000      	movs	r0, #0
 800557c:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005580:	6993      	ldr	r3, [r2, #24]
 8005582:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005586:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005588:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800558a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800558e:	f043 0303 	orr.w	r3, r3, #3
 8005592:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8005594:	4770      	bx	lr

08005596 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005596:	4770      	bx	lr

08005598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800559c:	4604      	mov	r4, r0
 800559e:	b918      	cbnz	r0, 80055a8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80055a0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80055a2:	b002      	add	sp, #8
 80055a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a8:	6803      	ldr	r3, [r0, #0]
 80055aa:	07d8      	lsls	r0, r3, #31
 80055ac:	d410      	bmi.n	80055d0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	0799      	lsls	r1, r3, #30
 80055b2:	d45e      	bmi.n	8005672 <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	0719      	lsls	r1, r3, #28
 80055b8:	f100 80a3 	bmi.w	8005702 <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	075a      	lsls	r2, r3, #29
 80055c0:	f100 80c4 	bmi.w	800574c <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c4:	69a2      	ldr	r2, [r4, #24]
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	f040 812e 	bne.w	8005828 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 80055cc:	2000      	movs	r0, #0
 80055ce:	e7e8      	b.n	80055a2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055d0:	4b93      	ldr	r3, [pc, #588]	; (8005820 <HAL_RCC_OscConfig+0x288>)
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	f002 020c 	and.w	r2, r2, #12
 80055d8:	2a04      	cmp	r2, #4
 80055da:	d007      	beq.n	80055ec <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	f002 020c 	and.w	r2, r2, #12
 80055e2:	2a08      	cmp	r2, #8
 80055e4:	d10a      	bne.n	80055fc <HAL_RCC_OscConfig+0x64>
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	025a      	lsls	r2, r3, #9
 80055ea:	d507      	bpl.n	80055fc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ec:	4b8c      	ldr	r3, [pc, #560]	; (8005820 <HAL_RCC_OscConfig+0x288>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	039b      	lsls	r3, r3, #14
 80055f2:	d5dc      	bpl.n	80055ae <HAL_RCC_OscConfig+0x16>
 80055f4:	6863      	ldr	r3, [r4, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1d9      	bne.n	80055ae <HAL_RCC_OscConfig+0x16>
 80055fa:	e7d1      	b.n	80055a0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055fc:	6863      	ldr	r3, [r4, #4]
 80055fe:	4d88      	ldr	r5, [pc, #544]	; (8005820 <HAL_RCC_OscConfig+0x288>)
 8005600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005604:	d111      	bne.n	800562a <HAL_RCC_OscConfig+0x92>
 8005606:	682b      	ldr	r3, [r5, #0]
 8005608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800560c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800560e:	f7fe f911 	bl	8003834 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005612:	4d83      	ldr	r5, [pc, #524]	; (8005820 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8005614:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005616:	682b      	ldr	r3, [r5, #0]
 8005618:	039f      	lsls	r7, r3, #14
 800561a:	d4c8      	bmi.n	80055ae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800561c:	f7fe f90a 	bl	8003834 <HAL_GetTick>
 8005620:	1b80      	subs	r0, r0, r6
 8005622:	2864      	cmp	r0, #100	; 0x64
 8005624:	d9f7      	bls.n	8005616 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8005626:	2003      	movs	r0, #3
 8005628:	e7bb      	b.n	80055a2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800562a:	b99b      	cbnz	r3, 8005654 <HAL_RCC_OscConfig+0xbc>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005632:	602b      	str	r3, [r5, #0]
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800563a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800563c:	f7fe f8fa 	bl	8003834 <HAL_GetTick>
 8005640:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005642:	682b      	ldr	r3, [r5, #0]
 8005644:	0398      	lsls	r0, r3, #14
 8005646:	d5b2      	bpl.n	80055ae <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005648:	f7fe f8f4 	bl	8003834 <HAL_GetTick>
 800564c:	1b80      	subs	r0, r0, r6
 800564e:	2864      	cmp	r0, #100	; 0x64
 8005650:	d9f7      	bls.n	8005642 <HAL_RCC_OscConfig+0xaa>
 8005652:	e7e8      	b.n	8005626 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	d103      	bne.n	8005664 <HAL_RCC_OscConfig+0xcc>
 800565c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005660:	602b      	str	r3, [r5, #0]
 8005662:	e7d0      	b.n	8005606 <HAL_RCC_OscConfig+0x6e>
 8005664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005668:	602b      	str	r3, [r5, #0]
 800566a:	682b      	ldr	r3, [r5, #0]
 800566c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005670:	e7cc      	b.n	800560c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005672:	4b6b      	ldr	r3, [pc, #428]	; (8005820 <HAL_RCC_OscConfig+0x288>)
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	f012 0f0c 	tst.w	r2, #12
 800567a:	d007      	beq.n	800568c <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	f002 020c 	and.w	r2, r2, #12
 8005682:	2a08      	cmp	r2, #8
 8005684:	d111      	bne.n	80056aa <HAL_RCC_OscConfig+0x112>
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	0259      	lsls	r1, r3, #9
 800568a:	d40e      	bmi.n	80056aa <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800568c:	4b64      	ldr	r3, [pc, #400]	; (8005820 <HAL_RCC_OscConfig+0x288>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	0792      	lsls	r2, r2, #30
 8005692:	d502      	bpl.n	800569a <HAL_RCC_OscConfig+0x102>
 8005694:	68e2      	ldr	r2, [r4, #12]
 8005696:	2a01      	cmp	r2, #1
 8005698:	d182      	bne.n	80055a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	6921      	ldr	r1, [r4, #16]
 800569e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80056a2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80056a6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a8:	e784      	b.n	80055b4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056aa:	68e3      	ldr	r3, [r4, #12]
 80056ac:	4d5c      	ldr	r5, [pc, #368]	; (8005820 <HAL_RCC_OscConfig+0x288>)
 80056ae:	b1bb      	cbz	r3, 80056e0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80056b8:	f7fe f8bc 	bl	8003834 <HAL_GetTick>
 80056bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056be:	682b      	ldr	r3, [r5, #0]
 80056c0:	079f      	lsls	r7, r3, #30
 80056c2:	d507      	bpl.n	80056d4 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	6922      	ldr	r2, [r4, #16]
 80056c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80056cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80056d0:	602b      	str	r3, [r5, #0]
 80056d2:	e76f      	b.n	80055b4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d4:	f7fe f8ae 	bl	8003834 <HAL_GetTick>
 80056d8:	1b80      	subs	r0, r0, r6
 80056da:	2802      	cmp	r0, #2
 80056dc:	d9ef      	bls.n	80056be <HAL_RCC_OscConfig+0x126>
 80056de:	e7a2      	b.n	8005626 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	f023 0301 	bic.w	r3, r3, #1
 80056e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80056e8:	f7fe f8a4 	bl	8003834 <HAL_GetTick>
 80056ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ee:	682b      	ldr	r3, [r5, #0]
 80056f0:	0798      	lsls	r0, r3, #30
 80056f2:	f57f af5f 	bpl.w	80055b4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056f6:	f7fe f89d 	bl	8003834 <HAL_GetTick>
 80056fa:	1b80      	subs	r0, r0, r6
 80056fc:	2802      	cmp	r0, #2
 80056fe:	d9f6      	bls.n	80056ee <HAL_RCC_OscConfig+0x156>
 8005700:	e791      	b.n	8005626 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005702:	6963      	ldr	r3, [r4, #20]
 8005704:	4d46      	ldr	r5, [pc, #280]	; (8005820 <HAL_RCC_OscConfig+0x288>)
 8005706:	b183      	cbz	r3, 800572a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8005708:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005710:	f7fe f890 	bl	8003834 <HAL_GetTick>
 8005714:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005716:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005718:	079b      	lsls	r3, r3, #30
 800571a:	f53f af4f 	bmi.w	80055bc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800571e:	f7fe f889 	bl	8003834 <HAL_GetTick>
 8005722:	1b80      	subs	r0, r0, r6
 8005724:	2802      	cmp	r0, #2
 8005726:	d9f6      	bls.n	8005716 <HAL_RCC_OscConfig+0x17e>
 8005728:	e77d      	b.n	8005626 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800572a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005732:	f7fe f87f 	bl	8003834 <HAL_GetTick>
 8005736:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005738:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800573a:	079f      	lsls	r7, r3, #30
 800573c:	f57f af3e 	bpl.w	80055bc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005740:	f7fe f878 	bl	8003834 <HAL_GetTick>
 8005744:	1b80      	subs	r0, r0, r6
 8005746:	2802      	cmp	r0, #2
 8005748:	d9f6      	bls.n	8005738 <HAL_RCC_OscConfig+0x1a0>
 800574a:	e76c      	b.n	8005626 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800574c:	4b34      	ldr	r3, [pc, #208]	; (8005820 <HAL_RCC_OscConfig+0x288>)
 800574e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005750:	00d0      	lsls	r0, r2, #3
 8005752:	d427      	bmi.n	80057a4 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8005756:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005758:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800575c:	641a      	str	r2, [r3, #64]	; 0x40
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005768:	4d2e      	ldr	r5, [pc, #184]	; (8005824 <HAL_RCC_OscConfig+0x28c>)
 800576a:	682b      	ldr	r3, [r5, #0]
 800576c:	05d9      	lsls	r1, r3, #23
 800576e:	d51b      	bpl.n	80057a8 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005770:	68a3      	ldr	r3, [r4, #8]
 8005772:	4d2b      	ldr	r5, [pc, #172]	; (8005820 <HAL_RCC_OscConfig+0x288>)
 8005774:	2b01      	cmp	r3, #1
 8005776:	d127      	bne.n	80057c8 <HAL_RCC_OscConfig+0x230>
 8005778:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800577a:	f043 0301 	orr.w	r3, r3, #1
 800577e:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005780:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005784:	f7fe f856 	bl	8003834 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005788:	4f25      	ldr	r7, [pc, #148]	; (8005820 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 800578a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800578e:	079b      	lsls	r3, r3, #30
 8005790:	d53f      	bpl.n	8005812 <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 8005792:	2e00      	cmp	r6, #0
 8005794:	f43f af16 	beq.w	80055c4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005798:	4a21      	ldr	r2, [pc, #132]	; (8005820 <HAL_RCC_OscConfig+0x288>)
 800579a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800579c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a0:	6413      	str	r3, [r2, #64]	; 0x40
 80057a2:	e70f      	b.n	80055c4 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 80057a4:	2600      	movs	r6, #0
 80057a6:	e7df      	b.n	8005768 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80057b0:	f7fe f840 	bl	8003834 <HAL_GetTick>
 80057b4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057b6:	682b      	ldr	r3, [r5, #0]
 80057b8:	05da      	lsls	r2, r3, #23
 80057ba:	d4d9      	bmi.n	8005770 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057bc:	f7fe f83a 	bl	8003834 <HAL_GetTick>
 80057c0:	1bc0      	subs	r0, r0, r7
 80057c2:	2864      	cmp	r0, #100	; 0x64
 80057c4:	d9f7      	bls.n	80057b6 <HAL_RCC_OscConfig+0x21e>
 80057c6:	e72e      	b.n	8005626 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057c8:	b9ab      	cbnz	r3, 80057f6 <HAL_RCC_OscConfig+0x25e>
 80057ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	672b      	str	r3, [r5, #112]	; 0x70
 80057d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80057d8:	f023 0304 	bic.w	r3, r3, #4
 80057dc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80057de:	f7fe f829 	bl	8003834 <HAL_GetTick>
 80057e2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80057e6:	0798      	lsls	r0, r3, #30
 80057e8:	d5d3      	bpl.n	8005792 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ea:	f7fe f823 	bl	8003834 <HAL_GetTick>
 80057ee:	1bc0      	subs	r0, r0, r7
 80057f0:	4540      	cmp	r0, r8
 80057f2:	d9f7      	bls.n	80057e4 <HAL_RCC_OscConfig+0x24c>
 80057f4:	e717      	b.n	8005626 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f6:	2b05      	cmp	r3, #5
 80057f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80057fa:	d103      	bne.n	8005804 <HAL_RCC_OscConfig+0x26c>
 80057fc:	f043 0304 	orr.w	r3, r3, #4
 8005800:	672b      	str	r3, [r5, #112]	; 0x70
 8005802:	e7b9      	b.n	8005778 <HAL_RCC_OscConfig+0x1e0>
 8005804:	f023 0301 	bic.w	r3, r3, #1
 8005808:	672b      	str	r3, [r5, #112]	; 0x70
 800580a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800580c:	f023 0304 	bic.w	r3, r3, #4
 8005810:	e7b5      	b.n	800577e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005812:	f7fe f80f 	bl	8003834 <HAL_GetTick>
 8005816:	eba0 0008 	sub.w	r0, r0, r8
 800581a:	42a8      	cmp	r0, r5
 800581c:	d9b6      	bls.n	800578c <HAL_RCC_OscConfig+0x1f4>
 800581e:	e702      	b.n	8005626 <HAL_RCC_OscConfig+0x8e>
 8005820:	40023800 	.word	0x40023800
 8005824:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005828:	4d24      	ldr	r5, [pc, #144]	; (80058bc <HAL_RCC_OscConfig+0x324>)
 800582a:	68ab      	ldr	r3, [r5, #8]
 800582c:	f003 030c 	and.w	r3, r3, #12
 8005830:	2b08      	cmp	r3, #8
 8005832:	f43f aeb5 	beq.w	80055a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8005836:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005838:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800583a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800583e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005840:	d12f      	bne.n	80058a2 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8005842:	f7fd fff7 	bl	8003834 <HAL_GetTick>
 8005846:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	0199      	lsls	r1, r3, #6
 800584c:	d423      	bmi.n	8005896 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800584e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005852:	4313      	orrs	r3, r2
 8005854:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005856:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800585a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800585c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005860:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005862:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005866:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005868:	4c14      	ldr	r4, [pc, #80]	; (80058bc <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800586a:	0852      	lsrs	r2, r2, #1
 800586c:	3a01      	subs	r2, #1
 800586e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005872:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800587a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800587c:	f7fd ffda 	bl	8003834 <HAL_GetTick>
 8005880:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	019a      	lsls	r2, r3, #6
 8005886:	f53f aea1 	bmi.w	80055cc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800588a:	f7fd ffd3 	bl	8003834 <HAL_GetTick>
 800588e:	1b40      	subs	r0, r0, r5
 8005890:	2802      	cmp	r0, #2
 8005892:	d9f6      	bls.n	8005882 <HAL_RCC_OscConfig+0x2ea>
 8005894:	e6c7      	b.n	8005626 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005896:	f7fd ffcd 	bl	8003834 <HAL_GetTick>
 800589a:	1b80      	subs	r0, r0, r6
 800589c:	2802      	cmp	r0, #2
 800589e:	d9d3      	bls.n	8005848 <HAL_RCC_OscConfig+0x2b0>
 80058a0:	e6c1      	b.n	8005626 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80058a2:	f7fd ffc7 	bl	8003834 <HAL_GetTick>
 80058a6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	019b      	lsls	r3, r3, #6
 80058ac:	f57f ae8e 	bpl.w	80055cc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b0:	f7fd ffc0 	bl	8003834 <HAL_GetTick>
 80058b4:	1b00      	subs	r0, r0, r4
 80058b6:	2802      	cmp	r0, #2
 80058b8:	d9f6      	bls.n	80058a8 <HAL_RCC_OscConfig+0x310>
 80058ba:	e6b4      	b.n	8005626 <HAL_RCC_OscConfig+0x8e>
 80058bc:	40023800 	.word	0x40023800

080058c0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058c0:	4913      	ldr	r1, [pc, #76]	; (8005910 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80058c2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058c4:	688b      	ldr	r3, [r1, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
 80058ca:	2b04      	cmp	r3, #4
 80058cc:	d003      	beq.n	80058d6 <HAL_RCC_GetSysClockFreq+0x16>
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d003      	beq.n	80058da <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058d2:	4810      	ldr	r0, [pc, #64]	; (8005914 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 80058d4:	e000      	b.n	80058d8 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 80058d6:	4810      	ldr	r0, [pc, #64]	; (8005918 <HAL_RCC_GetSysClockFreq+0x58>)
}
 80058d8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058da:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80058dc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058de:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80058e4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058e8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80058ec:	bf1a      	itte	ne
 80058ee:	480a      	ldrne	r0, [pc, #40]	; (8005918 <HAL_RCC_GetSysClockFreq+0x58>)
 80058f0:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058f2:	4808      	ldreq	r0, [pc, #32]	; (8005914 <HAL_RCC_GetSysClockFreq+0x54>)
 80058f4:	fba1 0100 	umull	r0, r1, r1, r0
 80058f8:	f7fa fc9e 	bl	8000238 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <HAL_RCC_GetSysClockFreq+0x50>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005904:	3301      	adds	r3, #1
 8005906:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8005908:	fbb0 f0f3 	udiv	r0, r0, r3
 800590c:	e7e4      	b.n	80058d8 <HAL_RCC_GetSysClockFreq+0x18>
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800
 8005914:	00f42400 	.word	0x00f42400
 8005918:	017d7840 	.word	0x017d7840

0800591c <HAL_RCC_ClockConfig>:
{
 800591c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005920:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005922:	4604      	mov	r4, r0
 8005924:	b910      	cbnz	r0, 800592c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005926:	2001      	movs	r0, #1
}
 8005928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800592c:	4a45      	ldr	r2, [pc, #276]	; (8005a44 <HAL_RCC_ClockConfig+0x128>)
 800592e:	6813      	ldr	r3, [r2, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	428b      	cmp	r3, r1
 8005936:	d327      	bcc.n	8005988 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005938:	6821      	ldr	r1, [r4, #0]
 800593a:	078f      	lsls	r7, r1, #30
 800593c:	d42f      	bmi.n	800599e <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800593e:	07c8      	lsls	r0, r1, #31
 8005940:	d442      	bmi.n	80059c8 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005942:	4a40      	ldr	r2, [pc, #256]	; (8005a44 <HAL_RCC_ClockConfig+0x128>)
 8005944:	6813      	ldr	r3, [r2, #0]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	42ab      	cmp	r3, r5
 800594c:	d865      	bhi.n	8005a1a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594e:	6822      	ldr	r2, [r4, #0]
 8005950:	0751      	lsls	r1, r2, #29
 8005952:	d46e      	bmi.n	8005a32 <HAL_RCC_ClockConfig+0x116>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005954:	0713      	lsls	r3, r2, #28
 8005956:	d507      	bpl.n	8005968 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005958:	4a3b      	ldr	r2, [pc, #236]	; (8005a48 <HAL_RCC_ClockConfig+0x12c>)
 800595a:	6921      	ldr	r1, [r4, #16]
 800595c:	6893      	ldr	r3, [r2, #8]
 800595e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005962:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005966:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005968:	f7ff ffaa 	bl	80058c0 <HAL_RCC_GetSysClockFreq>
 800596c:	4b36      	ldr	r3, [pc, #216]	; (8005a48 <HAL_RCC_ClockConfig+0x12c>)
 800596e:	4a37      	ldr	r2, [pc, #220]	; (8005a4c <HAL_RCC_ClockConfig+0x130>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005976:	5cd3      	ldrb	r3, [r2, r3]
 8005978:	40d8      	lsrs	r0, r3
 800597a:	4b35      	ldr	r3, [pc, #212]	; (8005a50 <HAL_RCC_ClockConfig+0x134>)
 800597c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800597e:	2000      	movs	r0, #0
 8005980:	f7fd ff18 	bl	80037b4 <HAL_InitTick>
  return HAL_OK;
 8005984:	2000      	movs	r0, #0
 8005986:	e7cf      	b.n	8005928 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005988:	6813      	ldr	r3, [r2, #0]
 800598a:	f023 030f 	bic.w	r3, r3, #15
 800598e:	430b      	orrs	r3, r1
 8005990:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005992:	6813      	ldr	r3, [r2, #0]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	428b      	cmp	r3, r1
 800599a:	d1c4      	bne.n	8005926 <HAL_RCC_ClockConfig+0xa>
 800599c:	e7cc      	b.n	8005938 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800599e:	f011 0f04 	tst.w	r1, #4
 80059a2:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <HAL_RCC_ClockConfig+0x12c>)
 80059a4:	d003      	beq.n	80059ae <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80059ac:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ae:	070e      	lsls	r6, r1, #28
 80059b0:	d503      	bpl.n	80059ba <HAL_RCC_ClockConfig+0x9e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80059b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	68a0      	ldr	r0, [r4, #8]
 80059be:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80059c2:	4302      	orrs	r2, r0
 80059c4:	609a      	str	r2, [r3, #8]
 80059c6:	e7ba      	b.n	800593e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c8:	6861      	ldr	r1, [r4, #4]
 80059ca:	4b1f      	ldr	r3, [pc, #124]	; (8005a48 <HAL_RCC_ClockConfig+0x12c>)
 80059cc:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ce:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059d0:	d11b      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d6:	d0a6      	beq.n	8005926 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059d8:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059da:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059de:	4e1a      	ldr	r6, [pc, #104]	; (8005a48 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e0:	f022 0203 	bic.w	r2, r2, #3
 80059e4:	430a      	orrs	r2, r1
 80059e6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80059e8:	f7fd ff24 	bl	8003834 <HAL_GetTick>
 80059ec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ee:	68b3      	ldr	r3, [r6, #8]
 80059f0:	6862      	ldr	r2, [r4, #4]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80059fa:	d0a2      	beq.n	8005942 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fc:	f7fd ff1a 	bl	8003834 <HAL_GetTick>
 8005a00:	1bc0      	subs	r0, r0, r7
 8005a02:	4540      	cmp	r0, r8
 8005a04:	d9f3      	bls.n	80059ee <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8005a06:	2003      	movs	r0, #3
 8005a08:	e78e      	b.n	8005928 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a0a:	2902      	cmp	r1, #2
 8005a0c:	d102      	bne.n	8005a14 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005a12:	e7e0      	b.n	80059d6 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a14:	f012 0f02 	tst.w	r2, #2
 8005a18:	e7dd      	b.n	80059d6 <HAL_RCC_ClockConfig+0xba>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	f023 030f 	bic.w	r3, r3, #15
 8005a20:	432b      	orrs	r3, r5
 8005a22:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a24:	6813      	ldr	r3, [r2, #0]
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	42ab      	cmp	r3, r5
 8005a2c:	f47f af7b 	bne.w	8005926 <HAL_RCC_ClockConfig+0xa>
 8005a30:	e78d      	b.n	800594e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a32:	4905      	ldr	r1, [pc, #20]	; (8005a48 <HAL_RCC_ClockConfig+0x12c>)
 8005a34:	68e0      	ldr	r0, [r4, #12]
 8005a36:	688b      	ldr	r3, [r1, #8]
 8005a38:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005a3c:	4303      	orrs	r3, r0
 8005a3e:	608b      	str	r3, [r1, #8]
 8005a40:	e788      	b.n	8005954 <HAL_RCC_ClockConfig+0x38>
 8005a42:	bf00      	nop
 8005a44:	40023c00 	.word	0x40023c00
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	08007564 	.word	0x08007564
 8005a50:	2000014c 	.word	0x2000014c

08005a54 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005a54:	4b01      	ldr	r3, [pc, #4]	; (8005a5c <HAL_RCC_GetHCLKFreq+0x8>)
 8005a56:	6818      	ldr	r0, [r3, #0]
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	2000014c 	.word	0x2000014c

08005a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a64:	6802      	ldr	r2, [r0, #0]
{
 8005a66:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005a68:	f012 0601 	ands.w	r6, r2, #1
 8005a6c:	d00b      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a6e:	4bba      	ldr	r3, [pc, #744]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005a70:	6899      	ldr	r1, [r3, #8]
 8005a72:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8005a76:	6099      	str	r1, [r3, #8]
 8005a78:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8005a7a:	6899      	ldr	r1, [r3, #8]
 8005a7c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a7e:	fab6 f686 	clz	r6, r6
 8005a82:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a84:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a86:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8005a8a:	d012      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a8c:	49b2      	ldr	r1, [pc, #712]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005a8e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005a90:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a94:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a98:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8005a9c:	bf08      	it	eq
 8005a9e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005aa0:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005aa4:	bf16      	itet	ne
 8005aa6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8005aaa:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005aac:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005aae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005ab2:	02d7      	lsls	r7, r2, #11
 8005ab4:	d510      	bpl.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ab6:	48a8      	ldr	r0, [pc, #672]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005ab8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005aba:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005abe:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ac2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005ac6:	ea43 0301 	orr.w	r3, r3, r1
 8005aca:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005ace:	f000 81a9 	beq.w	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8005ad2:	2900      	cmp	r1, #0
 8005ad4:	bf08      	it	eq
 8005ad6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8005ad8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8005adc:	bf18      	it	ne
 8005ade:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ae0:	0690      	lsls	r0, r2, #26
 8005ae2:	d531      	bpl.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ae4:	4b9c      	ldr	r3, [pc, #624]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ae6:	4f9d      	ldr	r7, [pc, #628]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b00:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b02:	f7fd fe97 	bl	8003834 <HAL_GetTick>
 8005b06:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	05d9      	lsls	r1, r3, #23
 8005b0c:	f140 818c 	bpl.w	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b10:	4f91      	ldr	r7, [pc, #580]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b14:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005b18:	f040 8191 	bne.w	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b1e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005b22:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005b26:	4a8c      	ldr	r2, [pc, #560]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b28:	f040 81af 	bne.w	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8005b2c:	6891      	ldr	r1, [r2, #8]
 8005b2e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8005b32:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005b36:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8005b3a:	4301      	orrs	r1, r0
 8005b3c:	6091      	str	r1, [r2, #8]
 8005b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b42:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8005b44:	430b      	orrs	r3, r1
 8005b46:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	06df      	lsls	r7, r3, #27
 8005b4c:	d50c      	bpl.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b4e:	4a82      	ldr	r2, [pc, #520]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b50:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005b54:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005b58:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8005b5c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8005b60:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005b62:	4301      	orrs	r1, r0
 8005b64:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b68:	0458      	lsls	r0, r3, #17
 8005b6a:	d508      	bpl.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b6c:	497a      	ldr	r1, [pc, #488]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b6e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005b70:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005b74:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005b78:	4302      	orrs	r2, r0
 8005b7a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b7e:	0419      	lsls	r1, r3, #16
 8005b80:	d508      	bpl.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b82:	4975      	ldr	r1, [pc, #468]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b84:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005b86:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005b8a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005b8e:	4302      	orrs	r2, r0
 8005b90:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b94:	03da      	lsls	r2, r3, #15
 8005b96:	d508      	bpl.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b98:	496f      	ldr	r1, [pc, #444]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005b9a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005b9c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005ba0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005ba4:	4302      	orrs	r2, r0
 8005ba6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005baa:	039f      	lsls	r7, r3, #14
 8005bac:	d508      	bpl.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bae:	496a      	ldr	r1, [pc, #424]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005bb0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005bb2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005bb6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005bba:	4302      	orrs	r2, r0
 8005bbc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bc0:	0658      	lsls	r0, r3, #25
 8005bc2:	d508      	bpl.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bc4:	4964      	ldr	r1, [pc, #400]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005bc6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005bc8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005bcc:	f022 0203 	bic.w	r2, r2, #3
 8005bd0:	4302      	orrs	r2, r0
 8005bd2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bd6:	0619      	lsls	r1, r3, #24
 8005bd8:	d508      	bpl.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bda:	495f      	ldr	r1, [pc, #380]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005bdc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005bde:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005be2:	f022 020c 	bic.w	r2, r2, #12
 8005be6:	4302      	orrs	r2, r0
 8005be8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bec:	05da      	lsls	r2, r3, #23
 8005bee:	d508      	bpl.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bf0:	4959      	ldr	r1, [pc, #356]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005bf2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005bf4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005bf8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8005bfc:	4302      	orrs	r2, r0
 8005bfe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c02:	059f      	lsls	r7, r3, #22
 8005c04:	d508      	bpl.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c06:	4954      	ldr	r1, [pc, #336]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c08:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005c0a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c0e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005c12:	4302      	orrs	r2, r0
 8005c14:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c18:	0558      	lsls	r0, r3, #21
 8005c1a:	d508      	bpl.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c1c:	494e      	ldr	r1, [pc, #312]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c20:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c28:	4302      	orrs	r2, r0
 8005c2a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005c2e:	0519      	lsls	r1, r3, #20
 8005c30:	d508      	bpl.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005c32:	4949      	ldr	r1, [pc, #292]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c36:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c3e:	4302      	orrs	r2, r0
 8005c40:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c44:	04da      	lsls	r2, r3, #19
 8005c46:	d508      	bpl.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c48:	4943      	ldr	r1, [pc, #268]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c4a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005c4c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c50:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005c54:	4302      	orrs	r2, r0
 8005c56:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005c5a:	049f      	lsls	r7, r3, #18
 8005c5c:	d508      	bpl.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005c5e:	493e      	ldr	r1, [pc, #248]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c60:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005c62:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c66:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005c6a:	4302      	orrs	r2, r0
 8005c6c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c70:	0258      	lsls	r0, r3, #9
 8005c72:	d508      	bpl.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c74:	4938      	ldr	r1, [pc, #224]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c76:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005c78:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005c7c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005c80:	4302      	orrs	r2, r0
 8005c82:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c86:	0299      	lsls	r1, r3, #10
 8005c88:	d50c      	bpl.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c8a:	4833      	ldr	r0, [pc, #204]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005c8c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005c8e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8005c92:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c96:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8005c9a:	bf08      	it	eq
 8005c9c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8005ca4:	f013 0f08 	tst.w	r3, #8
 8005ca8:	bf18      	it	ne
 8005caa:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cac:	035a      	lsls	r2, r3, #13
 8005cae:	d508      	bpl.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cb0:	4929      	ldr	r1, [pc, #164]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005cb2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005cb4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005cb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005cbc:	4302      	orrs	r2, r0
 8005cbe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005cc2:	021f      	lsls	r7, r3, #8
 8005cc4:	d509      	bpl.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005cc6:	4924      	ldr	r1, [pc, #144]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005cc8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005ccc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005cd0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005cd4:	4302      	orrs	r2, r0
 8005cd6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005cda:	0158      	lsls	r0, r3, #5
 8005cdc:	d509      	bpl.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005cde:	491e      	ldr	r1, [pc, #120]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005ce0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8005ce4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005ce8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005cec:	4302      	orrs	r2, r0
 8005cee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cf2:	0119      	lsls	r1, r3, #4
 8005cf4:	d509      	bpl.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cf6:	4918      	ldr	r1, [pc, #96]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005cf8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8005cfc:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8005d00:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005d04:	4302      	orrs	r2, r0
 8005d06:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005d0a:	00da      	lsls	r2, r3, #3
 8005d0c:	d509      	bpl.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005d0e:	4912      	ldr	r1, [pc, #72]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005d10:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8005d14:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8005d18:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005d1c:	4302      	orrs	r2, r0
 8005d1e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005d22:	2e01      	cmp	r6, #1
 8005d24:	f000 80b5 	beq.w	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005d28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d2c:	f000 80b1 	beq.w	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005d30:	2d01      	cmp	r5, #1
 8005d32:	d175      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d34:	4d08      	ldr	r5, [pc, #32]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005d36:	682b      	ldr	r3, [r5, #0]
 8005d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3e:	f7fd fd79 	bl	8003834 <HAL_GetTick>
 8005d42:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	009f      	lsls	r7, r3, #2
 8005d48:	f100 8127 	bmi.w	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d4c:	6821      	ldr	r1, [r4, #0]
 8005d4e:	030e      	lsls	r6, r1, #12
 8005d50:	d506      	bpl.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005d52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d54:	b143      	cbz	r3, 8005d68 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005d56:	e003      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	40007000 	.word	0x40007000
 8005d60:	02cd      	lsls	r5, r1, #11
 8005d62:	d51d      	bpl.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d66:	b9db      	cbnz	r3, 8005da0 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d68:	4a93      	ldr	r2, [pc, #588]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8005d6a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d6e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d76:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005d7a:	4303      	orrs	r3, r0
 8005d7c:	6960      	ldr	r0, [r4, #20]
 8005d7e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005d82:	69a0      	ldr	r0, [r4, #24]
 8005d84:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d8c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005d90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005d92:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005d96:	3801      	subs	r0, #1
 8005d98:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005d9c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005da0:	0288      	lsls	r0, r1, #10
 8005da2:	d515      	bpl.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8005da4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005daa:	d111      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dac:	4a82      	ldr	r2, [pc, #520]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8005dae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005db2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005db6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005dba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005dbe:	4303      	orrs	r3, r0
 8005dc0:	6960      	ldr	r0, [r4, #20]
 8005dc2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005dc6:	6a20      	ldr	r0, [r4, #32]
 8005dc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005dd0:	070a      	lsls	r2, r1, #28
 8005dd2:	d519      	bpl.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dd4:	4978      	ldr	r1, [pc, #480]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8005dd6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005dda:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005dde:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8005de2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005de6:	4313      	orrs	r3, r2
 8005de8:	6962      	ldr	r2, [r4, #20]
 8005dea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005dee:	69e2      	ldr	r2, [r4, #28]
 8005df0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005df8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8005dfc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005dfe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e08:	4c6b      	ldr	r4, [pc, #428]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e10:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e12:	f7fd fd0f 	bl	8003834 <HAL_GetTick>
 8005e16:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	f140 80c4 	bpl.w	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005e20:	2000      	movs	r0, #0
 8005e22:	e009      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 8005e24:	2601      	movs	r6, #1
 8005e26:	e657      	b.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e28:	f7fd fd04 	bl	8003834 <HAL_GetTick>
 8005e2c:	eba0 0008 	sub.w	r0, r0, r8
 8005e30:	2864      	cmp	r0, #100	; 0x64
 8005e32:	f67f ae69 	bls.w	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8005e36:	2003      	movs	r0, #3
}
 8005e38:	b003      	add	sp, #12
 8005e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005e40:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005e44:	429a      	cmp	r2, r3
 8005e46:	f43f ae69 	beq.w	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005e56:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e58:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005e5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e5e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8005e60:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e64:	07da      	lsls	r2, r3, #31
 8005e66:	f57f ae59 	bpl.w	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8005e6a:	f7fd fce3 	bl	8003834 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e6e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005e72:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e76:	079b      	lsls	r3, r3, #30
 8005e78:	f53f ae50 	bmi.w	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e7c:	f7fd fcda 	bl	8003834 <HAL_GetTick>
 8005e80:	eba0 0008 	sub.w	r0, r0, r8
 8005e84:	4548      	cmp	r0, r9
 8005e86:	d9f5      	bls.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005e88:	e7d5      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e8a:	6891      	ldr	r1, [r2, #8]
 8005e8c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005e90:	e654      	b.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8005e92:	4e49      	ldr	r6, [pc, #292]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8005e94:	6833      	ldr	r3, [r6, #0]
 8005e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e9a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005e9c:	f7fd fcca 	bl	8003834 <HAL_GetTick>
 8005ea0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ea2:	6833      	ldr	r3, [r6, #0]
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	d472      	bmi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	07d7      	lsls	r7, r2, #31
 8005eac:	d512      	bpl.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8005eae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005eb0:	b983      	cbnz	r3, 8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005eb2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005eb6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ebe:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005ec2:	430b      	orrs	r3, r1
 8005ec4:	6861      	ldr	r1, [r4, #4]
 8005ec6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8005eca:	68a1      	ldr	r1, [r4, #8]
 8005ecc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005ed0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ed4:	0316      	lsls	r6, r2, #12
 8005ed6:	d503      	bpl.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005ed8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ede:	d005      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005ee0:	02d0      	lsls	r0, r2, #11
 8005ee2:	d51e      	bpl.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ee4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eea:	d11a      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005eec:	4932      	ldr	r1, [pc, #200]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8005eee:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ef2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005ef6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005efa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005efe:	4303      	orrs	r3, r0
 8005f00:	6860      	ldr	r0, [r4, #4]
 8005f02:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005f06:	68e0      	ldr	r0, [r4, #12]
 8005f08:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f10:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8005f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f16:	f020 001f 	bic.w	r0, r0, #31
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	4303      	orrs	r3, r0
 8005f1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f22:	01d1      	lsls	r1, r2, #7
 8005f24:	d511      	bpl.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f26:	4924      	ldr	r1, [pc, #144]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8005f28:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f2c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005f30:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005f34:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8005f38:	4303      	orrs	r3, r0
 8005f3a:	6860      	ldr	r0, [r4, #4]
 8005f3c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005f40:	6920      	ldr	r0, [r4, #16]
 8005f42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005f46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f4a:	0192      	lsls	r2, r2, #6
 8005f4c:	d50d      	bpl.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f4e:	6923      	ldr	r3, [r4, #16]
 8005f50:	6862      	ldr	r2, [r4, #4]
 8005f52:	041b      	lsls	r3, r3, #16
 8005f54:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005f58:	68e2      	ldr	r2, [r4, #12]
 8005f5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f5e:	68a2      	ldr	r2, [r4, #8]
 8005f60:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005f64:	4a14      	ldr	r2, [pc, #80]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8005f66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005f6a:	4e13      	ldr	r6, [pc, #76]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8005f6c:	6833      	ldr	r3, [r6, #0]
 8005f6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f72:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005f74:	f7fd fc5e 	bl	8003834 <HAL_GetTick>
 8005f78:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f7a:	6833      	ldr	r3, [r6, #0]
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	f53f aed7 	bmi.w	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f82:	f7fd fc57 	bl	8003834 <HAL_GetTick>
 8005f86:	1bc0      	subs	r0, r0, r7
 8005f88:	2864      	cmp	r0, #100	; 0x64
 8005f8a:	d9f6      	bls.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005f8c:	e753      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f8e:	f7fd fc51 	bl	8003834 <HAL_GetTick>
 8005f92:	1bc0      	subs	r0, r0, r7
 8005f94:	2864      	cmp	r0, #100	; 0x64
 8005f96:	d984      	bls.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005f98:	e74d      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f9a:	f7fd fc4b 	bl	8003834 <HAL_GetTick>
 8005f9e:	1b80      	subs	r0, r0, r6
 8005fa0:	2864      	cmp	r0, #100	; 0x64
 8005fa2:	f67f aecf 	bls.w	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8005fa6:	e746      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005fa8:	f7fd fc44 	bl	8003834 <HAL_GetTick>
 8005fac:	1b40      	subs	r0, r0, r5
 8005fae:	2864      	cmp	r0, #100	; 0x64
 8005fb0:	f67f af32 	bls.w	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8005fb4:	e73f      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8005fb6:	bf00      	nop
 8005fb8:	40023800 	.word	0x40023800

08005fbc <HAL_RCCEx_GetPeriphCLKConfig>:
{
  uint32_t tempreg = 0;

  /* Set all possible values for the extended clock type parameter------------*/
#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005fbc:	4b5d      	ldr	r3, [pc, #372]	; (8006134 <HAL_RCCEx_GetPeriphCLKConfig+0x178>)
 8005fbe:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8005fc0:	4b5d      	ldr	r3, [pc, #372]	; (8006138 <HAL_RCCEx_GetPeriphCLKConfig+0x17c>)
 8005fc2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005fc6:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8005fca:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005fcc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005fd0:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005fd4:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005fda:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8005fde:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fe0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005fe4:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8005fe8:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8005fea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fee:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8005ff2:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ff4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ff8:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8005ffc:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ffe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006002:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8006006:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006008:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800600c:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8006010:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8006012:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006016:	f002 021f 	and.w	r2, r2, #31
 800601a:	6242      	str	r2, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800601c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006020:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8006024:	6282      	str	r2, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8006026:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800602a:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800602e:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8006030:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006034:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8006038:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800603a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800603e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8006042:	6402      	str	r2, [r0, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 800604a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800604c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006050:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8006054:	6642      	str	r2, [r0, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8006056:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800605a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800605e:	6682      	str	r2, [r0, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8006060:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006064:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8006068:	66c2      	str	r2, [r0, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800606a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800606e:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8006072:	6702      	str	r2, [r0, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8006074:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006078:	f002 0203 	and.w	r2, r2, #3
 800607c:	6442      	str	r2, [r0, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800607e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006082:	f002 020c 	and.w	r2, r2, #12
 8006086:	6482      	str	r2, [r0, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8006088:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800608c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8006090:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8006092:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006096:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800609a:	6502      	str	r2, [r0, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800609c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80060a0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80060a4:	6542      	str	r2, [r0, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 80060a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80060aa:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80060ae:	6582      	str	r2, [r0, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80060b0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80060b4:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80060b8:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80060ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80060be:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80060c2:	6602      	str	r2, [r0, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80060c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80060c8:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 80060cc:	6742      	str	r2, [r0, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80060ce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80060d2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80060d6:	6782      	str	r2, [r0, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80060d8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80060dc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80060e0:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80060e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80060e6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80060ea:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /* Get the SDMMC2 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc2ClockSelection = __HAL_RCC_GET_SDMMC2_SOURCE();
 80060ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80060f2:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80060f6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  /* Get the DFSDM clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection = __HAL_RCC_GET_DFSDM1_SOURCE();
 80060fa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80060fe:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8006102:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88

  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006106:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800610a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800610e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006112:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006114:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006116:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800611a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800611e:	430a      	orrs	r2, r1
 8006120:	6302      	str	r2, [r0, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8006122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006126:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800612a:	bf18      	it	ne
 800612c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8006130:	6383      	str	r3, [r0, #56]	; 0x38
  }
}
 8006132:	4770      	bx	lr
 8006134:	1cfffff1 	.word	0x1cfffff1
 8006138:	40023800 	.word	0x40023800

0800613c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800613c:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8006140:	d131      	bne.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006142:	4b34      	ldr	r3, [pc, #208]	; (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 8006144:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006148:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 800614c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006150:	d056      	beq.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8006152:	d803      	bhi.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x20>

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8006154:	2a00      	cmp	r2, #0
 8006156:	d038      	beq.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
    default :
      {
        break;
      }
    }
  }
 8006158:	2000      	movs	r0, #0
 800615a:	4770      	bx	lr
    switch (saiclocksource)
 800615c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8006160:	d056      	beq.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8006162:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
    switch (saiclocksource)
 8006166:	d1f7      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006168:	685b      	ldr	r3, [r3, #4]
          frequency = HSI_VALUE;
 800616a:	482b      	ldr	r0, [pc, #172]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800616c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
          frequency = HSI_VALUE;
 8006170:	4b2a      	ldr	r3, [pc, #168]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8006172:	bf08      	it	eq
 8006174:	4618      	moveq	r0, r3
 8006176:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006178:	4b27      	ldr	r3, [pc, #156]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800617a:	4a26      	ldr	r2, [pc, #152]	; (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800617c:	fbb3 f3f0 	udiv	r3, r3, r0
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006180:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006184:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8006188:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800618c:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800618e:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006192:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006196:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 80061a0:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 80061a4:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80061a6:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80061aa:	d1d5      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
    saiclocksource = RCC->DCKCFGR1;
 80061ac:	4b19      	ldr	r3, [pc, #100]	; (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
 80061ae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80061b2:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 80061b6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80061ba:	d021      	beq.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80061bc:	d9ca      	bls.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80061be:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80061c2:	d025      	beq.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 80061c4:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 80061c8:	e7cd      	b.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80061ca:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061cc:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80061ce:	0252      	lsls	r2, r2, #9
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80061d0:	4a10      	ldr	r2, [pc, #64]	; (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061d2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80061d6:	bf54      	ite	pl
 80061d8:	4b10      	ldrpl	r3, [pc, #64]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80061da:	4b0f      	ldrmi	r3, [pc, #60]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80061dc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80061e0:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80061e4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 80061e8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80061ec:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80061ee:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80061f2:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80061f6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80061fa:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80061fe:	e7ce      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006200:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006202:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006204:	0253      	lsls	r3, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006206:	f000 003f 	and.w	r0, r0, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800620a:	d4b5      	bmi.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800620c:	4b03      	ldr	r3, [pc, #12]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 800620e:	e7b4      	b.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006210:	4803      	ldr	r0, [pc, #12]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)

  return frequency;
}
 8006212:	4770      	bx	lr
 8006214:	40023800 	.word	0x40023800
 8006218:	017d7840 	.word	0x017d7840
 800621c:	00f42400 	.word	0x00f42400
 8006220:	00bb8000 	.word	0x00bb8000

08006224 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
 8006224:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006226:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006228:	6842      	ldr	r2, [r0, #4]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800622a:	bf0c      	ite	eq
 800622c:	2309      	moveq	r3, #9
 800622e:	2301      	movne	r3, #1
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006230:	2908      	cmp	r1, #8
 8006232:	d105      	bne.n	8006240 <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006234:	f022 0102 	bic.w	r1, r2, #2
 8006238:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
 800623a:	bf08      	it	eq
 800623c:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006240:	3a02      	subs	r2, #2
 8006242:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006244:	bf94      	ite	ls
 8006246:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800624a:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 800624e:	4770      	bx	lr

08006250 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006250:	4b0e      	ldr	r3, [pc, #56]	; (800628c <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006252:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	f641 3358 	movw	r3, #7000	; 0x1b58
 800625a:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 800625e:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006260:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8006262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006266:	600b      	str	r3, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006268:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800626c:	d207      	bcs.n	800627e <SAI_Disable+0x2e>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800626e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8006272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006276:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 800627a:	2003      	movs	r0, #3
      break;
 800627c:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800627e:	680b      	ldr	r3, [r1, #0]
 8006280:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8006284:	d1f0      	bne.n	8006268 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006286:	4618      	mov	r0, r3

  return status;
}
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	2000014c 	.word	0x2000014c

08006290 <HAL_SAI_MspInit>:
}
 8006290:	4770      	bx	lr
	...

08006294 <HAL_SAI_Init>:
{
 8006294:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 8006296:	4604      	mov	r4, r0
 8006298:	2800      	cmp	r0, #0
 800629a:	f000 80c5 	beq.w	8006428 <HAL_SAI_Init+0x194>
  if(hsai->State == HAL_SAI_STATE_RESET)
 800629e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 80062a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062a6:	b91b      	cbnz	r3, 80062b0 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 80062a8:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 80062ac:	f7ff fff0 	bl	8006290 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 80062b0:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 80062b2:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 80062b4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 80062b8:	f7ff ffca 	bl	8006250 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 80062bc:	68e3      	ldr	r3, [r4, #12]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	f000 80a1 	beq.w	8006406 <HAL_SAI_Init+0x172>
  uint32_t tmpregisterGCR = 0;
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	bf0c      	ite	eq
 80062c8:	2320      	moveq	r3, #32
 80062ca:	2300      	movne	r3, #0
  switch(hsai->Init.Synchro)
 80062cc:	68a2      	ldr	r2, [r4, #8]
 80062ce:	2a02      	cmp	r2, #2
 80062d0:	f000 809d 	beq.w	800640e <HAL_SAI_Init+0x17a>
 80062d4:	2a03      	cmp	r2, #3
 80062d6:	f000 8098 	beq.w	800640a <HAL_SAI_Init+0x176>
  uint32_t syncen_bits = 0;
 80062da:	2a01      	cmp	r2, #1
 80062dc:	bf0c      	ite	eq
 80062de:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 80062e2:	2500      	movne	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	4951      	ldr	r1, [pc, #324]	; (800642c <HAL_SAI_Init+0x198>)
 80062e8:	428a      	cmp	r2, r1
 80062ea:	d003      	beq.n	80062f4 <HAL_SAI_Init+0x60>
 80062ec:	4850      	ldr	r0, [pc, #320]	; (8006430 <HAL_SAI_Init+0x19c>)
 80062ee:	4282      	cmp	r2, r0
 80062f0:	f040 8090 	bne.w	8006414 <HAL_SAI_Init+0x180>
    SAI1->GCR = tmpregisterGCR;
 80062f4:	484f      	ldr	r0, [pc, #316]	; (8006434 <HAL_SAI_Init+0x1a0>)
    SAI2->GCR = tmpregisterGCR;
 80062f6:	6003      	str	r3, [r0, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80062f8:	69e3      	ldr	r3, [r4, #28]
 80062fa:	b313      	cbz	r3, 8006342 <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80062fc:	428a      	cmp	r2, r1
 80062fe:	d003      	beq.n	8006308 <HAL_SAI_Init+0x74>
 8006300:	4b4b      	ldr	r3, [pc, #300]	; (8006430 <HAL_SAI_Init+0x19c>)
 8006302:	429a      	cmp	r2, r3
 8006304:	f040 8088 	bne.w	8006418 <HAL_SAI_Init+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006308:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800630c:	f7ff ff16 	bl	800613c <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	4a49      	ldr	r2, [pc, #292]	; (8006438 <HAL_SAI_Init+0x1a4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d002      	beq.n	800631e <HAL_SAI_Init+0x8a>
 8006318:	3220      	adds	r2, #32
 800631a:	4293      	cmp	r3, r2
 800631c:	d103      	bne.n	8006326 <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800631e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006322:	f7ff ff0b 	bl	800613c <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006326:	220a      	movs	r2, #10
 8006328:	69e3      	ldr	r3, [r4, #28]
 800632a:	4350      	muls	r0, r2
 800632c:	025b      	lsls	r3, r3, #9
 800632e:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8006332:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 8006336:	fb02 0013 	mls	r0, r2, r3, r0
 800633a:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 800633c:	bf08      	it	eq
 800633e:	3301      	addeq	r3, #1
 8006340:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006342:	6863      	ldr	r3, [r4, #4]
 8006344:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006346:	f033 0102 	bics.w	r1, r3, #2
 800634a:	d167      	bne.n	800641c <HAL_SAI_Init+0x188>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800634c:	2a01      	cmp	r2, #1
 800634e:	bf14      	ite	ne
 8006350:	f44f 7100 	movne.w	r1, #512	; 0x200
 8006354:	2100      	moveq	r1, #0
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	4838      	ldr	r0, [pc, #224]	; (800643c <HAL_SAI_Init+0x1a8>)
 800635a:	6816      	ldr	r6, [r2, #0]
 800635c:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800635e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8006360:	4333      	orrs	r3, r6
 8006362:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006364:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006366:	4333      	orrs	r3, r6
 8006368:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800636a:	6810      	ldr	r0, [r2, #0]
 800636c:	4333      	orrs	r3, r6
 800636e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006370:	4333      	orrs	r3, r6
 8006372:	6926      	ldr	r6, [r4, #16]
 8006374:	4333      	orrs	r3, r6
 8006376:	6966      	ldr	r6, [r4, #20]
 8006378:	4333      	orrs	r3, r6
 800637a:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800637c:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800637e:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006382:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006384:	432b      	orrs	r3, r5
 8006386:	430b      	orrs	r3, r1
 8006388:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800638a:	6853      	ldr	r3, [r2, #4]
 800638c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006390:	f023 030f 	bic.w	r3, r3, #15
 8006394:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006396:	69a3      	ldr	r3, [r4, #24]
 8006398:	6851      	ldr	r1, [r2, #4]
 800639a:	4303      	orrs	r3, r0
 800639c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800639e:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80063a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80063a2:	430b      	orrs	r3, r1
 80063a4:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80063a6:	4b26      	ldr	r3, [pc, #152]	; (8006440 <HAL_SAI_Init+0x1ac>)
 80063a8:	6891      	ldr	r1, [r2, #8]
 80063aa:	400b      	ands	r3, r1
 80063ac:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80063ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063b0:	6891      	ldr	r1, [r2, #8]
 80063b2:	4303      	orrs	r3, r0
 80063b4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80063b6:	4303      	orrs	r3, r0
 80063b8:	430b      	orrs	r3, r1
 80063ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80063bc:	3901      	subs	r1, #1
 80063be:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80063c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80063c2:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80063c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80063c8:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80063ca:	68d3      	ldr	r3, [r2, #12]
 80063cc:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80063d0:	f023 030f 	bic.w	r3, r3, #15
 80063d4:	041b      	lsls	r3, r3, #16
 80063d6:	0c1b      	lsrs	r3, r3, #16
 80063d8:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80063da:	68d1      	ldr	r1, [r2, #12]
 80063dc:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 80063e0:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80063e2:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80063e4:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80063e6:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80063e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80063ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80063ee:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80063f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80063f4:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 80063f6:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80063f8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 80063fc:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8006400:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 8006404:	bd70      	pop	{r4, r5, r6, pc}
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8006406:	2310      	movs	r3, #16
 8006408:	e760      	b.n	80062cc <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800640a:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800640e:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8006412:	e767      	b.n	80062e4 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8006414:	480b      	ldr	r0, [pc, #44]	; (8006444 <HAL_SAI_Init+0x1b0>)
 8006416:	e76e      	b.n	80062f6 <HAL_SAI_Init+0x62>
    uint32_t freq = 0;
 8006418:	2000      	movs	r0, #0
 800641a:	e779      	b.n	8006310 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800641c:	2a01      	cmp	r2, #1
 800641e:	bf14      	ite	ne
 8006420:	2100      	movne	r1, #0
 8006422:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8006426:	e796      	b.n	8006356 <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 8006428:	2001      	movs	r0, #1
 800642a:	e7eb      	b.n	8006404 <HAL_SAI_Init+0x170>
 800642c:	40015804 	.word	0x40015804
 8006430:	40015824 	.word	0x40015824
 8006434:	40015800 	.word	0x40015800
 8006438:	40015c04 	.word	0x40015c04
 800643c:	ff05c010 	.word	0xff05c010
 8006440:	fff88000 	.word	0xfff88000
 8006444:	40015c00 	.word	0x40015c00

08006448 <HAL_SAI_MspDeInit>:
 8006448:	4770      	bx	lr

0800644a <HAL_SAI_DeInit>:
{
 800644a:	b538      	push	{r3, r4, r5, lr}
  if(hsai == NULL)
 800644c:	4605      	mov	r5, r0
 800644e:	b1d0      	cbz	r0, 8006486 <HAL_SAI_DeInit+0x3c>
  hsai->State = HAL_SAI_STATE_BUSY;
 8006450:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 8006452:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  hsai->State = HAL_SAI_STATE_BUSY;
 8006458:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d
  hsai->Instance->IMR = 0;
 800645c:	6803      	ldr	r3, [r0, #0]
 800645e:	611c      	str	r4, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006460:	619a      	str	r2, [r3, #24]
  SAI_Disable(hsai);
 8006462:	f7ff fef5 	bl	8006250 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006466:	682a      	ldr	r2, [r5, #0]
  HAL_SAI_MspDeInit(hsai);
 8006468:	4628      	mov	r0, r5
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800646a:	6853      	ldr	r3, [r2, #4]
 800646c:	f043 0308 	orr.w	r3, r3, #8
 8006470:	6053      	str	r3, [r2, #4]
  HAL_SAI_MspDeInit(hsai);
 8006472:	f7ff ffe9 	bl	8006448 <HAL_SAI_MspDeInit>
  return HAL_OK;
 8006476:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006478:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 800647c:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 8006480:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d
}
 8006484:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006486:	2001      	movs	r0, #1
 8006488:	e7fc      	b.n	8006484 <HAL_SAI_DeInit+0x3a>

0800648a <HAL_SAI_DMAStop>:
{
 800648a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 800648c:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
{
 8006490:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 8006492:	2b01      	cmp	r3, #1
 8006494:	d041      	beq.n	800651a <HAL_SAI_DMAStop+0x90>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006496:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hsai);
 8006498:	2501      	movs	r5, #1
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800649a:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hsai);
 800649c:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80064a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80064a4:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80064a6:	6013      	str	r3, [r2, #0]
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80064a8:	bb20      	cbnz	r0, 80064f4 <HAL_SAI_DMAStop+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 80064aa:	2500      	movs	r5, #0
  if((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80064ac:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80064ae:	b188      	cbz	r0, 80064d4 <HAL_SAI_DMAStop+0x4a>
 80064b0:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80064b4:	2b22      	cmp	r3, #34	; 0x22
 80064b6:	d10d      	bne.n	80064d4 <HAL_SAI_DMAStop+0x4a>
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80064b8:	f7fd fd7b 	bl	8003fb2 <HAL_DMA_Abort>
 80064bc:	b150      	cbz	r0, 80064d4 <HAL_SAI_DMAStop+0x4a>
      if(hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80064be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c2:	2b80      	cmp	r3, #128	; 0x80
 80064c4:	d006      	beq.n	80064d4 <HAL_SAI_DMAStop+0x4a>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80064c6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        status = HAL_ERROR;
 80064ca:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80064cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  SAI_Disable(hsai);
 80064d4:	4620      	mov	r0, r4
 80064d6:	f7ff febb 	bl	8006250 <SAI_Disable>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	6853      	ldr	r3, [r2, #4]
 80064de:	f043 0308 	orr.w	r3, r3, #8
 80064e2:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  __HAL_UNLOCK(hsai);
 80064ea:	2300      	movs	r3, #0
 80064ec:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80064f0:	4628      	mov	r0, r5
 80064f2:	bd38      	pop	{r3, r4, r5, pc}
  if((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80064f4:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 80064f8:	2b12      	cmp	r3, #18
 80064fa:	d1d6      	bne.n	80064aa <HAL_SAI_DMAStop+0x20>
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80064fc:	f7fd fd59 	bl	8003fb2 <HAL_DMA_Abort>
 8006500:	2800      	cmp	r0, #0
 8006502:	d0d2      	beq.n	80064aa <HAL_SAI_DMAStop+0x20>
      if(hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8006504:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006508:	2b80      	cmp	r3, #128	; 0x80
 800650a:	d0ce      	beq.n	80064aa <HAL_SAI_DMAStop+0x20>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800650c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006514:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8006518:	e7c8      	b.n	80064ac <HAL_SAI_DMAStop+0x22>
  __HAL_LOCK(hsai);
 800651a:	2502      	movs	r5, #2
 800651c:	e7e8      	b.n	80064f0 <HAL_SAI_DMAStop+0x66>
	...

08006520 <HAL_SAI_Receive_DMA>:
{
 8006520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006522:	4613      	mov	r3, r2
 8006524:	4604      	mov	r4, r0
  if((pData == NULL) || (Size == 0))
 8006526:	460a      	mov	r2, r1
 8006528:	b331      	cbz	r1, 8006578 <HAL_SAI_Receive_DMA+0x58>
 800652a:	b32b      	cbz	r3, 8006578 <HAL_SAI_Receive_DMA+0x58>
  if(hsai->State == HAL_SAI_STATE_READY)
 800652c:	f890 607d 	ldrb.w	r6, [r0, #125]	; 0x7d
 8006530:	b2f6      	uxtb	r6, r6
 8006532:	2e01      	cmp	r6, #1
 8006534:	d13a      	bne.n	80065ac <HAL_SAI_Receive_DMA+0x8c>
    __HAL_LOCK(hsai);
 8006536:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
 800653a:	2901      	cmp	r1, #1
 800653c:	d036      	beq.n	80065ac <HAL_SAI_Receive_DMA+0x8c>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800653e:	2700      	movs	r7, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006540:	2122      	movs	r1, #34	; 0x22
    __HAL_LOCK(hsai);
 8006542:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006546:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
    hsai->pBuffPtr = pData;
 800654a:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800654c:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    hsai->XferSize = Size;
 8006550:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->XferCount = Size;
 8006554:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006558:	4915      	ldr	r1, [pc, #84]	; (80065b0 <HAL_SAI_Receive_DMA+0x90>)
 800655a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800655c:	6401      	str	r1, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800655e:	4915      	ldr	r1, [pc, #84]	; (80065b4 <HAL_SAI_Receive_DMA+0x94>)
 8006560:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006562:	4915      	ldr	r1, [pc, #84]	; (80065b8 <HAL_SAI_Receive_DMA+0x98>)
    hsai->hdmarx->XferAbortCallback = NULL;
 8006564:	e9c0 1713 	strd	r1, r7, [r0, #76]	; 0x4c
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006568:	6821      	ldr	r1, [r4, #0]
 800656a:	311c      	adds	r1, #28
 800656c:	f7fd fce4 	bl	8003f38 <HAL_DMA_Start_IT>
 8006570:	4605      	mov	r5, r0
 8006572:	b118      	cbz	r0, 800657c <HAL_SAI_Receive_DMA+0x5c>
      __HAL_UNLOCK(hsai);
 8006574:	f884 707c 	strb.w	r7, [r4, #124]	; 0x7c
    return  HAL_ERROR;
 8006578:	2501      	movs	r5, #1
 800657a:	e015      	b.n	80065a8 <HAL_SAI_Receive_DMA+0x88>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800657c:	6826      	ldr	r6, [r4, #0]
 800657e:	6833      	ldr	r3, [r6, #0]
 8006580:	03db      	lsls	r3, r3, #15
 8006582:	d403      	bmi.n	800658c <HAL_SAI_Receive_DMA+0x6c>
      __HAL_SAI_ENABLE(hsai);
 8006584:	6833      	ldr	r3, [r6, #0]
 8006586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800658a:	6033      	str	r3, [r6, #0]
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800658c:	2100      	movs	r1, #0
 800658e:	4620      	mov	r0, r4
 8006590:	f7ff fe48 	bl	8006224 <SAI_InterruptFlag>
 8006594:	6933      	ldr	r3, [r6, #16]
 8006596:	4318      	orrs	r0, r3
 8006598:	6130      	str	r0, [r6, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800659a:	6833      	ldr	r3, [r6, #0]
 800659c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a0:	6033      	str	r3, [r6, #0]
    __HAL_UNLOCK(hsai);
 80065a2:	2300      	movs	r3, #0
 80065a4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
}
 80065a8:	4628      	mov	r0, r5
 80065aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80065ac:	2502      	movs	r5, #2
 80065ae:	e7fb      	b.n	80065a8 <HAL_SAI_Receive_DMA+0x88>
 80065b0:	080065f5 	.word	0x080065f5
 80065b4:	080065bd 	.word	0x080065bd
 80065b8:	080065ff 	.word	0x080065ff

080065bc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80065bc:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80065be:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065c0:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	f411 7180 	ands.w	r1, r1, #256	; 0x100
 80065c8:	d110      	bne.n	80065ec <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80065ca:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80065cc:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80065ce:	682b      	ldr	r3, [r5, #0]
 80065d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065d4:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 80065d6:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80065da:	f7ff fe23 	bl	8006224 <SAI_InterruptFlag>
 80065de:	692b      	ldr	r3, [r5, #16]
 80065e0:	ea23 0000 	bic.w	r0, r3, r0
    
    hsai->State = HAL_SAI_STATE_READY;
 80065e4:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80065e6:	6128      	str	r0, [r5, #16]
    hsai->State = HAL_SAI_STATE_READY;
 80065e8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 80065ec:	4620      	mov	r0, r4
 80065ee:	f7fb fe19 	bl	8002224 <HAL_SAI_RxCpltCallback>
}
 80065f2:	bd38      	pop	{r3, r4, r5, pc}

080065f4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065f4:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_RxHalfCpltCallback(hsai);
 80065f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80065f8:	f7fb fe62 	bl	80022c0 <HAL_SAI_RxHalfCpltCallback>
}
 80065fc:	bd08      	pop	{r3, pc}

080065fe <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80065fe:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006600:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006602:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800660a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800660e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006612:	2b01      	cmp	r3, #1
 8006614:	d003      	beq.n	800661e <SAI_DMAError+0x20>
 8006616:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661a:	2b01      	cmp	r3, #1
 800661c:	d10d      	bne.n	800663a <SAI_DMAError+0x3c>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800661e:	6822      	ldr	r2, [r4, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8006620:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006628:	6013      	str	r3, [r2, #0]
    SAI_Disable(hsai);
 800662a:	f7ff fe11 	bl	8006250 <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800662e:	2301      	movs	r3, #1
 8006630:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 800663a:	4620      	mov	r0, r4
 800663c:	f7fb fe46 	bl	80022cc <HAL_SAI_ErrorCallback>
}
 8006640:	bd10      	pop	{r4, pc}

08006642 <HAL_SAI_GetState>:
  return hsai->State;
 8006642:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 8006646:	4770      	bx	lr

08006648 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006648:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800664a:	3b01      	subs	r3, #1
 800664c:	d00f      	beq.n	800666e <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800664e:	6902      	ldr	r2, [r0, #16]
 8006650:	2a00      	cmp	r2, #0
 8006652:	dafa      	bge.n	800664a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006654:	6903      	ldr	r3, [r0, #16]
 8006656:	4a07      	ldr	r2, [pc, #28]	; (8006674 <USB_CoreReset+0x2c>)
 8006658:	f043 0301 	orr.w	r3, r3, #1
 800665c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800665e:	3a01      	subs	r2, #1
 8006660:	d005      	beq.n	800666e <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006662:	6903      	ldr	r3, [r0, #16]
 8006664:	f013 0301 	ands.w	r3, r3, #1
 8006668:	d1f9      	bne.n	800665e <USB_CoreReset+0x16>

  return HAL_OK;
 800666a:	4618      	mov	r0, r3
 800666c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800666e:	2003      	movs	r0, #3
}
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	00030d41 	.word	0x00030d41

08006678 <USB_CoreInit>:
{
 8006678:	b084      	sub	sp, #16
 800667a:	b538      	push	{r3, r4, r5, lr}
 800667c:	ad05      	add	r5, sp, #20
 800667e:	4604      	mov	r4, r0
 8006680:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006686:	2b01      	cmp	r3, #1
 8006688:	d127      	bne.n	80066da <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800668a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800668c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006690:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006692:	68c3      	ldr	r3, [r0, #12]
 8006694:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800669c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800669e:	68c3      	ldr	r3, [r0, #12]
 80066a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80066a4:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80066a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d103      	bne.n	80066b4 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066ac:	68c3      	ldr	r3, [r0, #12]
 80066ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066b2:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80066b4:	4620      	mov	r0, r4
 80066b6:	f7ff ffc7 	bl	8006648 <USB_CoreReset>
  if(cfg.dma_enable == 1U)
 80066ba:	9b08      	ldr	r3, [sp, #32]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d107      	bne.n	80066d0 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066c0:	68a3      	ldr	r3, [r4, #8]
 80066c2:	f043 0306 	orr.w	r3, r3, #6
 80066c6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066c8:	68a3      	ldr	r3, [r4, #8]
 80066ca:	f043 0320 	orr.w	r3, r3, #32
 80066ce:	60a3      	str	r3, [r4, #8]
}
 80066d0:	2000      	movs	r0, #0
 80066d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d6:	b004      	add	sp, #16
 80066d8:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066da:	68c3      	ldr	r3, [r0, #12]
 80066dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e0:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80066e2:	f7ff ffb1 	bl	8006648 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80066e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066ea:	63a3      	str	r3, [r4, #56]	; 0x38
 80066ec:	e7e5      	b.n	80066ba <USB_CoreInit+0x42>

080066ee <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066ee:	6883      	ldr	r3, [r0, #8]
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	6083      	str	r3, [r0, #8]
}
 80066f6:	2000      	movs	r0, #0
 80066f8:	4770      	bx	lr

080066fa <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066fa:	6883      	ldr	r3, [r0, #8]
 80066fc:	f023 0301 	bic.w	r3, r3, #1
 8006700:	6083      	str	r3, [r0, #8]
}
 8006702:	2000      	movs	r0, #0
 8006704:	4770      	bx	lr

08006706 <USB_SetCurrentMode>:
{
 8006706:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006708:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800670a:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800670c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006710:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8006712:	d108      	bne.n	8006726 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006714:	68c3      	ldr	r3, [r0, #12]
 8006716:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800671a:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800671c:	2032      	movs	r0, #50	; 0x32
 800671e:	f7fd f88f 	bl	8003840 <HAL_Delay>
  return HAL_OK;
 8006722:	2000      	movs	r0, #0
}
 8006724:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8006726:	b919      	cbnz	r1, 8006730 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006728:	68c3      	ldr	r3, [r0, #12]
 800672a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800672e:	e7f4      	b.n	800671a <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8006730:	2001      	movs	r0, #1
 8006732:	e7f7      	b.n	8006724 <USB_SetCurrentMode+0x1e>

08006734 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006734:	0189      	lsls	r1, r1, #6
 8006736:	4a07      	ldr	r2, [pc, #28]	; (8006754 <USB_FlushTxFifo+0x20>)
 8006738:	f041 0120 	orr.w	r1, r1, #32
 800673c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800673e:	3a01      	subs	r2, #1
 8006740:	d005      	beq.n	800674e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006742:	6903      	ldr	r3, [r0, #16]
 8006744:	f013 0320 	ands.w	r3, r3, #32
 8006748:	d1f9      	bne.n	800673e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800674a:	4618      	mov	r0, r3
 800674c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800674e:	2003      	movs	r0, #3
}
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	00030d41 	.word	0x00030d41

08006758 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006758:	2310      	movs	r3, #16
 800675a:	4a06      	ldr	r2, [pc, #24]	; (8006774 <USB_FlushRxFifo+0x1c>)
 800675c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800675e:	3a01      	subs	r2, #1
 8006760:	d005      	beq.n	800676e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006762:	6903      	ldr	r3, [r0, #16]
 8006764:	f013 0310 	ands.w	r3, r3, #16
 8006768:	d1f9      	bne.n	800675e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800676a:	4618      	mov	r0, r3
 800676c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800676e:	2003      	movs	r0, #3
}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	00030d41 	.word	0x00030d41

08006778 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8006778:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800677c:	4319      	orrs	r1, r3
 800677e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8006782:	2000      	movs	r0, #0
 8006784:	4770      	bx	lr
	...

08006788 <USB_DevInit>:
{
 8006788:	b084      	sub	sp, #16
 800678a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800678e:	4604      	mov	r4, r0
 8006790:	a809      	add	r0, sp, #36	; 0x24
 8006792:	4688      	mov	r8, r1
 8006794:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8006798:	2300      	movs	r3, #0
 800679a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800679c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 800679e:	461d      	mov	r5, r3
 80067a0:	e9dd 270b 	ldrd	r2, r7, [sp, #44]	; 0x2c
 80067a4:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80067a8:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80067aa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 80067ae:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80067b0:	6045      	str	r5, [r0, #4]
  for (i = 0U; i < 15U; i++)
 80067b2:	d1f7      	bne.n	80067a4 <USB_DevInit+0x1c>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80067b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067ba:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 80067bc:	b95e      	cbnz	r6, 80067d6 <USB_DevInit+0x4e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80067be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067c4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067cc:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d4:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80067d6:	2300      	movs	r3, #0
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067d8:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067da:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 80067de:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067e2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80067e6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067ea:	d158      	bne.n	800689e <USB_DevInit+0x116>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80067ec:	2a00      	cmp	r2, #0
 80067ee:	d154      	bne.n	800689a <USB_DevInit+0x112>
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH);
 80067f0:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 80067f2:	4620      	mov	r0, r4
 80067f4:	f7ff ffc0 	bl	8006778 <USB_SetDevSpeed>
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80067f8:	2110      	movs	r1, #16
 80067fa:	4620      	mov	r0, r4
 80067fc:	f7ff ff9a 	bl	8006734 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006800:	4620      	mov	r0, r4
 8006802:	f7ff ffa9 	bl	8006758 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800680c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8006810:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006812:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006816:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 800681a:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800681c:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800681e:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006820:	4543      	cmp	r3, r8
 8006822:	d140      	bne.n	80068a6 <USB_DevInit+0x11e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006824:	2100      	movs	r1, #0
 8006826:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800682a:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800682e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006832:	4608      	mov	r0, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006834:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006838:	428b      	cmp	r3, r1
 800683a:	d146      	bne.n	80068ca <USB_DevInit+0x142>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800683c:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 800683e:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006844:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8006846:	d107      	bne.n	8006858 <USB_DevInit+0xd0>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006848:	4b29      	ldr	r3, [pc, #164]	; (80068f0 <USB_DevInit+0x168>)
 800684a:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800684c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800684e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006852:	f043 0303 	orr.w	r3, r3, #3
 8006856:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800685c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8006860:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8006862:	b91f      	cbnz	r7, 800686c <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006864:	69a3      	ldr	r3, [r4, #24]
 8006866:	f043 0310 	orr.w	r3, r3, #16
 800686a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800686c:	69a2      	ldr	r2, [r4, #24]
 800686e:	4b21      	ldr	r3, [pc, #132]	; (80068f4 <USB_DevInit+0x16c>)
 8006870:	4313      	orrs	r3, r2
 8006872:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable != 0U)
 8006874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006876:	b11b      	cbz	r3, 8006880 <USB_DevInit+0xf8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006878:	69a3      	ldr	r3, [r4, #24]
 800687a:	f043 0308 	orr.w	r3, r3, #8
 800687e:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8006880:	2e01      	cmp	r6, #1
 8006882:	d105      	bne.n	8006890 <USB_DevInit+0x108>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006884:	69a3      	ldr	r3, [r4, #24]
 8006886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800688a:	f043 0304 	orr.w	r3, r3, #4
 800688e:	61a3      	str	r3, [r4, #24]
}
 8006890:	2000      	movs	r0, #0
 8006892:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006896:	b004      	add	sp, #16
 8006898:	4770      	bx	lr
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800689a:	2101      	movs	r1, #1
 800689c:	e7a9      	b.n	80067f2 <USB_DevInit+0x6a>
  else if(cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800689e:	2903      	cmp	r1, #3
 80068a0:	d0a4      	beq.n	80067ec <USB_DevInit+0x64>
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 80068a2:	2103      	movs	r1, #3
 80068a4:	e7a5      	b.n	80067f2 <USB_DevInit+0x6a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068a6:	f8d2 9000 	ldr.w	r9, [r2]
 80068aa:	f1b9 0f00 	cmp.w	r9, #0
 80068ae:	da0a      	bge.n	80068c6 <USB_DevInit+0x13e>
      if (i == 0U)
 80068b0:	b93b      	cbnz	r3, 80068c2 <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068b2:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068b6:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068b8:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068ba:	f8c2 e008 	str.w	lr, [r2, #8]
 80068be:	3220      	adds	r2, #32
 80068c0:	e7ae      	b.n	8006820 <USB_DevInit+0x98>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068c2:	6010      	str	r0, [r2, #0]
 80068c4:	e7f7      	b.n	80068b6 <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 80068c6:	6011      	str	r1, [r2, #0]
 80068c8:	e7f5      	b.n	80068b6 <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068ca:	f8d2 9000 	ldr.w	r9, [r2]
 80068ce:	f1b9 0f00 	cmp.w	r9, #0
 80068d2:	da0b      	bge.n	80068ec <USB_DevInit+0x164>
      if (i == 0U)
 80068d4:	b939      	cbnz	r1, 80068e6 <USB_DevInit+0x15e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068d6:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068da:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068dc:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068de:	f8c2 8008 	str.w	r8, [r2, #8]
 80068e2:	3220      	adds	r2, #32
 80068e4:	e7a8      	b.n	8006838 <USB_DevInit+0xb0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068e6:	f8c2 c000 	str.w	ip, [r2]
 80068ea:	e7f6      	b.n	80068da <USB_DevInit+0x152>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068ec:	6010      	str	r0, [r2, #0]
 80068ee:	e7f4      	b.n	80068da <USB_DevInit+0x152>
 80068f0:	00800100 	.word	0x00800100
 80068f4:	803c3800 	.word	0x803c3800

080068f8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068f8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if(DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068fc:	f013 0006 	ands.w	r0, r3, #6
 8006900:	d007      	beq.n	8006912 <USB_GetDevSpeed+0x1a>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006902:	079b      	lsls	r3, r3, #30
 8006904:	d404      	bmi.n	8006910 <USB_GetDevSpeed+0x18>
  else if (DevEnumSpeed == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006906:	2804      	cmp	r0, #4
    speed = USB_OTG_SPEED_LOW;
 8006908:	bf14      	ite	ne
 800690a:	2000      	movne	r0, #0
 800690c:	2002      	moveq	r0, #2
 800690e:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8006910:	2003      	movs	r0, #3
}
 8006912:	4770      	bx	lr

08006914 <USB_ActivateEndpoint>:
{
 8006914:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8006916:	780d      	ldrb	r5, [r1, #0]
 8006918:	2401      	movs	r4, #1
 800691a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800691e:	f005 030f 	and.w	r3, r5, #15
 8006922:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8006926:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 8006928:	784b      	ldrb	r3, [r1, #1]
 800692a:	2b01      	cmp	r3, #1
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800692c:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 800692e:	d118      	bne.n	8006962 <USB_ActivateEndpoint+0x4e>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8006930:	431c      	orrs	r4, r3
 8006932:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006934:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006938:	041a      	lsls	r2, r3, #16
 800693a:	d410      	bmi.n	800695e <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800693c:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) | (epnum << 22) |
 800693e:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006944:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800694c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006950:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8006954:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 8006958:	4313      	orrs	r3, r2
 800695a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800695e:	2000      	movs	r0, #0
 8006960:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8006962:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006966:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006968:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800696c:	041b      	lsls	r3, r3, #16
 800696e:	d4f6      	bmi.n	800695e <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006970:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8006972:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006974:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006978:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800697c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006984:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8006988:	4313      	orrs	r3, r2
 800698a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800698e:	e7e6      	b.n	800695e <USB_ActivateEndpoint+0x4a>

08006990 <USB_DeactivateEndpoint>:
{
 8006990:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8006992:	780c      	ldrb	r4, [r1, #0]
 8006994:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8006998:	7849      	ldrb	r1, [r1, #1]
 800699a:	2301      	movs	r3, #1
 800699c:	f004 050f 	and.w	r5, r4, #15
 80069a0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80069a4:	2901      	cmp	r1, #1
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80069a6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80069a8:	fa03 f305 	lsl.w	r3, r3, r5
  if (ep->is_in == 1U)
 80069ac:	d10d      	bne.n	80069ca <USB_DeactivateEndpoint+0x3a>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80069ae:	43db      	mvns	r3, r3
 80069b0:	4019      	ands	r1, r3
 80069b2:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80069b4:	69d1      	ldr	r1, [r2, #28]
 80069b6:	400b      	ands	r3, r1
 80069b8:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <USB_DeactivateEndpoint+0x58>)
 80069bc:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80069c0:	4013      	ands	r3, r2
 80069c2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80069c6:	2000      	movs	r0, #0
 80069c8:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80069ca:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80069ce:	4019      	ands	r1, r3
 80069d0:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80069d2:	69d1      	ldr	r1, [r2, #28]
 80069d4:	400b      	ands	r3, r1
 80069d6:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80069d8:	4b04      	ldr	r3, [pc, #16]	; (80069ec <USB_DeactivateEndpoint+0x5c>)
 80069da:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80069de:	4013      	ands	r3, r2
 80069e0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80069e4:	e7ef      	b.n	80069c6 <USB_DeactivateEndpoint+0x36>
 80069e6:	bf00      	nop
 80069e8:	ec337800 	.word	0xec337800
 80069ec:	eff37800 	.word	0xeff37800

080069f0 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 80069f0:	784b      	ldrb	r3, [r1, #1]
 80069f2:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8006ad4 <USB_EP0StartXfer+0xe4>
 80069f6:	2b01      	cmp	r3, #1
{
 80069f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80069fa:	780d      	ldrb	r5, [r1, #0]
 80069fc:	694e      	ldr	r6, [r1, #20]
 80069fe:	eb00 1445 	add.w	r4, r0, r5, lsl #5
 8006a02:	4f33      	ldr	r7, [pc, #204]	; (8006ad0 <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 8006a04:	d143      	bne.n	8006a8e <USB_EP0StartXfer+0x9e>
 8006a06:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8006a0a:	b9be      	cbnz	r6, 8006a3c <USB_EP0StartXfer+0x4c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a0c:	6918      	ldr	r0, [r3, #16]
    if (dma == 1U)
 8006a0e:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a10:	ea00 0007 	and.w	r0, r0, r7
 8006a14:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a16:	6918      	ldr	r0, [r3, #16]
 8006a18:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8006a1c:	6118      	str	r0, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a1e:	6918      	ldr	r0, [r3, #16]
 8006a20:	ea00 000c 	and.w	r0, r0, ip
 8006a24:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8006a26:	d101      	bne.n	8006a2c <USB_EP0StartXfer+0x3c>
      USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a28:	690a      	ldr	r2, [r1, #16]
 8006a2a:	615a      	str	r2, [r3, #20]
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a2c:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8006a30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a34:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8006a38:	2000      	movs	r0, #0
 8006a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a3c:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8006a40:	ea0e 0c0c 	and.w	ip, lr, ip
 8006a44:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a48:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8006a4c:	ea0c 0707 	and.w	r7, ip, r7
 8006a50:	611f      	str	r7, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8006a52:	688f      	ldr	r7, [r1, #8]
 8006a54:	42b7      	cmp	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a56:	691e      	ldr	r6, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 8006a58:	bf38      	it	cc
 8006a5a:	614f      	strcc	r7, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a5c:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a60:	694f      	ldr	r7, [r1, #20]
    if (dma == 1U)
 8006a62:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a64:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a66:	f3c7 0612 	ubfx	r6, r7, #0, #19
 8006a6a:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8006a6e:	ea46 060c 	orr.w	r6, r6, ip
 8006a72:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 8006a74:	d0d8      	beq.n	8006a28 <USB_EP0StartXfer+0x38>
      if (ep->xfer_len > 0U)
 8006a76:	2f00      	cmp	r7, #0
 8006a78:	d0d8      	beq.n	8006a2c <USB_EP0StartXfer+0x3c>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8006a7a:	f005 050f 	and.w	r5, r5, #15
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8006a84:	40ab      	lsls	r3, r5
 8006a86:	4313      	orrs	r3, r2
 8006a88:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8006a8c:	e7ce      	b.n	8006a2c <USB_EP0StartXfer+0x3c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a8e:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8006a92:	6918      	ldr	r0, [r3, #16]
 8006a94:	ea00 000c 	and.w	r0, r0, ip
 8006a98:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a9a:	6918      	ldr	r0, [r3, #16]
 8006a9c:	4038      	ands	r0, r7
 8006a9e:	6118      	str	r0, [r3, #16]
 8006aa0:	6888      	ldr	r0, [r1, #8]
    if (ep->xfer_len > 0U)
 8006aa2:	b106      	cbz	r6, 8006aa6 <USB_EP0StartXfer+0xb6>
      ep->xfer_len = ep->maxpacket;
 8006aa4:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aa6:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006aa8:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 8006aac:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aae:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8006ab2:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006ab4:	691d      	ldr	r5, [r3, #16]
 8006ab6:	ea40 0005 	orr.w	r0, r0, r5
 8006aba:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8006abc:	d101      	bne.n	8006ac2 <USB_EP0StartXfer+0xd2>
      USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006abe:	68ca      	ldr	r2, [r1, #12]
 8006ac0:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ac2:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8006ac6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006aca:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8006ace:	e7b3      	b.n	8006a38 <USB_EP0StartXfer+0x48>
 8006ad0:	e007ffff 	.word	0xe007ffff
 8006ad4:	fff80000 	.word	0xfff80000

08006ad8 <USB_WritePacket>:
{
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8006ade:	b94c      	cbnz	r4, 8006af4 <USB_WritePacket+0x1c>
    count32b =  ((uint32_t)len + 3U) / 4U;
 8006ae0:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8006ae2:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    count32b =  ((uint32_t)len + 3U) / 4U;
 8006ae6:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8006ae8:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8006aec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8006af0:	4299      	cmp	r1, r3
 8006af2:	d101      	bne.n	8006af8 <USB_WritePacket+0x20>
}
 8006af4:	2000      	movs	r0, #0
 8006af6:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8006af8:	f851 2b04 	ldr.w	r2, [r1], #4
 8006afc:	6002      	str	r2, [r0, #0]
 8006afe:	e7f7      	b.n	8006af0 <USB_WritePacket+0x18>

08006b00 <USB_EPStartXfer>:
{
 8006b00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8006b04:	f891 e001 	ldrb.w	lr, [r1, #1]
 8006b08:	780d      	ldrb	r5, [r1, #0]
 8006b0a:	f1be 0f01 	cmp.w	lr, #1
 8006b0e:	694b      	ldr	r3, [r1, #20]
 8006b10:	eb00 1545 	add.w	r5, r0, r5, lsl #5
 8006b14:	78ce      	ldrb	r6, [r1, #3]
 8006b16:	f8df c178 	ldr.w	ip, [pc, #376]	; 8006c90 <USB_EPStartXfer+0x190>
 8006b1a:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8006c94 <USB_EPStartXfer+0x194>
 8006b1e:	d15f      	bne.n	8006be0 <USB_EPStartXfer+0xe0>
 8006b20:	f505 6410 	add.w	r4, r5, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d132      	bne.n	8006b8e <USB_EPStartXfer+0x8e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b28:	6926      	ldr	r6, [r4, #16]
 8006b2a:	ea06 060c 	and.w	r6, r6, ip
 8006b2e:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b30:	6926      	ldr	r6, [r4, #16]
 8006b32:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8006b36:	6126      	str	r6, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b38:	6926      	ldr	r6, [r4, #16]
 8006b3a:	ea06 0608 	and.w	r6, r6, r8
    if (dma == 1U)
 8006b3e:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006b40:	6126      	str	r6, [r4, #16]
    if (dma == 1U)
 8006b42:	d101      	bne.n	8006b48 <USB_EPStartXfer+0x48>
      USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b44:	690e      	ldr	r6, [r1, #16]
 8006b46:	6166      	str	r6, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8006b48:	78ce      	ldrb	r6, [r1, #3]
 8006b4a:	2e01      	cmp	r6, #1
 8006b4c:	d10c      	bne.n	8006b68 <USB_EPStartXfer+0x68>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b4e:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8006b52:	f414 7f80 	tst.w	r4, #256	; 0x100
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b56:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
 8006b5a:	bf0c      	ite	eq
 8006b5c:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b60:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
 8006b64:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b68:	f8d5 4900 	ldr.w	r4, [r5, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8006b6c:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b6e:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8006b72:	f8c5 4900 	str.w	r4, [r5, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8006b76:	d106      	bne.n	8006b86 <USB_EPStartXfer+0x86>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b78:	780c      	ldrb	r4, [r1, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	9200      	str	r2, [sp, #0]
 8006b7e:	4622      	mov	r2, r4
 8006b80:	68c9      	ldr	r1, [r1, #12]
 8006b82:	f7ff ffa9 	bl	8006ad8 <USB_WritePacket>
}
 8006b86:	2000      	movs	r0, #0
 8006b88:	b002      	add	sp, #8
 8006b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b8e:	6927      	ldr	r7, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8006b90:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b92:	ea07 0708 	and.w	r7, r7, r8
 8006b96:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b98:	6927      	ldr	r7, [r4, #16]
 8006b9a:	ea07 070c 	and.w	r7, r7, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b9e:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ba2:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ba4:	eb0c 0703 	add.w	r7, ip, r3
 8006ba8:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8006bac:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8006bb0:	fbb7 fcfc 	udiv	ip, r7, ip
 8006bb4:	4f35      	ldr	r7, [pc, #212]	; (8006c8c <USB_EPStartXfer+0x18c>)
 8006bb6:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 8006bba:	ea47 0708 	orr.w	r7, r7, r8
 8006bbe:	6127      	str	r7, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bc0:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8006bc4:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8006bc8:	ea47 070c 	orr.w	r7, r7, ip
 8006bcc:	6127      	str	r7, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8006bce:	d14e      	bne.n	8006c6e <USB_EPStartXfer+0x16e>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bd0:	6926      	ldr	r6, [r4, #16]
 8006bd2:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8006bd6:	6126      	str	r6, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bd8:	6926      	ldr	r6, [r4, #16]
 8006bda:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8006bde:	e7ae      	b.n	8006b3e <USB_EPStartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006be0:	f505 6730 	add.w	r7, r5, #2816	; 0xb00
 8006be4:	693c      	ldr	r4, [r7, #16]
 8006be6:	ea04 0408 	and.w	r4, r4, r8
 8006bea:	613c      	str	r4, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006bec:	693c      	ldr	r4, [r7, #16]
 8006bee:	ea04 040c 	and.w	r4, r4, ip
 8006bf2:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8006bf6:	613c      	str	r4, [r7, #16]
    if (ep->xfer_len == 0U)
 8006bf8:	bb13      	cbnz	r3, 8006c40 <USB_EPStartXfer+0x140>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006bfa:	693c      	ldr	r4, [r7, #16]
 8006bfc:	f3cc 0312 	ubfx	r3, ip, #0, #19
 8006c00:	4323      	orrs	r3, r4
 8006c02:	613b      	str	r3, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 8006c0a:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006c0c:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 8006c0e:	d101      	bne.n	8006c14 <USB_EPStartXfer+0x114>
      USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8006c10:	68cb      	ldr	r3, [r1, #12]
 8006c12:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 8006c14:	2e01      	cmp	r6, #1
 8006c16:	d10c      	bne.n	8006c32 <USB_EPStartXfer+0x132>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c18:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8006c1c:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c20:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8006c24:	bf0c      	ite	eq
 8006c26:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c2a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8006c2e:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c32:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8006c36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c3a:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
  return HAL_OK;
 8006c3e:	e7a2      	b.n	8006b86 <USB_EPStartXfer+0x86>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c40:	eb0c 0403 	add.w	r4, ip, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c44:	4b11      	ldr	r3, [pc, #68]	; (8006c8c <USB_EPStartXfer+0x18c>)
 8006c46:	f8d7 e010 	ldr.w	lr, [r7, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c4a:	3c01      	subs	r4, #1
 8006c4c:	fbb4 f4fc 	udiv	r4, r4, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c50:	ea03 43c4 	and.w	r3, r3, r4, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006c54:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c56:	ea43 030e 	orr.w	r3, r3, lr
 8006c5a:	613b      	str	r3, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006c5c:	fb0c f304 	mul.w	r3, ip, r4
 8006c60:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8006c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c68:	ea43 030e 	orr.w	r3, r3, lr
 8006c6c:	e7cd      	b.n	8006c0a <USB_EPStartXfer+0x10a>
    if (dma == 1U)
 8006c6e:	2a01      	cmp	r2, #1
 8006c70:	f43f af68 	beq.w	8006b44 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8006c74:	780c      	ldrb	r4, [r1, #0]
 8006c76:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8006c7a:	f004 040f 	and.w	r4, r4, #15
 8006c7e:	fa0e f404 	lsl.w	r4, lr, r4
 8006c82:	433c      	orrs	r4, r7
 8006c84:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 8006c88:	e75e      	b.n	8006b48 <USB_EPStartXfer+0x48>
 8006c8a:	bf00      	nop
 8006c8c:	1ff80000 	.word	0x1ff80000
 8006c90:	e007ffff 	.word	0xe007ffff
 8006c94:	fff80000 	.word	0xfff80000

08006c98 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006c98:	3203      	adds	r2, #3
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8006c9a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006c9e:	0892      	lsrs	r2, r2, #2
 8006ca0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 8006ca4:	4291      	cmp	r1, r2
 8006ca6:	d101      	bne.n	8006cac <USB_ReadPacket+0x14>
}
 8006ca8:	4608      	mov	r0, r1
 8006caa:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8006cac:	6803      	ldr	r3, [r0, #0]
 8006cae:	f841 3b04 	str.w	r3, [r1], #4
 8006cb2:	e7f7      	b.n	8006ca4 <USB_ReadPacket+0xc>

08006cb4 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8006cb4:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8006cb6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006cb8:	2a01      	cmp	r2, #1
 8006cba:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006cbe:	d112      	bne.n	8006ce6 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cc0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006cc4:	2a00      	cmp	r2, #0
 8006cc6:	db06      	blt.n	8006cd6 <USB_EPSetStall+0x22>
 8006cc8:	b12b      	cbz	r3, 8006cd6 <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006cca:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006cce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cd2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cd6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006cda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cde:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ce6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	db06      	blt.n	8006cfc <USB_EPSetStall+0x48>
 8006cee:	b12b      	cbz	r3, 8006cfc <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006cf0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006cf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cf8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006cfc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006d00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d04:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006d08:	e7eb      	b.n	8006ce2 <USB_EPSetStall+0x2e>

08006d0a <USB_EPClearStall>:
{
 8006d0a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006d0c:	784a      	ldrb	r2, [r1, #1]
 8006d0e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006d12:	78cb      	ldrb	r3, [r1, #3]
 8006d14:	2a01      	cmp	r2, #1
 8006d16:	f1a3 0302 	sub.w	r3, r3, #2
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	d10f      	bne.n	8006d3e <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d1e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d22:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d24:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006d28:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d2c:	d805      	bhi.n	8006d3a <USB_EPClearStall+0x30>
       USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d2e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d36:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d3e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d42:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d44:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006d48:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d4c:	d8f5      	bhi.n	8006d3a <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d4e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d56:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006d5a:	e7ee      	b.n	8006d3a <USB_EPClearStall+0x30>

08006d5c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8006d5c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d60:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8006d62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d66:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8006d6a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d6e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006d72:	4319      	orrs	r1, r3
 8006d74:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8006d78:	2000      	movs	r0, #0
 8006d7a:	4770      	bx	lr

08006d7c <USB_DevConnect>:
{
 8006d7c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d7e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006d82:	f023 0302 	bic.w	r3, r3, #2
 8006d86:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8006d8a:	2003      	movs	r0, #3
 8006d8c:	f7fc fd58 	bl	8003840 <HAL_Delay>
}
 8006d90:	2000      	movs	r0, #0
 8006d92:	bd08      	pop	{r3, pc}

08006d94 <USB_DevDisconnect>:
{
 8006d94:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d96:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006d9a:	f043 0302 	orr.w	r3, r3, #2
 8006d9e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8006da2:	2003      	movs	r0, #3
 8006da4:	f7fc fd4c 	bl	8003840 <HAL_Delay>
}
 8006da8:	2000      	movs	r0, #0
 8006daa:	bd08      	pop	{r3, pc}

08006dac <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006dac:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8006dae:	6980      	ldr	r0, [r0, #24]
}
 8006db0:	4010      	ands	r0, r2
 8006db2:	4770      	bx	lr

08006db4 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006db4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006db8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dbc:	69c0      	ldr	r0, [r0, #28]
 8006dbe:	4018      	ands	r0, r3
}
 8006dc0:	0c00      	lsrs	r0, r0, #16
 8006dc2:	4770      	bx	lr

08006dc4 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006dc4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006dc8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dcc:	69c0      	ldr	r0, [r0, #28]
 8006dce:	4018      	ands	r0, r3
}
 8006dd0:	b280      	uxth	r0, r0
 8006dd2:	4770      	bx	lr

08006dd4 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006dd4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006dd8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ddc:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006de0:	6940      	ldr	r0, [r0, #20]
}
 8006de2:	4010      	ands	r0, r2
 8006de4:	4770      	bx	lr

08006de6 <USB_ReadDevInEPInterrupt>:
{
 8006de6:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8006de8:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006dec:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006df0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8006df4:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006df8:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8006dfc:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006dfe:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8006e00:	01db      	lsls	r3, r3, #7
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	4323      	orrs	r3, r4
}
 8006e06:	4018      	ands	r0, r3
 8006e08:	bd10      	pop	{r4, pc}

08006e0a <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1U);
 8006e0a:	6940      	ldr	r0, [r0, #20]
}
 8006e0c:	f000 0001 	and.w	r0, r0, #1
 8006e10:	4770      	bx	lr

08006e12 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e12:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006e16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e1a:	f023 0307 	bic.w	r3, r3, #7
 8006e1e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006e22:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	f002 0206 	and.w	r2, r2, #6
 8006e2c:	2a04      	cmp	r2, #4
 8006e2e:	d105      	bne.n	8006e3c <USB_ActivateSetup+0x2a>
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006e30:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8006e34:	f042 0203 	orr.w	r2, r2, #3
 8006e38:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e3c:	685a      	ldr	r2, [r3, #4]
}
 8006e3e:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e44:	605a      	str	r2, [r3, #4]
}
 8006e46:	4770      	bx	lr

08006e48 <USB_EP0_OutStart>:
{
 8006e48:	b510      	push	{r4, lr}
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e4a:	2400      	movs	r4, #0
  if (dma == 1U)
 8006e4c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e4e:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e52:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8006e56:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006e5a:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e5e:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8006e62:	f044 0418 	orr.w	r4, r4, #24
 8006e66:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e6a:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8006e6e:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8006e72:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8006e76:	d105      	bne.n	8006e84 <USB_EP0_OutStart+0x3c>
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8006e78:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e7c:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8006e80:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8006e84:	2000      	movs	r0, #0
 8006e86:	bd10      	pop	{r4, pc}

08006e88 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8006e88:	b510      	push	{r4, lr}
 8006e8a:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8006e8c:	2180      	movs	r1, #128	; 0x80
 8006e8e:	f7fc fa98 	bl	80033c2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006e92:	2100      	movs	r1, #0
 8006e94:	4620      	mov	r0, r4
}
 8006e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8006e9a:	f7fc ba92 	b.w	80033c2 <USBD_LL_StallEP>
	...

08006ea0 <USBD_StdDevReq>:
{
 8006ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ea2:	780b      	ldrb	r3, [r1, #0]
{
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ea8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	d014      	beq.n	8006eda <USBD_StdDevReq+0x3a>
 8006eb0:	2b40      	cmp	r3, #64	; 0x40
 8006eb2:	d012      	beq.n	8006eda <USBD_StdDevReq+0x3a>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f040 808b 	bne.w	8006fd0 <USBD_StdDevReq+0x130>
    switch (req->bRequest)
 8006eba:	784b      	ldrb	r3, [r1, #1]
 8006ebc:	2b09      	cmp	r3, #9
 8006ebe:	f200 8087 	bhi.w	8006fd0 <USBD_StdDevReq+0x130>
 8006ec2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006ec6:	00df      	.short	0x00df
 8006ec8:	008500f9 	.word	0x008500f9
 8006ecc:	008500f2 	.word	0x008500f2
 8006ed0:	0013007a 	.word	0x0013007a
 8006ed4:	00ca0085 	.word	0x00ca0085
 8006ed8:	0098      	.short	0x0098
    pdev->pClass->Setup(pdev, req);
 8006eda:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8006ede:	4629      	mov	r1, r5
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	4798      	blx	r3
}
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	b003      	add	sp, #12
 8006eea:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8006eec:	884b      	ldrh	r3, [r1, #2]
 8006eee:	0a1a      	lsrs	r2, r3, #8
 8006ef0:	3a01      	subs	r2, #1
 8006ef2:	2a06      	cmp	r2, #6
 8006ef4:	d86c      	bhi.n	8006fd0 <USBD_StdDevReq+0x130>
 8006ef6:	e8df f002 	tbb	[pc, r2]
 8006efa:	2004      	.short	0x2004
 8006efc:	4d6b6b2d 	.word	0x4d6b6b2d
 8006f00:	56          	.byte	0x56
 8006f01:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f02:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006f06:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f08:	f10d 0106 	add.w	r1, sp, #6
 8006f0c:	7c20      	ldrb	r0, [r4, #16]
 8006f0e:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 8006f10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8006f14:	b152      	cbz	r2, 8006f2c <USBD_StdDevReq+0x8c>
 8006f16:	88eb      	ldrh	r3, [r5, #6]
 8006f18:	b143      	cbz	r3, 8006f2c <USBD_StdDevReq+0x8c>
    len = MIN(len, req->wLength);
 8006f1a:	429a      	cmp	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8006f1c:	4601      	mov	r1, r0
 8006f1e:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8006f20:	bf28      	it	cs
 8006f22:	461a      	movcs	r2, r3
 8006f24:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 8006f28:	f000 f9bd 	bl	80072a6 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8006f2c:	88eb      	ldrh	r3, [r5, #6]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1d9      	bne.n	8006ee6 <USBD_StdDevReq+0x46>
      USBD_CtlSendStatus(pdev);
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f9e3 	bl	80072fe <USBD_CtlSendStatus>
 8006f38:	e7d5      	b.n	8006ee6 <USBD_StdDevReq+0x46>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006f3a:	7c02      	ldrb	r2, [r0, #16]
 8006f3c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006f40:	b932      	cbnz	r2, 8006f50 <USBD_StdDevReq+0xb0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006f44:	f10d 0006 	add.w	r0, sp, #6
 8006f48:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f4a:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f4c:	7043      	strb	r3, [r0, #1]
 8006f4e:	e7df      	b.n	8006f10 <USBD_StdDevReq+0x70>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	e7f7      	b.n	8006f44 <USBD_StdDevReq+0xa4>
    switch ((uint8_t)(req->wValue))
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b05      	cmp	r3, #5
 8006f58:	d83a      	bhi.n	8006fd0 <USBD_StdDevReq+0x130>
 8006f5a:	e8df f003 	tbb	[pc, r3]
 8006f5e:	0703      	.short	0x0703
 8006f60:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f64:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	e7cd      	b.n	8006f08 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f6c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	e7c9      	b.n	8006f08 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f74:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	e7c5      	b.n	8006f08 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f7c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	e7c1      	b.n	8006f08 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f84:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	e7bd      	b.n	8006f08 <USBD_StdDevReq+0x68>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f8c:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	e7b9      	b.n	8006f08 <USBD_StdDevReq+0x68>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006f94:	7c03      	ldrb	r3, [r0, #16]
 8006f96:	b9db      	cbnz	r3, 8006fd0 <USBD_StdDevReq+0x130>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f98:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006f9c:	f10d 0006 	add.w	r0, sp, #6
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa2:	4798      	blx	r3
 8006fa4:	e7b4      	b.n	8006f10 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006fa6:	7c03      	ldrb	r3, [r0, #16]
 8006fa8:	b993      	cbnz	r3, 8006fd0 <USBD_StdDevReq+0x130>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006faa:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8006fae:	f10d 0006 	add.w	r0, sp, #6
 8006fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb4:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fb6:	2307      	movs	r3, #7
 8006fb8:	e7c8      	b.n	8006f4c <USBD_StdDevReq+0xac>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fba:	888b      	ldrh	r3, [r1, #4]
 8006fbc:	b943      	cbnz	r3, 8006fd0 <USBD_StdDevReq+0x130>
 8006fbe:	88cb      	ldrh	r3, [r1, #6]
 8006fc0:	b933      	cbnz	r3, 8006fd0 <USBD_StdDevReq+0x130>
 8006fc2:	884d      	ldrh	r5, [r1, #2]
 8006fc4:	2d7f      	cmp	r5, #127	; 0x7f
 8006fc6:	d803      	bhi.n	8006fd0 <USBD_StdDevReq+0x130>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d103      	bne.n	8006fd8 <USBD_StdDevReq+0x138>
      USBD_CtlError(pdev , req);
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f7ff ff59 	bl	8006e88 <USBD_CtlError.constprop.1>
 8006fd6:	e786      	b.n	8006ee6 <USBD_StdDevReq+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fd8:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8006fda:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fde:	f7fc fa11 	bl	8003404 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f000 f98b 	bl	80072fe <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006fe8:	b11d      	cbz	r5, 8006ff2 <USBD_StdDevReq+0x152>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fea:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fec:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 8006ff0:	e779      	b.n	8006ee6 <USBD_StdDevReq+0x46>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e7fa      	b.n	8006fec <USBD_StdDevReq+0x14c>
  cfgidx = (uint8_t)(req->wValue);
 8006ff6:	7889      	ldrb	r1, [r1, #2]
 8006ff8:	4d35      	ldr	r5, [pc, #212]	; (80070d0 <USBD_StdDevReq+0x230>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ffa:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8006ffc:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ffe:	d8e7      	bhi.n	8006fd0 <USBD_StdDevReq+0x130>
    switch (pdev->dev_state)
 8007000:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007004:	2b02      	cmp	r3, #2
 8007006:	d008      	beq.n	800701a <USBD_StdDevReq+0x17a>
 8007008:	2b03      	cmp	r3, #3
 800700a:	d014      	beq.n	8007036 <USBD_StdDevReq+0x196>
      USBD_CtlError(pdev, req);
 800700c:	f7ff ff3c 	bl	8006e88 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007010:	7829      	ldrb	r1, [r5, #0]
 8007012:	4620      	mov	r0, r4
 8007014:	f7f9 fd56 	bl	8000ac4 <USBD_ClrClassConfig>
 8007018:	e765      	b.n	8006ee6 <USBD_StdDevReq+0x46>
      if (cfgidx)
 800701a:	2900      	cmp	r1, #0
 800701c:	d089      	beq.n	8006f32 <USBD_StdDevReq+0x92>
        pdev->dev_config = cfgidx;
 800701e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007020:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8007022:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007024:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007028:	4620      	mov	r0, r4
 800702a:	f7f9 fd40 	bl	8000aae <USBD_SetClassConfig>
 800702e:	2802      	cmp	r0, #2
 8007030:	f47f af7f 	bne.w	8006f32 <USBD_StdDevReq+0x92>
 8007034:	e7cc      	b.n	8006fd0 <USBD_StdDevReq+0x130>
      if (cfgidx == 0U)
 8007036:	b931      	cbnz	r1, 8007046 <USBD_StdDevReq+0x1a6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007038:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;
 800703a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800703c:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        USBD_ClrClassConfig(pdev, cfgidx);
 8007040:	f7f9 fd40 	bl	8000ac4 <USBD_ClrClassConfig>
 8007044:	e775      	b.n	8006f32 <USBD_StdDevReq+0x92>
      else if (cfgidx != pdev->dev_config)
 8007046:	6841      	ldr	r1, [r0, #4]
 8007048:	2901      	cmp	r1, #1
 800704a:	f43f af72 	beq.w	8006f32 <USBD_StdDevReq+0x92>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800704e:	b2c9      	uxtb	r1, r1
 8007050:	f7f9 fd38 	bl	8000ac4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007054:	7829      	ldrb	r1, [r5, #0]
 8007056:	6061      	str	r1, [r4, #4]
 8007058:	e7e6      	b.n	8007028 <USBD_StdDevReq+0x188>
  if (req->wLength != 1U)
 800705a:	88ca      	ldrh	r2, [r1, #6]
 800705c:	2a01      	cmp	r2, #1
 800705e:	d1b7      	bne.n	8006fd0 <USBD_StdDevReq+0x130>
    switch (pdev->dev_state)
 8007060:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0b3      	beq.n	8006fd0 <USBD_StdDevReq+0x130>
 8007068:	2b02      	cmp	r3, #2
 800706a:	d903      	bls.n	8007074 <USBD_StdDevReq+0x1d4>
 800706c:	2b03      	cmp	r3, #3
 800706e:	d1af      	bne.n	8006fd0 <USBD_StdDevReq+0x130>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007070:	1d01      	adds	r1, r0, #4
 8007072:	e003      	b.n	800707c <USBD_StdDevReq+0x1dc>
      pdev->dev_default_config = 0U;
 8007074:	4601      	mov	r1, r0
 8007076:	2300      	movs	r3, #0
 8007078:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800707c:	4620      	mov	r0, r4
 800707e:	f000 f912 	bl	80072a6 <USBD_CtlSendData>
 8007082:	e730      	b.n	8006ee6 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8007084:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8007088:	3b01      	subs	r3, #1
 800708a:	2b02      	cmp	r3, #2
 800708c:	d8a0      	bhi.n	8006fd0 <USBD_StdDevReq+0x130>
    if(req->wLength != 0x2U)
 800708e:	88cb      	ldrh	r3, [r1, #6]
 8007090:	2b02      	cmp	r3, #2
 8007092:	d19d      	bne.n	8006fd0 <USBD_StdDevReq+0x130>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007094:	2301      	movs	r3, #1
 8007096:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8007098:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 800709c:	b10b      	cbz	r3, 80070a2 <USBD_StdDevReq+0x202>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800709e:	2303      	movs	r3, #3
 80070a0:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80070a2:	2202      	movs	r2, #2
 80070a4:	f104 010c 	add.w	r1, r4, #12
 80070a8:	e7e8      	b.n	800707c <USBD_StdDevReq+0x1dc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070aa:	884b      	ldrh	r3, [r1, #2]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	f47f af1a 	bne.w	8006ee6 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 80070b2:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 80070b6:	e73c      	b.n	8006f32 <USBD_StdDevReq+0x92>
  switch (pdev->dev_state)
 80070b8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80070bc:	3b01      	subs	r3, #1
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d886      	bhi.n	8006fd0 <USBD_StdDevReq+0x130>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070c2:	884b      	ldrh	r3, [r1, #2]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	f47f af0e 	bne.w	8006ee6 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e7f1      	b.n	80070b2 <USBD_StdDevReq+0x212>
 80070ce:	bf00      	nop
 80070d0:	200007c0 	.word	0x200007c0

080070d4 <USBD_StdItfReq>:
{
 80070d4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070d6:	780b      	ldrb	r3, [r1, #0]
{
 80070d8:	4604      	mov	r4, r0
 80070da:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d002      	beq.n	80070ea <USBD_StdItfReq+0x16>
 80070e4:	2b40      	cmp	r3, #64	; 0x40
 80070e6:	d000      	beq.n	80070ea <USBD_StdItfReq+0x16>
 80070e8:	b9ab      	cbnz	r3, 8007116 <USBD_StdItfReq+0x42>
    switch (pdev->dev_state)
 80070ea:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80070ee:	3b01      	subs	r3, #1
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d810      	bhi.n	8007116 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070f4:	792b      	ldrb	r3, [r5, #4]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d80d      	bhi.n	8007116 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80070fa:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80070fe:	4629      	mov	r1, r5
 8007100:	4620      	mov	r0, r4
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007106:	88eb      	ldrh	r3, [r5, #6]
 8007108:	b91b      	cbnz	r3, 8007112 <USBD_StdItfReq+0x3e>
 800710a:	b910      	cbnz	r0, 8007112 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 800710c:	4620      	mov	r0, r4
 800710e:	f000 f8f6 	bl	80072fe <USBD_CtlSendStatus>
}
 8007112:	2000      	movs	r0, #0
 8007114:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8007116:	4620      	mov	r0, r4
 8007118:	f7ff feb6 	bl	8006e88 <USBD_CtlError.constprop.1>
      break;
 800711c:	e7f9      	b.n	8007112 <USBD_StdItfReq+0x3e>

0800711e <USBD_StdEPReq>:
{
 800711e:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007120:	780a      	ldrb	r2, [r1, #0]
{
 8007122:	4604      	mov	r4, r0
 8007124:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007126:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800712a:	2a20      	cmp	r2, #32
 800712c:	d014      	beq.n	8007158 <USBD_StdEPReq+0x3a>
 800712e:	2a40      	cmp	r2, #64	; 0x40
 8007130:	d012      	beq.n	8007158 <USBD_StdEPReq+0x3a>
 8007132:	b96a      	cbnz	r2, 8007150 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8007134:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007136:	888d      	ldrh	r5, [r1, #4]
    switch (req->bRequest)
 8007138:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 800713a:	b2e9      	uxtb	r1, r5
    switch (req->bRequest)
 800713c:	d020      	beq.n	8007180 <USBD_StdEPReq+0x62>
 800713e:	d336      	bcc.n	80071ae <USBD_StdEPReq+0x90>
 8007140:	2a03      	cmp	r2, #3
 8007142:	d105      	bne.n	8007150 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8007144:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007148:	2a02      	cmp	r2, #2
 800714a:	d027      	beq.n	800719c <USBD_StdEPReq+0x7e>
 800714c:	2a03      	cmp	r2, #3
 800714e:	d00b      	beq.n	8007168 <USBD_StdEPReq+0x4a>
        USBD_CtlError(pdev, req);
 8007150:	4620      	mov	r0, r4
 8007152:	f7ff fe99 	bl	8006e88 <USBD_CtlError.constprop.1>
        break;
 8007156:	e005      	b.n	8007164 <USBD_StdEPReq+0x46>
    pdev->pClass->Setup (pdev, req);
 8007158:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800715c:	4619      	mov	r1, r3
 800715e:	4620      	mov	r0, r4
 8007160:	6892      	ldr	r2, [r2, #8]
 8007162:	4790      	blx	r2
}
 8007164:	2000      	movs	r0, #0
 8007166:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007168:	885a      	ldrh	r2, [r3, #2]
 800716a:	b92a      	cbnz	r2, 8007178 <USBD_StdEPReq+0x5a>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800716c:	064a      	lsls	r2, r1, #25
 800716e:	d003      	beq.n	8007178 <USBD_StdEPReq+0x5a>
 8007170:	88db      	ldrh	r3, [r3, #6]
 8007172:	b90b      	cbnz	r3, 8007178 <USBD_StdEPReq+0x5a>
            USBD_LL_StallEP(pdev, ep_addr);
 8007174:	f7fc f925 	bl	80033c2 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8007178:	4620      	mov	r0, r4
 800717a:	f000 f8c0 	bl	80072fe <USBD_CtlSendStatus>
        break;
 800717e:	e7f1      	b.n	8007164 <USBD_StdEPReq+0x46>
      switch (pdev->dev_state)
 8007180:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007184:	2a02      	cmp	r2, #2
 8007186:	d009      	beq.n	800719c <USBD_StdEPReq+0x7e>
 8007188:	2a03      	cmp	r2, #3
 800718a:	d1e1      	bne.n	8007150 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800718c:	885b      	ldrh	r3, [r3, #2]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e8      	bne.n	8007164 <USBD_StdEPReq+0x46>
          if ((ep_addr & 0x7FU) != 0x00U)
 8007192:	064d      	lsls	r5, r1, #25
 8007194:	d0f0      	beq.n	8007178 <USBD_StdEPReq+0x5a>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007196:	f7fc f91b 	bl	80033d0 <USBD_LL_ClearStallEP>
 800719a:	e7ed      	b.n	8007178 <USBD_StdEPReq+0x5a>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800719c:	064b      	lsls	r3, r1, #25
 800719e:	d0d7      	beq.n	8007150 <USBD_StdEPReq+0x32>
          USBD_LL_StallEP(pdev, ep_addr);
 80071a0:	f7fc f90f 	bl	80033c2 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80071a4:	2180      	movs	r1, #128	; 0x80
 80071a6:	4620      	mov	r0, r4
 80071a8:	f7fc f90b 	bl	80033c2 <USBD_LL_StallEP>
 80071ac:	e7da      	b.n	8007164 <USBD_StdEPReq+0x46>
      switch (pdev->dev_state)
 80071ae:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d018      	beq.n	80071e8 <USBD_StdEPReq+0xca>
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d1ca      	bne.n	8007150 <USBD_StdEPReq+0x32>
 80071ba:	f001 020f 	and.w	r2, r1, #15
 80071be:	2314      	movs	r3, #20
        if((ep_addr & 0x80U) == 0x80U)
 80071c0:	f015 0f80 	tst.w	r5, #128	; 0x80
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071c4:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 80071c8:	d01f      	beq.n	800720a <USBD_StdEPReq+0xec>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071ca:	6992      	ldr	r2, [r2, #24]
 80071cc:	2a00      	cmp	r2, #0
 80071ce:	d0bf      	beq.n	8007150 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80071d0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80071d4:	fb05 3503 	mla	r5, r5, r3, r3
 80071d8:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071da:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80071de:	d11f      	bne.n	8007220 <USBD_StdEPReq+0x102>
            pep->status = 0x0001U;
 80071e0:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071e2:	2202      	movs	r2, #2
 80071e4:	4629      	mov	r1, r5
 80071e6:	e00c      	b.n	8007202 <USBD_StdEPReq+0xe4>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071e8:	064a      	lsls	r2, r1, #25
 80071ea:	d1b1      	bne.n	8007150 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80071ec:	062b      	lsls	r3, r5, #24
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80071ee:	f04f 0202 	mov.w	r2, #2
          pep->status = 0x0000U;
 80071f2:	f04f 0300 	mov.w	r3, #0
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80071f6:	bf4c      	ite	mi
 80071f8:	f100 0114 	addmi.w	r1, r0, #20
 80071fc:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8007200:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007202:	4620      	mov	r0, r4
 8007204:	f000 f84f 	bl	80072a6 <USBD_CtlSendData>
          break;
 8007208:	e7ac      	b.n	8007164 <USBD_StdEPReq+0x46>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800720a:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 800720e:	2a00      	cmp	r2, #0
 8007210:	d09e      	beq.n	8007150 <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007212:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8007216:	fb03 0505 	mla	r5, r3, r5, r0
 800721a:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 800721e:	e7dc      	b.n	80071da <USBD_StdEPReq+0xbc>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007220:	4620      	mov	r0, r4
 8007222:	f7fc f8dc 	bl	80033de <USBD_LL_IsStallEP>
 8007226:	b108      	cbz	r0, 800722c <USBD_StdEPReq+0x10e>
            pep->status = 0x0001U;
 8007228:	2301      	movs	r3, #1
 800722a:	e7d9      	b.n	80071e0 <USBD_StdEPReq+0xc2>
            pep->status = 0x0000U;
 800722c:	6028      	str	r0, [r5, #0]
 800722e:	e7d8      	b.n	80071e2 <USBD_StdEPReq+0xc4>

08007230 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007230:	780b      	ldrb	r3, [r1, #0]
 8007232:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007234:	784b      	ldrb	r3, [r1, #1]
 8007236:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007238:	78ca      	ldrb	r2, [r1, #3]
 800723a:	788b      	ldrb	r3, [r1, #2]
 800723c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007240:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007242:	794a      	ldrb	r2, [r1, #5]
 8007244:	790b      	ldrb	r3, [r1, #4]
 8007246:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800724a:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800724c:	79ca      	ldrb	r2, [r1, #7]
 800724e:	798b      	ldrb	r3, [r1, #6]
 8007250:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007254:	80c3      	strh	r3, [r0, #6]
}
 8007256:	4770      	bx	lr

08007258 <USBD_CtlError>:
{
 8007258:	b510      	push	{r4, lr}
 800725a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800725c:	2180      	movs	r1, #128	; 0x80
 800725e:	f7fc f8b0 	bl	80033c2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007262:	2100      	movs	r1, #0
 8007264:	4620      	mov	r0, r4
}
 8007266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800726a:	f7fc b8aa 	b.w	80033c2 <USBD_LL_StallEP>

0800726e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800726e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8007270:	b188      	cbz	r0, 8007296 <USBD_GetString+0x28>
 8007272:	4605      	mov	r5, r0
 8007274:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8007276:	f815 4b01 	ldrb.w	r4, [r5], #1
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2c00      	cmp	r4, #0
 800727e:	d1f9      	bne.n	8007274 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007280:	3301      	adds	r3, #1
 8007282:	3801      	subs	r0, #1
 8007284:	005b      	lsls	r3, r3, #1
 8007286:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007288:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800728a:	2303      	movs	r3, #3
 800728c:	704b      	strb	r3, [r1, #1]
 800728e:	2302      	movs	r3, #2
    while (*desc != '\0')
 8007290:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007294:	b905      	cbnz	r5, 8007298 <USBD_GetString+0x2a>
}
 8007296:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 800729c:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 800729e:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	548c      	strb	r4, [r1, r2]
 80072a4:	e7f4      	b.n	8007290 <USBD_GetString+0x22>

080072a6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80072a6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072a8:	2202      	movs	r2, #2
{
 80072aa:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072ac:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80072b0:	460a      	mov	r2, r1
 80072b2:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 80072b4:	e9c0 3307 	strd	r3, r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80072b8:	f7fc f8ab 	bl	8003412 <USBD_LL_Transmit>

  return USBD_OK;
}
 80072bc:	2000      	movs	r0, #0
 80072be:	bd10      	pop	{r4, pc}

080072c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80072c0:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80072c2:	4613      	mov	r3, r2
 80072c4:	460a      	mov	r2, r1
 80072c6:	2100      	movs	r1, #0
 80072c8:	f7fc f8a3 	bl	8003412 <USBD_LL_Transmit>

  return USBD_OK;
}
 80072cc:	2000      	movs	r0, #0
 80072ce:	bd08      	pop	{r3, pc}

080072d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80072d0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80072d2:	2203      	movs	r2, #3
{
 80072d4:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80072d6:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80072da:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 80072dc:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80072e0:	2100      	movs	r1, #0
  pdev->ep_out[0].rem_length   = len;
 80072e2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80072e6:	f7fc f89b 	bl	8003420 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80072ea:	2000      	movs	r0, #0
 80072ec:	bd10      	pop	{r4, pc}

080072ee <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80072ee:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072f0:	4613      	mov	r3, r2
 80072f2:	460a      	mov	r2, r1
 80072f4:	2100      	movs	r1, #0
 80072f6:	f7fc f893 	bl	8003420 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80072fa:	2000      	movs	r0, #0
 80072fc:	bd08      	pop	{r3, pc}

080072fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80072fe:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007300:	2304      	movs	r3, #4
 8007302:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007306:	2300      	movs	r3, #0
 8007308:	461a      	mov	r2, r3
 800730a:	4619      	mov	r1, r3
 800730c:	f7fc f881 	bl	8003412 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007310:	2000      	movs	r0, #0
 8007312:	bd08      	pop	{r3, pc}

08007314 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007314:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007316:	2305      	movs	r3, #5
 8007318:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800731c:	2300      	movs	r3, #0
 800731e:	461a      	mov	r2, r3
 8007320:	4619      	mov	r1, r3
 8007322:	f7fc f87d 	bl	8003420 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007326:	2000      	movs	r0, #0
 8007328:	bd08      	pop	{r3, pc}
	...

0800732c <__libc_init_array>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	4e0d      	ldr	r6, [pc, #52]	; (8007364 <__libc_init_array+0x38>)
 8007330:	4c0d      	ldr	r4, [pc, #52]	; (8007368 <__libc_init_array+0x3c>)
 8007332:	1ba4      	subs	r4, r4, r6
 8007334:	10a4      	asrs	r4, r4, #2
 8007336:	2500      	movs	r5, #0
 8007338:	42a5      	cmp	r5, r4
 800733a:	d109      	bne.n	8007350 <__libc_init_array+0x24>
 800733c:	4e0b      	ldr	r6, [pc, #44]	; (800736c <__libc_init_array+0x40>)
 800733e:	4c0c      	ldr	r4, [pc, #48]	; (8007370 <__libc_init_array+0x44>)
 8007340:	f000 f904 	bl	800754c <_init>
 8007344:	1ba4      	subs	r4, r4, r6
 8007346:	10a4      	asrs	r4, r4, #2
 8007348:	2500      	movs	r5, #0
 800734a:	42a5      	cmp	r5, r4
 800734c:	d105      	bne.n	800735a <__libc_init_array+0x2e>
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007354:	4798      	blx	r3
 8007356:	3501      	adds	r5, #1
 8007358:	e7ee      	b.n	8007338 <__libc_init_array+0xc>
 800735a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800735e:	4798      	blx	r3
 8007360:	3501      	adds	r5, #1
 8007362:	e7f2      	b.n	800734a <__libc_init_array+0x1e>
 8007364:	08007600 	.word	0x08007600
 8007368:	08007600 	.word	0x08007600
 800736c:	08007600 	.word	0x08007600
 8007370:	08007604 	.word	0x08007604

08007374 <malloc>:
 8007374:	4b02      	ldr	r3, [pc, #8]	; (8007380 <malloc+0xc>)
 8007376:	4601      	mov	r1, r0
 8007378:	6818      	ldr	r0, [r3, #0]
 800737a:	f000 b86d 	b.w	8007458 <_malloc_r>
 800737e:	bf00      	nop
 8007380:	20000158 	.word	0x20000158

08007384 <free>:
 8007384:	4b02      	ldr	r3, [pc, #8]	; (8007390 <free+0xc>)
 8007386:	4601      	mov	r1, r0
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	f000 b817 	b.w	80073bc <_free_r>
 800738e:	bf00      	nop
 8007390:	20000158 	.word	0x20000158

08007394 <memcpy>:
 8007394:	b510      	push	{r4, lr}
 8007396:	1e43      	subs	r3, r0, #1
 8007398:	440a      	add	r2, r1
 800739a:	4291      	cmp	r1, r2
 800739c:	d100      	bne.n	80073a0 <memcpy+0xc>
 800739e:	bd10      	pop	{r4, pc}
 80073a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a8:	e7f7      	b.n	800739a <memcpy+0x6>

080073aa <memset>:
 80073aa:	4402      	add	r2, r0
 80073ac:	4603      	mov	r3, r0
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d100      	bne.n	80073b4 <memset+0xa>
 80073b2:	4770      	bx	lr
 80073b4:	f803 1b01 	strb.w	r1, [r3], #1
 80073b8:	e7f9      	b.n	80073ae <memset+0x4>
	...

080073bc <_free_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4605      	mov	r5, r0
 80073c0:	2900      	cmp	r1, #0
 80073c2:	d045      	beq.n	8007450 <_free_r+0x94>
 80073c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c8:	1f0c      	subs	r4, r1, #4
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bfb8      	it	lt
 80073ce:	18e4      	addlt	r4, r4, r3
 80073d0:	f000 f8ac 	bl	800752c <__malloc_lock>
 80073d4:	4a1f      	ldr	r2, [pc, #124]	; (8007454 <_free_r+0x98>)
 80073d6:	6813      	ldr	r3, [r2, #0]
 80073d8:	4610      	mov	r0, r2
 80073da:	b933      	cbnz	r3, 80073ea <_free_r+0x2e>
 80073dc:	6063      	str	r3, [r4, #4]
 80073de:	6014      	str	r4, [r2, #0]
 80073e0:	4628      	mov	r0, r5
 80073e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073e6:	f000 b8a2 	b.w	800752e <__malloc_unlock>
 80073ea:	42a3      	cmp	r3, r4
 80073ec:	d90c      	bls.n	8007408 <_free_r+0x4c>
 80073ee:	6821      	ldr	r1, [r4, #0]
 80073f0:	1862      	adds	r2, r4, r1
 80073f2:	4293      	cmp	r3, r2
 80073f4:	bf04      	itt	eq
 80073f6:	681a      	ldreq	r2, [r3, #0]
 80073f8:	685b      	ldreq	r3, [r3, #4]
 80073fa:	6063      	str	r3, [r4, #4]
 80073fc:	bf04      	itt	eq
 80073fe:	1852      	addeq	r2, r2, r1
 8007400:	6022      	streq	r2, [r4, #0]
 8007402:	6004      	str	r4, [r0, #0]
 8007404:	e7ec      	b.n	80073e0 <_free_r+0x24>
 8007406:	4613      	mov	r3, r2
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	b10a      	cbz	r2, 8007410 <_free_r+0x54>
 800740c:	42a2      	cmp	r2, r4
 800740e:	d9fa      	bls.n	8007406 <_free_r+0x4a>
 8007410:	6819      	ldr	r1, [r3, #0]
 8007412:	1858      	adds	r0, r3, r1
 8007414:	42a0      	cmp	r0, r4
 8007416:	d10b      	bne.n	8007430 <_free_r+0x74>
 8007418:	6820      	ldr	r0, [r4, #0]
 800741a:	4401      	add	r1, r0
 800741c:	1858      	adds	r0, r3, r1
 800741e:	4282      	cmp	r2, r0
 8007420:	6019      	str	r1, [r3, #0]
 8007422:	d1dd      	bne.n	80073e0 <_free_r+0x24>
 8007424:	6810      	ldr	r0, [r2, #0]
 8007426:	6852      	ldr	r2, [r2, #4]
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	4401      	add	r1, r0
 800742c:	6019      	str	r1, [r3, #0]
 800742e:	e7d7      	b.n	80073e0 <_free_r+0x24>
 8007430:	d902      	bls.n	8007438 <_free_r+0x7c>
 8007432:	230c      	movs	r3, #12
 8007434:	602b      	str	r3, [r5, #0]
 8007436:	e7d3      	b.n	80073e0 <_free_r+0x24>
 8007438:	6820      	ldr	r0, [r4, #0]
 800743a:	1821      	adds	r1, r4, r0
 800743c:	428a      	cmp	r2, r1
 800743e:	bf04      	itt	eq
 8007440:	6811      	ldreq	r1, [r2, #0]
 8007442:	6852      	ldreq	r2, [r2, #4]
 8007444:	6062      	str	r2, [r4, #4]
 8007446:	bf04      	itt	eq
 8007448:	1809      	addeq	r1, r1, r0
 800744a:	6021      	streq	r1, [r4, #0]
 800744c:	605c      	str	r4, [r3, #4]
 800744e:	e7c7      	b.n	80073e0 <_free_r+0x24>
 8007450:	bd38      	pop	{r3, r4, r5, pc}
 8007452:	bf00      	nop
 8007454:	200007c4 	.word	0x200007c4

08007458 <_malloc_r>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	1ccd      	adds	r5, r1, #3
 800745c:	f025 0503 	bic.w	r5, r5, #3
 8007460:	3508      	adds	r5, #8
 8007462:	2d0c      	cmp	r5, #12
 8007464:	bf38      	it	cc
 8007466:	250c      	movcc	r5, #12
 8007468:	2d00      	cmp	r5, #0
 800746a:	4606      	mov	r6, r0
 800746c:	db01      	blt.n	8007472 <_malloc_r+0x1a>
 800746e:	42a9      	cmp	r1, r5
 8007470:	d903      	bls.n	800747a <_malloc_r+0x22>
 8007472:	230c      	movs	r3, #12
 8007474:	6033      	str	r3, [r6, #0]
 8007476:	2000      	movs	r0, #0
 8007478:	bd70      	pop	{r4, r5, r6, pc}
 800747a:	f000 f857 	bl	800752c <__malloc_lock>
 800747e:	4a21      	ldr	r2, [pc, #132]	; (8007504 <_malloc_r+0xac>)
 8007480:	6814      	ldr	r4, [r2, #0]
 8007482:	4621      	mov	r1, r4
 8007484:	b991      	cbnz	r1, 80074ac <_malloc_r+0x54>
 8007486:	4c20      	ldr	r4, [pc, #128]	; (8007508 <_malloc_r+0xb0>)
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	b91b      	cbnz	r3, 8007494 <_malloc_r+0x3c>
 800748c:	4630      	mov	r0, r6
 800748e:	f000 f83d 	bl	800750c <_sbrk_r>
 8007492:	6020      	str	r0, [r4, #0]
 8007494:	4629      	mov	r1, r5
 8007496:	4630      	mov	r0, r6
 8007498:	f000 f838 	bl	800750c <_sbrk_r>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d124      	bne.n	80074ea <_malloc_r+0x92>
 80074a0:	230c      	movs	r3, #12
 80074a2:	6033      	str	r3, [r6, #0]
 80074a4:	4630      	mov	r0, r6
 80074a6:	f000 f842 	bl	800752e <__malloc_unlock>
 80074aa:	e7e4      	b.n	8007476 <_malloc_r+0x1e>
 80074ac:	680b      	ldr	r3, [r1, #0]
 80074ae:	1b5b      	subs	r3, r3, r5
 80074b0:	d418      	bmi.n	80074e4 <_malloc_r+0x8c>
 80074b2:	2b0b      	cmp	r3, #11
 80074b4:	d90f      	bls.n	80074d6 <_malloc_r+0x7e>
 80074b6:	600b      	str	r3, [r1, #0]
 80074b8:	50cd      	str	r5, [r1, r3]
 80074ba:	18cc      	adds	r4, r1, r3
 80074bc:	4630      	mov	r0, r6
 80074be:	f000 f836 	bl	800752e <__malloc_unlock>
 80074c2:	f104 000b 	add.w	r0, r4, #11
 80074c6:	1d23      	adds	r3, r4, #4
 80074c8:	f020 0007 	bic.w	r0, r0, #7
 80074cc:	1ac3      	subs	r3, r0, r3
 80074ce:	d0d3      	beq.n	8007478 <_malloc_r+0x20>
 80074d0:	425a      	negs	r2, r3
 80074d2:	50e2      	str	r2, [r4, r3]
 80074d4:	e7d0      	b.n	8007478 <_malloc_r+0x20>
 80074d6:	428c      	cmp	r4, r1
 80074d8:	684b      	ldr	r3, [r1, #4]
 80074da:	bf16      	itet	ne
 80074dc:	6063      	strne	r3, [r4, #4]
 80074de:	6013      	streq	r3, [r2, #0]
 80074e0:	460c      	movne	r4, r1
 80074e2:	e7eb      	b.n	80074bc <_malloc_r+0x64>
 80074e4:	460c      	mov	r4, r1
 80074e6:	6849      	ldr	r1, [r1, #4]
 80074e8:	e7cc      	b.n	8007484 <_malloc_r+0x2c>
 80074ea:	1cc4      	adds	r4, r0, #3
 80074ec:	f024 0403 	bic.w	r4, r4, #3
 80074f0:	42a0      	cmp	r0, r4
 80074f2:	d005      	beq.n	8007500 <_malloc_r+0xa8>
 80074f4:	1a21      	subs	r1, r4, r0
 80074f6:	4630      	mov	r0, r6
 80074f8:	f000 f808 	bl	800750c <_sbrk_r>
 80074fc:	3001      	adds	r0, #1
 80074fe:	d0cf      	beq.n	80074a0 <_malloc_r+0x48>
 8007500:	6025      	str	r5, [r4, #0]
 8007502:	e7db      	b.n	80074bc <_malloc_r+0x64>
 8007504:	200007c4 	.word	0x200007c4
 8007508:	200007c8 	.word	0x200007c8

0800750c <_sbrk_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	4c06      	ldr	r4, [pc, #24]	; (8007528 <_sbrk_r+0x1c>)
 8007510:	2300      	movs	r3, #0
 8007512:	4605      	mov	r5, r0
 8007514:	4608      	mov	r0, r1
 8007516:	6023      	str	r3, [r4, #0]
 8007518:	f000 f80a 	bl	8007530 <_sbrk>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d102      	bne.n	8007526 <_sbrk_r+0x1a>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	b103      	cbz	r3, 8007526 <_sbrk_r+0x1a>
 8007524:	602b      	str	r3, [r5, #0]
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	2000144c 	.word	0x2000144c

0800752c <__malloc_lock>:
 800752c:	4770      	bx	lr

0800752e <__malloc_unlock>:
 800752e:	4770      	bx	lr

08007530 <_sbrk>:
 8007530:	4b04      	ldr	r3, [pc, #16]	; (8007544 <_sbrk+0x14>)
 8007532:	6819      	ldr	r1, [r3, #0]
 8007534:	4602      	mov	r2, r0
 8007536:	b909      	cbnz	r1, 800753c <_sbrk+0xc>
 8007538:	4903      	ldr	r1, [pc, #12]	; (8007548 <_sbrk+0x18>)
 800753a:	6019      	str	r1, [r3, #0]
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	4402      	add	r2, r0
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	4770      	bx	lr
 8007544:	200007cc 	.word	0x200007cc
 8007548:	20001450 	.word	0x20001450

0800754c <_init>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	bf00      	nop
 8007550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007552:	bc08      	pop	{r3}
 8007554:	469e      	mov	lr, r3
 8007556:	4770      	bx	lr

08007558 <_fini>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	bf00      	nop
 800755c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755e:	bc08      	pop	{r3}
 8007560:	469e      	mov	lr, r3
 8007562:	4770      	bx	lr
